<?xml version="1.0" encoding="utf-8"?>
<PdtTransformationSetting xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
  <Transformations>
    <PdtTransformation>
      <name>ThirdPartyName</name>
      <type>Csv2Xml</type>
      <label>ThirdParty Names</label>
      <category>Third Parties</category>
      <templateFile>Import_ThirdParty_names.xml</templateFile>
      <csvSrcSeparator>0</csvSrcSeparator>
      <csvDestSeparator>59</csvDestSeparator>
      <columns>
        <PdtColumn>
          <name>Reference</name>
          <len>0</len>
          <isRequired>true</isRequired>
          <isRelativeToRootNode>false</isRelativeToRootNode>
          <destPaths>
            <PdtColumnDest>
              <path>//*[local-name() = 'partyId'][contains(@*[local-name() = 'partyIdScheme'], 'reference')]/text()</path>
            </PdtColumnDest>
          </destPaths>
        </PdtColumn>
        <PdtColumn>
          <name>Name</name>
          <len>0</len>
          <isRequired>true</isRequired>
          <isRelativeToRootNode>false</isRelativeToRootNode>
          <destPaths>
            <PdtColumnDest>
              <path>//*[local-name() = 'partyId'][contains(@*[local-name() = 'partyIdScheme'], 'name')]/text()</path>
            </PdtColumnDest>
            <PdtColumnDest>
              <path>//*[local-name() = 'partyName']/text()</path>
            </PdtColumnDest>
          </destPaths>
        </PdtColumn>
        <PdtColumn>
          <name>Location</name>
          <len>0</len>
          <isRequired>false</isRequired>
          <isRelativeToRootNode>false</isRelativeToRootNode>
          <destPaths>
            <PdtColumnDest>
              <path>//*[local-name() = 'location']</path>
            </PdtColumnDest>
          </destPaths>
        </PdtColumn>
      </columns>
    </PdtTransformation>
    <PdtTransformation>
      <name>ThirdPartyEntity</name>
      <type>Csv2Xml</type>
      <label>ThirdParty Entities</label>
      <category>Third Parties</category>
      <templateFile>Import_ThirdParty_Enty.xml</templateFile>
      <csvSrcSeparator>0</csvSrcSeparator>
      <csvDestSeparator>59</csvDestSeparator>
    </PdtTransformation>
    <PdtTransformation>
      <name>Share</name>
      <type>Csv2Xml</type>
      <label>Share</label>
      <category>Instruments</category>
      <templateFile>Import_Share.xml</templateFile>
      <csvSrcSeparator>0</csvSrcSeparator>
      <csvDestSeparator>59</csvDestSeparator>
      <columns>
        <PdtColumn>
          <name>Reference</name>
          <len>0</len>
          <isRequired>true</isRequired>
          <isRelativeToRootNode>false</isRelativeToRootNode>
          <destPaths>
            <PdtColumnDest>
              <path>//*[local-name() = 'identifier']/*[local-name() = 'reference'][@*[local-name() = 'name'] = 'Reference']/text()</path>
            </PdtColumnDest>
          </destPaths>
        </PdtColumn>
        <PdtColumn>
          <name>Name</name>
          <len>0</len>
          <isRequired>true</isRequired>
          <isRelativeToRootNode>false</isRelativeToRootNode>
          <destPaths>
            <PdtColumnDest>
              <path>//*[local-name() = 'share']/*[local-name() = 'name']/text()</path>
            </PdtColumnDest>
          </destPaths>
        </PdtColumn>
      </columns>
    </PdtTransformation>
    <PdtTransformation>
      <name>YieldCurve</name>
      <type>Csv2Xml</type>
      <label>Yield Curve</label>
      <category>Market Data</category>
      <templateFile>importYieldCurve.xml</templateFile>
      <repeatingRootPath>//*[local-name() = 'points']</repeatingRootPath>
      <repeatingChildrenPath>//*[local-name() = 'points']/*[local-name() = 'point']</repeatingChildrenPath>
      <csvSrcSeparator>0</csvSrcSeparator>
      <csvDestSeparator>59</csvDestSeparator>
      <columns>
        <PdtColumn>
          <name>CURVE_NAME</name>
          <len>0</len>
          <isRequired>true</isRequired>
          <isRelativeToRootNode>false</isRelativeToRootNode>
          <destPaths>
            <PdtColumnDest>
              <path>//*[local-name() = 'name']/text()</path>
            </PdtColumnDest>
          </destPaths>
        </PdtColumn>
        <PdtColumn>
          <name>MARKET_FAMILY</name>
          <len>0</len>
          <isRequired>true</isRequired>
          <isRelativeToRootNode>false</isRelativeToRootNode>
          <destPaths>
            <PdtColumnDest>
              <path>//*[local-name() = 'family']/text()</path>
            </PdtColumnDest>
          </destPaths>
        </PdtColumn>
        <PdtColumn>
          <name>CURVE_DATE</name>
          <len>0</len>
          <isRequired>true</isRequired>
          <isRelativeToRootNode>true</isRelativeToRootNode>
          <destPaths>
            <PdtColumnDest>
              <path>//*[local-name() = 'date']/text()</path>
            </PdtColumnDest>
          </destPaths>
        </PdtColumn>
        <PdtColumn>
          <name>CURVE_YIELD</name>
          <len>0</len>
          <isRequired>true</isRequired>
          <isRelativeToRootNode>true</isRelativeToRootNode>
          <destPaths>
            <PdtColumnDest>
              <path>//*[local-name() = 'yield']/text()</path>
            </PdtColumnDest>
          </destPaths>
        </PdtColumn>
        <PdtColumn>
          <name>CURVE_ISBOND</name>
          <len>0</len>
          <isRequired>true</isRequired>
          <isRelativeToRootNode>true</isRelativeToRootNode>
          <destPaths>
            <PdtColumnDest>
              <path>//*[local-name() = 'isBond']/text()</path>
            </PdtColumnDest>
          </destPaths>
        </PdtColumn>
      </columns>
    </PdtTransformation>
    <PdtTransformation>
      <name>Benchmark</name>
      <type>Csv2Xml</type>
      <label>Benchmark</label>
      <category>Instruments</category>
      <templateFile>Import_Benchmark.xml</templateFile>
      <repeatingRootPath>//*[local-name() = 'standardComponents']</repeatingRootPath>
      <repeatingChildrenPath>//*[local-name() = 'instrumentStdComponent']</repeatingChildrenPath>
      <csvSrcSeparator>0</csvSrcSeparator>
      <csvDestSeparator>59</csvDestSeparator>
      <columns>
        <PdtColumn>
          <name>Reference</name>
          <len>0</len>
          <isRequired>true</isRequired>
          <isRelativeToRootNode>false</isRelativeToRootNode>
          <destPaths>
            <PdtColumnDest>
              <path>//*[local-name() = 'identifier']/*[local-name() = 'reference'][@*[local-name() = 'name'] = 'Sophisref']/text()</path>
            </PdtColumnDest>
          </destPaths>
        </PdtColumn>
        <PdtColumn>
          <name>Name</name>
          <len>0</len>
          <isRequired>true</isRequired>
          <isRelativeToRootNode>false</isRelativeToRootNode>
          <destPaths>
            <PdtColumnDest>
              <path>//*[local-name() = 'name']/text()</path>
            </PdtColumnDest>
          </destPaths>
        </PdtColumn>
        <PdtColumn>
          <name>Currency</name>
          <len>0</len>
          <isRequired>true</isRequired>
          <isRelativeToRootNode>false</isRelativeToRootNode>
          <destPaths>
            <PdtColumnDest>
              <path>//*[local-name() = 'currency']/text()</path>
            </PdtColumnDest>
          </destPaths>
        </PdtColumn>
        <PdtColumn>
          <name>Market</name>
          <len>0</len>
          <isRequired>true</isRequired>
          <isRelativeToRootNode>false</isRelativeToRootNode>
          <destPaths>
            <PdtColumnDest>
              <path>//*[local-name() = 'market']/*[local-name() = 'sophis']/text()</path>
            </PdtColumnDest>
          </destPaths>
        </PdtColumn>
        <PdtColumn>
          <name>Definition_type</name>
          <len>0</len>
          <isRequired>true</isRequired>
          <isRelativeToRootNode>false</isRelativeToRootNode>
          <destPaths>
            <PdtColumnDest>
              <path>//*[local-name() = 'definitionType']/text()</path>
            </PdtColumnDest>
          </destPaths>
        </PdtColumn>
        <PdtColumn>
          <name>Is_drifted</name>
          <len>0</len>
          <isRequired>true</isRequired>
          <isRelativeToRootNode>false</isRelativeToRootNode>
          <destPaths>
            <PdtColumnDest>
              <path>//*[local-name() = 'drifted']/text()</path>
            </PdtColumnDest>
          </destPaths>
        </PdtColumn>
        <PdtColumn>
          <name>Pricing</name>
          <len>0</len>
          <isRequired>true</isRequired>
          <isRelativeToRootNode>false</isRelativeToRootNode>
          <destPaths>
            <PdtColumnDest>
              <path>//*[local-name() = 'pricingMethod']/text()</path>
            </PdtColumnDest>
          </destPaths>
        </PdtColumn>
        <PdtColumn>
          <name>Hedge_ratio</name>
          <len>0</len>
          <isRequired>true</isRequired>
          <isRelativeToRootNode>false</isRelativeToRootNode>
          <destPaths>
            <PdtColumnDest>
              <path>//*[local-name() = 'hedgeRatio']/text()</path>
            </PdtColumnDest>
          </destPaths>
        </PdtColumn>
        <PdtColumn>
          <name>Record_date</name>
          <len>0</len>
          <isRequired>true</isRequired>
          <isRelativeToRootNode>false</isRelativeToRootNode>
          <destPaths>
            <PdtColumnDest>
              <path>//*[local-name() = 'recordDate']/text()</path>
            </PdtColumnDest>
          </destPaths>
        </PdtColumn>
        <PdtColumn>
          <name>Return_computation</name>
          <len>0</len>
          <isRequired>true</isRequired>
          <isRelativeToRootNode>false</isRelativeToRootNode>
          <destPaths>
            <PdtColumnDest>
              <path>//*[local-name() = 'standardComposition']/*[local-name() = 'useComponentsReturn']/text()</path>
            </PdtColumnDest>
          </destPaths>
        </PdtColumn>
        <PdtColumn>
          <name>Cash_computation</name>
          <len>0</len>
          <isRequired>true</isRequired>
          <isRelativeToRootNode>false</isRelativeToRootNode>
          <destPaths>
            <PdtColumnDest>
              <path>//*[local-name() = 'standardComposition']/*[local-name() = 'includeCashSinceRecordStart']/text()</path>
            </PdtColumnDest>
          </destPaths>
        </PdtColumn>
        <PdtColumn>
          <name>Resize</name>
          <len>0</len>
          <isRequired>true</isRequired>
          <isRelativeToRootNode>false</isRelativeToRootNode>
          <destPaths>
            <PdtColumnDest>
              <path>//*[local-name() = 'standardComposition']/*[local-name() = 'resize']/text()</path>
            </PdtColumnDest>
          </destPaths>
        </PdtColumn>
        <PdtColumn>
          <name>Resize_to</name>
          <len>0</len>
          <isRequired>true</isRequired>
          <isRelativeToRootNode>false</isRelativeToRootNode>
          <destPaths>
            <PdtColumnDest>
              <path>//*[local-name() = 'standardComposition']/*[local-name() = 'resizingType']/text()</path>
            </PdtColumnDest>
          </destPaths>
        </PdtColumn>
        <PdtColumn>
          <name>Instrument</name>
          <len>0</len>
          <isRequired>true</isRequired>
          <isRelativeToRootNode>true</isRelativeToRootNode>
          <destPaths>
            <PdtColumnDest>
              <path>//*[local-name() = 'instrumentStdComponent']/*[local-name() = 'instrument']/*[local-name() = 'sophis']/text()</path>
            </PdtColumnDest>
          </destPaths>
        </PdtColumn>
        <PdtColumn>
          <name>Weight</name>
          <len>0</len>
          <isRequired>true</isRequired>
          <isRelativeToRootNode>true</isRelativeToRootNode>
          <destPaths>
            <PdtColumnDest>
              <path>//*[local-name() = 'instrumentStdComponent']/*[local-name() = 'weight']/text()</path>
            </PdtColumnDest>
          </destPaths>
        </PdtColumn>
      </columns>
    </PdtTransformation>
    <PdtTransformation>
      <name>BBH_Fee</name>
      <type>Csv2Xml</type>
      <label>Infomediary Fee</label>
      <category>Medio</category>
      <templateFile>BBH_Fee.xml</templateFile>
      <repeatingRootPath>//*[local-name() = 'import']</repeatingRootPath>
      <repeatingChildrenPath>//*[local-name() = 'trade']</repeatingChildrenPath>
      <csvSrcSeparator>44</csvSrcSeparator>
      <csvDestSeparator>0</csvDestSeparator>
      <processingCondition>"$EventType" == "FE" &amp;&amp; (lineVal.Split('$CsvSrcSep')[3] == "GSILGB2X" || (lineVal.Split('$CsvSrcSep')[3] == "JPMSGB2L" &amp;&amp; "$OnBoarded" != ""))</processingCondition>
      <variables>
        <PdtVariable>
          <name>EventType</name>
          <expressionBefore>lineVal.Split(',')[0] == "Clearing Broker Fees" ? "FE" : lineVal.Split(',')[0] == "Initial Margin" ? "IM" : lineVal.Split(',')[0] == "Monthly Interest" ? "MI" : lineVal.Split(',')[0] == "Clearer Margin Calls" ? "MC" : ""</expressionBefore>
        </PdtVariable>
        <PdtVariable>
          <name>OnBoarded</name>
          <expressionBefore>lineVal.Split('$CsvSrcSep')[6]</expressionBefore>
          <Lookup>
            <Table>MEDIO_BBH_FUNDFILTER</Table>
            <ColumnIndex>0</ColumnIndex>
          </Lookup>
        </PdtVariable>
      </variables>
      <columns>
        <PdtColumn>
          <name>Event Type</name>
          <len>0</len>
          <isRequired>true</isRequired>
          <isRelativeToRootNode>true</isRelativeToRootNode>
          <destPaths>
            <PdtColumnDest>
              <path>//*[local-name() = 'businessEvent']</path>
              <expression>"$EventType" == "FE" ? "Clearing Broker Fees" : "$EventType" == "IM" ? "Initial Margin" : "$EventType" == "MI" ? "Clearing Broker Interests" : "Clearer Margin Call"</expression>
            </PdtColumnDest>
          </destPaths>
        </PdtColumn>
        <PdtColumn>
          <name>Sender Reference</name>
          <len>0</len>
          <isRequired>true</isRequired>
          <isRelativeToRootNode>true</isRelativeToRootNode>
          <destPaths>
            <PdtColumnDest>
              <path>//*[local-name() = 'tradeId'][contains(@*[local-name() = 'tradeIdScheme'], 'tradeId/externalReference')]</path>
            </PdtColumnDest>
          </destPaths>
        </PdtColumn>
        <PdtColumn>
          <name>Clearer Reference</name>
          <len>0</len>
          <isRequired>true</isRequired>
          <isRelativeToRootNode>true</isRelativeToRootNode>
        </PdtColumn>
        <PdtColumn>
          <name>Clearing Broker BIC</name>
          <len>0</len>
          <isRequired>true</isRequired>
          <isRelativeToRootNode>true</isRelativeToRootNode>
        </PdtColumn>
        <PdtColumn>
          <name>Executing Broker</name>
          <len>0</len>
          <isRequired>true</isRequired>
          <isRelativeToRootNode>true</isRelativeToRootNode>
          <destPaths>
            <PdtColumnDest>
              <path>
//*[local-name() = 'counterparty']//*[local-name() = 'partyId'][contains(@*[local-name() = 'partyIdScheme'], 'id')] |
//*[local-name() = 'sellerPartyReference']//*[local-name() = 'partyId'][contains(@*[local-name() = 'partyIdScheme'], 'id')]</path>
              <Lookup>
                <Expression>"SELECT IDENT FROM TIERS WHERE NAME = '" + colVal + "'"</Expression>
                <Table>SQL</Table>
              </Lookup>
            </PdtColumnDest>
          </destPaths>
        </PdtColumn>
        <PdtColumn>
          <name>Account</name>
          <len>0</len>
          <isRequired>true</isRequired>
          <isRelativeToRootNode>true</isRelativeToRootNode>
          <destPaths>
            <PdtColumnDest>
              <path>
//*[local-name() = 'portfolioName'][contains(@*[local-name() = 'portfolioNameScheme'], 'portfolioName/id')] |
//*[local-name() = 'externalReference']/*[local-name() = 'name' and text() = 'RootPortfolio']/../*[local-name() = 'value']</path>
              <Lookup>
                <Expression>@"
SELECT R.VALUE FROM BO_TREASURY_EXT_REF R
    JOIN BO_TREASURY_EXT_REF_DEF D ON D.REF_ID = R.REF_ID AND D.REF_NAME = 'RootPortfolio'
WHERE ACC_ID IN (SELECT ACC_ID FROM BO_TREASURY_EXT_REF WHERE VALUE = '" + colVal + "')"</Expression>
                <Table>SQL</Table>
              </Lookup>
            </PdtColumnDest>
            <PdtColumnDest>
              <path>
//*[local-name() = 'partyTradeIdentifier']//*[local-name() = 'partyId'][contains(@*[local-name() = 'partyIdScheme'], 'id')] |
//*[local-name() = 'extendedPartyTradeInformation']//*[local-name() = 'partyId'][contains(@*[local-name() = 'partyIdScheme'], 'id')] |
//*[local-name() = 'buyerPartyReference']//*[local-name() = 'partyId'][contains(@*[local-name() = 'partyIdScheme'], 'id')] |
//*[local-name() = 'entityPartyReference']//*[local-name() = 'partyId'][contains(@*[local-name() = 'partyIdScheme'], 'id')] |
//*[local-name() = 'entity']//*[local-name() = 'partyId'][contains(@*[local-name() = 'partyIdScheme'], 'id')]</path>
              <Lookup>
                <Expression>@"
SELECT A.ENTITY
FROM BO_TREASURY_ACCOUNT A
    JOIN BO_TREASURY_EXT_REF R ON R.ACC_ID = A.ID
    JOIN BO_TREASURY_EXT_REF_DEF D ON D.REF_ID = R.REF_ID AND D.REF_NAME = 'CBAccountID'
WHERE R.VALUE = '" + colVal + "'"</Expression>
                <Table>SQL</Table>
              </Lookup>
            </PdtColumnDest>
            <PdtColumnDest>
              <path>//*[local-name() = 'accountId']</path>
              <Lookup>
                <Expression>@"
SELECT A.ID
FROM BO_TREASURY_ACCOUNT A
    JOIN BO_TREASURY_EXT_REF R ON R.ACC_ID = A.ID
    JOIN BO_TREASURY_EXT_REF_DEF D ON D.REF_ID = R.REF_ID AND D.REF_NAME = 'CBAccountID'
WHERE R.VALUE = '" + colVal + "'"</Expression>
                <Table>SQL</Table>
              </Lookup>
            </PdtColumnDest>
            <PdtColumnDest>
              <path>//*[local-name() = 'depositary']//*[local-name() = 'partyId'][contains(@*[local-name() = 'partyIdScheme'], 'id')]</path>
              <Lookup>
                <Expression>@"
SELECT T.IDENT
FROM BO_TREASURY_ACCOUNT A
    JOIN BO_TREASURY_EXT_REF R ON R.ACC_ID = A.ID
    JOIN BO_TREASURY_EXT_REF_DEF D ON D.REF_ID = R.REF_ID AND D.REF_NAME = 'CBAccountID'
    JOIN BO_TREASURY_ACCOUNT CUS ON CUS.ACCOUNT_AT_CUSTODIAN = CASE WHEN (A.ACCOUNT_AT_CUSTODIAN LIKE 'DB%' OR A.ACCOUNT_AT_CUSTODIAN LIKE 'LU%') THEN SUBSTR(A.ACCOUNT_AT_CUSTODIAN, 0, 14) ELSE SUBSTR(A.ACCOUNT_AT_CUSTODIAN, 0, 4) END
    JOIN TIERS T ON T.REFERENCE = CUS.CUSTODIAN
WHERE R.VALUE = '" + colVal + "'"</Expression>
                <Table>SQL</Table>
              </Lookup>
            </PdtColumnDest>
          </destPaths>
        </PdtColumn>
        <PdtColumn>
          <name>CommonId</name>
          <len>0</len>
          <isRequired>true</isRequired>
          <isRelativeToRootNode>true</isRelativeToRootNode>
        </PdtColumn>
        <PdtColumn>
          <name>Currency</name>
          <len>0</len>
          <isRequired>true</isRequired>
          <isRelativeToRootNode>true</isRelativeToRootNode>
          <destPaths>
            <PdtColumnDest>
              <path>//*[local-name() = 'currency']</path>
            </PdtColumnDest>
          </destPaths>
        </PdtColumn>
        <PdtColumn>
          <name>Trade Date</name>
          <len>0</len>
          <isRequired>true</isRequired>
          <isRelativeToRootNode>true</isRelativeToRootNode>
          <destPaths>
            <PdtColumnDest>
              <path>//*[local-name() = 'tradeDate']</path>
              <expression>"$EventType" == "FE" || "$EventType" == "IM" ? (colVal.Trim() == "" ? "" : System.DateTime.ParseExact(colVal, "yyyyMMdd", System.Globalization.CultureInfo.InvariantCulture).ToString("yyyy-MM-dd")) : (lineVal.Split(',')[9].Trim() == "" ? "" : System.DateTime.ParseExact(lineVal.Split(',')[9], "yyyyMMdd", System.Globalization.CultureInfo.InvariantCulture).ToString("yyyy-MM-dd"))</expression>
            </PdtColumnDest>
          </destPaths>
        </PdtColumn>
        <PdtColumn>
          <name>Value Date</name>
          <len>0</len>
          <isRequired>true</isRequired>
          <isRelativeToRootNode>true</isRelativeToRootNode>
          <destPaths>
            <PdtColumnDest>
              <path>//*[local-name() = 'unadjustedDate'] | //*[local-name() = 'adjustedPaymentDate'] | //*[local-name() = 'tradeHeader']/*[local-name() = 'paymentDate']</path>
              <expression>colVal.Trim() == "" ? System.DateTime.ParseExact(lineVal.Split(',')[8], "yyyyMMdd", System.Globalization.CultureInfo.InvariantCulture).ToString("yyyy-MM-dd") : System.DateTime.ParseExact(colVal, "yyyyMMdd", System.Globalization.CultureInfo.InvariantCulture).ToString("yyyy-MM-dd")</expression>
            </PdtColumnDest>
          </destPaths>
        </PdtColumn>
        <PdtColumn>
          <name>Quantity</name>
          <len>0</len>
          <isRequired>true</isRequired>
          <isRelativeToRootNode>true</isRelativeToRootNode>
          <destPaths>
            <PdtColumnDest>
              <path>//*[local-name() = 'numberOfSecurities']</path>
              <expression>"$EventType" == "FE" ? double.Parse(colVal) : 1</expression>
            </PdtColumnDest>
          </destPaths>
        </PdtColumn>
        <PdtColumn>
          <name>Net Amount</name>
          <len>0</len>
          <isRequired>true</isRequired>
          <isRelativeToRootNode>true</isRelativeToRootNode>
          <destPaths>
            <PdtColumnDest>
              <path>//*[local-name() = 'principalSettlement']/*[local-name() = 'amount']/*[local-name() = 'amount']</path>
              <expression>"$EventType" == "FE" ? (double.Parse(lineVal.Split(',')[13]) + double.Parse(lineVal.Split(',')[14]) + double.Parse(lineVal.Split(',')[15])) : double.Parse(colVal)</expression>
            </PdtColumnDest>
          </destPaths>
        </PdtColumn>
        <PdtColumn>
          <name>Bloomberg Ticker</name>
          <len>0</len>
          <isRequired>true</isRequired>
          <isRelativeToRootNode>true</isRelativeToRootNode>
          <destPaths>
            <PdtColumnDest>
              <path>//*[local-name() = 'reference']</path>
              <expression>"$EventType" == "FE" ? colVal : ("$EventType" == "IM" ? "INITIAL MARGIN " : "$EventType" == "MC" ? "MARGIN CALL " : "MONTHLY INTEREST ") + lineVal.Split(',')[7]</expression>
            </PdtColumnDest>
          </destPaths>
        </PdtColumn>
        <PdtColumn>
          <name>Broker fees</name>
          <len>0</len>
          <isRequired>true</isRequired>
          <isRelativeToRootNode>true</isRelativeToRootNode>
          <destPaths>
            <PdtColumnDest>
              <path>//*[local-name() = 'otherPartyPayment'][contains(@*[local-name() = 'paymentTypeScheme'], 'brokerFees')]//*[local-name() = 'amount']</path>
            </PdtColumnDest>
          </destPaths>
        </PdtColumn>
        <PdtColumn>
          <name>Counterparty fees</name>
          <len>0</len>
          <isRequired>true</isRequired>
          <isRelativeToRootNode>true</isRelativeToRootNode>
          <destPaths>
            <PdtColumnDest>
              <path>//*[local-name() = 'otherPartyPayment'][contains(@*[local-name() = 'paymentTypeScheme'], 'couterpartyFees')]//*[local-name() = 'amount']</path>
            </PdtColumnDest>
          </destPaths>
        </PdtColumn>
        <PdtColumn>
          <name>Market fees</name>
          <len>0</len>
          <isRequired>true</isRequired>
          <isRelativeToRootNode>true</isRelativeToRootNode>
          <destPaths>
            <PdtColumnDest>
              <path>//*[local-name() = 'otherPartyPayment'][contains(@*[local-name() = 'paymentTypeScheme'], 'marketFees')]//*[local-name() = 'amount']</path>
            </PdtColumnDest>
          </destPaths>
        </PdtColumn>
      </columns>
    </PdtTransformation>
    <PdtTransformation>
      <name>BBH_IM_Orig</name>
      <type>Csv2Xml</type>
      <label>Infomediary Initial Margin Original</label>
      <category>Medio</category>
      <templateFile>BBH_IM.xml</templateFile>
      <repeatingRootPath>//*[local-name() = 'import']</repeatingRootPath>
      <repeatingChildrenPath>//*[local-name() = 'trade']</repeatingChildrenPath>
      <csvSrcSeparator>44</csvSrcSeparator>
      <csvDestSeparator>0</csvDestSeparator>
      <processingCondition>"$EventType" == "IM" &amp;&amp; (lineVal.Split('$CsvSrcSep')[3] == "GSILGB2X" || (lineVal.Split('$CsvSrcSep')[3] == "JPMSGB2L" &amp;&amp; "$OnBoarded" != ""))</processingCondition>
      <variables>
        <PdtVariable>
          <name>EventType</name>
          <expressionBefore>lineVal.Split(',')[0] == "Clearing Broker Fees" ? "FE" : lineVal.Split(',')[0] == "Initial Margin" ? "IM" : lineVal.Split(',')[0] == "Monthly Interest" ? "MI" : lineVal.Split(',')[0] == "Clearer Margin Calls" ? "MC" : ""</expressionBefore>
        </PdtVariable>
        <PdtVariable>
          <name>OnBoarded</name>
          <expressionBefore>lineVal.Split('$CsvSrcSep')[6]</expressionBefore>
          <Lookup>
            <Table>MEDIO_BBH_FUNDFILTER</Table>
            <ColumnIndex>0</ColumnIndex>
          </Lookup>
        </PdtVariable>
      </variables>
      <columns>
        <PdtColumn>
          <name>Event Type</name>
          <len>0</len>
          <isRequired>true</isRequired>
          <isRelativeToRootNode>true</isRelativeToRootNode>
          <destPaths>
            <PdtColumnDest>
              <path>//*[local-name() = 'businessEvent']</path>
              <expression>"$EventType" == "FE" ? "Clearing Broker Fees" : "$EventType" == "IM" ? "Initial Margin" : "$EventType" == "MI" ? "Clearing Broker Interests" : "Clearer Margin Call"</expression>
            </PdtColumnDest>
          </destPaths>
        </PdtColumn>
        <PdtColumn>
          <name>Sender Reference</name>
          <len>0</len>
          <isRequired>true</isRequired>
          <isRelativeToRootNode>true</isRelativeToRootNode>
          <destPaths>
            <PdtColumnDest>
              <path>//*[local-name() = 'tradeId'][contains(@*[local-name() = 'tradeIdScheme'], 'tradeId/externalReference')]</path>
            </PdtColumnDest>
          </destPaths>
        </PdtColumn>
        <PdtColumn>
          <name>Clearer Reference</name>
          <len>0</len>
          <isRequired>true</isRequired>
          <isRelativeToRootNode>true</isRelativeToRootNode>
        </PdtColumn>
        <PdtColumn>
          <name>Clearing Broker BIC</name>
          <len>0</len>
          <isRequired>true</isRequired>
          <isRelativeToRootNode>true</isRelativeToRootNode>
        </PdtColumn>
        <PdtColumn>
          <name>Executing Broker</name>
          <len>0</len>
          <isRequired>true</isRequired>
          <isRelativeToRootNode>true</isRelativeToRootNode>
        </PdtColumn>
        <PdtColumn>
          <name>Account</name>
          <len>0</len>
          <isRequired>true</isRequired>
          <isRelativeToRootNode>true</isRelativeToRootNode>
          <destPaths>
            <PdtColumnDest>
              <path>
//*[local-name() = 'portfolioName'][contains(@*[local-name() = 'portfolioNameScheme'], 'portfolioName/id')] |
//*[local-name() = 'externalReference']/*[local-name() = 'name' and text() = 'RootPortfolio']/../*[local-name() = 'value']</path>
              <Lookup>
                <Expression>@"
SELECT F_ORI.IDENT
FROM BO_TREASURY_ACCOUNT A
    JOIN BO_TREASURY_EXT_REF R ON R.ACC_ID = A.ID
    JOIN BO_TREASURY_EXT_REF_DEF D ON D.REF_ID = R.REF_ID AND D.REF_NAME = 'CBAccountID'
    JOIN FOLIO F_MIR ON F_MIR.IDENT = A.ACCOUNT_ADJUSTMENT_FOLIO
    JOIN FOLIO F_ORI ON F_ORI.MGR = F_MIR.MGR AND F_ORI.NAME LIKE '% Cash'
WHERE R.VALUE = '" + colVal + "'"</Expression>
                <Table>SQL</Table>
              </Lookup>
            </PdtColumnDest>
            <PdtColumnDest>
              <path>
//*[local-name() = 'partyTradeIdentifier']//*[local-name() = 'partyId'][contains(@*[local-name() = 'partyIdScheme'], 'id')] |
//*[local-name() = 'extendedPartyTradeInformation']//*[local-name() = 'partyId'][contains(@*[local-name() = 'partyIdScheme'], 'id')] |
//*[local-name() = 'buyerPartyReference']//*[local-name() = 'partyId'][contains(@*[local-name() = 'partyIdScheme'], 'id')] |
//*[local-name() = 'entityPartyReference']//*[local-name() = 'partyId'][contains(@*[local-name() = 'partyIdScheme'], 'id')] |
//*[local-name() = 'entity']//*[local-name() = 'partyId'][contains(@*[local-name() = 'partyIdScheme'], 'id')]</path>
              <Lookup>
                <Expression>@"
SELECT A.ENTITY
FROM BO_TREASURY_ACCOUNT A
    JOIN BO_TREASURY_EXT_REF R ON R.ACC_ID = A.ID
    JOIN BO_TREASURY_EXT_REF_DEF D ON D.REF_ID = R.REF_ID AND D.REF_NAME = 'CBAccountID'
WHERE R.VALUE = '" + colVal + "'"</Expression>
                <Table>SQL</Table>
              </Lookup>
            </PdtColumnDest>
            <PdtColumnDest>
              <path>
//*[local-name() = 'counterparty']//*[local-name() = 'partyId'][contains(@*[local-name() = 'partyIdScheme'], 'id')] |
//*[local-name() = 'sellerPartyReference']//*[local-name() = 'partyId'][contains(@*[local-name() = 'partyIdScheme'], 'id')]</path>
              <Lookup>
                <Expression>@"
SELECT T.IDENT
FROM BO_TREASURY_ACCOUNT A
    JOIN BO_TREASURY_EXT_REF R ON R.ACC_ID = A.ID
    JOIN BO_TREASURY_EXT_REF_DEF D ON D.REF_ID = R.REF_ID AND D.REF_NAME = 'CBAccountID'
    JOIN TIERS T ON T.REFERENCE = A.CUSTODIAN
WHERE R.VALUE = '" + colVal + "'"</Expression>
                <Table>SQL</Table>
              </Lookup>
            </PdtColumnDest>
            <PdtColumnDest>
              <path>//*[local-name() = 'accountId']</path>
              <Lookup>
                <Expression>@"
SELECT A.ID
FROM BO_TREASURY_ACCOUNT A
    JOIN BO_TREASURY_EXT_REF R ON R.ACC_ID = A.ID
    JOIN BO_TREASURY_EXT_REF_DEF D ON D.REF_ID = R.REF_ID AND D.REF_NAME = 'CBAccountID'
WHERE R.VALUE = '" + colVal + "'"</Expression>
                <Table>SQL</Table>
              </Lookup>
            </PdtColumnDest>
            <PdtColumnDest>
              <path>//*[local-name() = 'depositary']//*[local-name() = 'partyId'][contains(@*[local-name() = 'partyIdScheme'], 'id')]</path>
              <Lookup>
                <Expression>@"
SELECT T.IDENT
FROM BO_TREASURY_ACCOUNT A
    JOIN BO_TREASURY_EXT_REF R ON R.ACC_ID = A.ID
    JOIN BO_TREASURY_EXT_REF_DEF D ON D.REF_ID = R.REF_ID AND D.REF_NAME = 'CBAccountID'
    JOIN BO_TREASURY_ACCOUNT CUS ON CUS.ACCOUNT_AT_CUSTODIAN = CASE WHEN (A.ACCOUNT_AT_CUSTODIAN LIKE 'DB%' OR A.ACCOUNT_AT_CUSTODIAN LIKE 'LU%') THEN SUBSTR(A.ACCOUNT_AT_CUSTODIAN, 0, 14) ELSE SUBSTR(A.ACCOUNT_AT_CUSTODIAN, 0, 4) END
    JOIN TIERS T ON T.REFERENCE = CUS.CUSTODIAN
WHERE R.VALUE = '" + colVal + "'"</Expression>
                <Table>SQL</Table>
              </Lookup>
            </PdtColumnDest>
          </destPaths>
        </PdtColumn>
        <PdtColumn>
          <name>CommonId</name>
          <len>0</len>
          <isRequired>true</isRequired>
          <isRelativeToRootNode>true</isRelativeToRootNode>
        </PdtColumn>
        <PdtColumn>
          <name>Currency</name>
          <len>0</len>
          <isRequired>true</isRequired>
          <isRelativeToRootNode>true</isRelativeToRootNode>
          <destPaths>
            <PdtColumnDest>
              <path>//*[local-name() = 'currency']</path>
            </PdtColumnDest>
          </destPaths>
        </PdtColumn>
        <PdtColumn>
          <name>Trade Date</name>
          <len>0</len>
          <isRequired>true</isRequired>
          <isRelativeToRootNode>true</isRelativeToRootNode>
          <destPaths>
            <PdtColumnDest>
              <path>//*[local-name() = 'tradeDate']</path>
              <expression>"$EventType" == "FE" || "$EventType" == "IM" ? (colVal.Trim() == "" ? "" : System.DateTime.ParseExact(colVal, "yyyyMMdd", System.Globalization.CultureInfo.InvariantCulture).ToString("yyyy-MM-dd")) : (lineVal.Split(',')[9].Trim() == "" ? "" : System.DateTime.ParseExact(lineVal.Split(',')[9], "yyyyMMdd", System.Globalization.CultureInfo.InvariantCulture).ToString("yyyy-MM-dd"))</expression>
            </PdtColumnDest>
          </destPaths>
        </PdtColumn>
        <PdtColumn>
          <name>Value Date</name>
          <len>0</len>
          <isRequired>true</isRequired>
          <isRelativeToRootNode>true</isRelativeToRootNode>
          <destPaths>
            <PdtColumnDest>
              <path>//*[local-name() = 'unadjustedDate'] | //*[local-name() = 'adjustedPaymentDate'] | //*[local-name() = 'tradeHeader']/*[local-name() = 'paymentDate']</path>
              <expression>colVal.Trim() == "" ? System.DateTime.ParseExact(lineVal.Split(',')[8], "yyyyMMdd", System.Globalization.CultureInfo.InvariantCulture).ToString("yyyy-MM-dd") : System.DateTime.ParseExact(colVal, "yyyyMMdd", System.Globalization.CultureInfo.InvariantCulture).ToString("yyyy-MM-dd")</expression>
            </PdtColumnDest>
          </destPaths>
        </PdtColumn>
        <PdtColumn>
          <name>Quantity</name>
          <len>0</len>
          <isRequired>true</isRequired>
          <isRelativeToRootNode>true</isRelativeToRootNode>
          <destPaths>
            <PdtColumnDest>
              <path>//*[local-name() = 'numberOfSecurities']</path>
              <expression>"$EventType" == "FE" ? double.Parse(colVal) : 1</expression>
            </PdtColumnDest>
          </destPaths>
        </PdtColumn>
        <PdtColumn>
          <name>Net Amount</name>
          <len>0</len>
          <isRequired>true</isRequired>
          <isRelativeToRootNode>true</isRelativeToRootNode>
          <destPaths>
            <PdtColumnDest>
              <path>//*[local-name() = 'principalSettlement']/*[local-name() = 'amount']/*[local-name() = 'amount']</path>
              <expression>"$EventType" == "FE" ? (double.Parse(lineVal.Split(',')[13]) + double.Parse(lineVal.Split(',')[14]) + double.Parse(lineVal.Split(',')[15])) : double.Parse(colVal)</expression>
            </PdtColumnDest>
          </destPaths>
        </PdtColumn>
        <PdtColumn>
          <name>Bloomberg Ticker</name>
          <len>0</len>
          <isRequired>true</isRequired>
          <isRelativeToRootNode>true</isRelativeToRootNode>
          <destPaths>
            <PdtColumnDest>
              <path>//*[local-name() = 'reference']</path>
              <expression>"$EventType" == "FE" ? colVal : ("$EventType" == "IM" ? "INITIAL MARGIN " : "$EventType" == "MC" ? "MARGIN CALL " : "MONTHLY INTEREST ") + lineVal.Split(',')[7]</expression>
            </PdtColumnDest>
          </destPaths>
        </PdtColumn>
        <PdtColumn>
          <name>Broker fees</name>
          <len>0</len>
          <isRequired>true</isRequired>
          <isRelativeToRootNode>true</isRelativeToRootNode>
          <destPaths>
            <PdtColumnDest>
              <path>//*[local-name() = 'otherPartyPayment'][contains(@*[local-name() = 'paymentTypeScheme'], 'brokerFees')]//*[local-name() = 'amount']</path>
            </PdtColumnDest>
          </destPaths>
        </PdtColumn>
        <PdtColumn>
          <name>Counterparty fees</name>
          <len>0</len>
          <isRequired>true</isRequired>
          <isRelativeToRootNode>true</isRelativeToRootNode>
          <destPaths>
            <PdtColumnDest>
              <path>//*[local-name() = 'otherPartyPayment'][contains(@*[local-name() = 'paymentTypeScheme'], 'couterpartyFees')]//*[local-name() = 'amount']</path>
            </PdtColumnDest>
          </destPaths>
        </PdtColumn>
        <PdtColumn>
          <name>Market fees</name>
          <len>0</len>
          <isRequired>true</isRequired>
          <isRelativeToRootNode>true</isRelativeToRootNode>
          <destPaths>
            <PdtColumnDest>
              <path>//*[local-name() = 'otherPartyPayment'][contains(@*[local-name() = 'paymentTypeScheme'], 'marketFees')]//*[local-name() = 'amount']</path>
            </PdtColumnDest>
          </destPaths>
        </PdtColumn>
      </columns>
    </PdtTransformation>
    <PdtTransformation>
      <name>BBH_IM_Mirr</name>
      <type>Csv2Xml</type>
      <label>Infomediary Initial Margin Mirroring</label>
      <category>Medio</category>
      <templateFile>BBH_IM.xml</templateFile>
      <repeatingRootPath>//*[local-name() = 'import']</repeatingRootPath>
      <repeatingChildrenPath>//*[local-name() = 'trade']</repeatingChildrenPath>
      <csvSrcSeparator>44</csvSrcSeparator>
      <csvDestSeparator>0</csvDestSeparator>
      <processingCondition>"$EventType" == "IM" &amp;&amp; (lineVal.Split('$CsvSrcSep')[3] == "GSILGB2X" || (lineVal.Split('$CsvSrcSep')[3] == "JPMSGB2L" &amp;&amp; "$OnBoarded" != ""))</processingCondition>
      <variables>
        <PdtVariable>
          <name>EventType</name>
          <expressionBefore>lineVal.Split(',')[0] == "Clearing Broker Fees" ? "FE" : lineVal.Split(',')[0] == "Initial Margin" ? "IM" : lineVal.Split(',')[0] == "Monthly Interest" ? "MI" : lineVal.Split(',')[0] == "Clearer Margin Calls" ? "MC" : ""</expressionBefore>
        </PdtVariable>
        <PdtVariable>
          <name>OnBoarded</name>
          <expressionBefore>lineVal.Split('$CsvSrcSep')[6]</expressionBefore>
          <Lookup>
            <Table>MEDIO_BBH_FUNDFILTER</Table>
            <ColumnIndex>0</ColumnIndex>
          </Lookup>
        </PdtVariable>
      </variables>
      <columns>
        <PdtColumn>
          <name>Event Type</name>
          <len>0</len>
          <isRequired>true</isRequired>
          <isRelativeToRootNode>true</isRelativeToRootNode>
          <destPaths>
            <PdtColumnDest>
              <path>//*[local-name() = 'businessEvent']</path>
              <expression>"$EventType" == "FE" ? "Clearing Broker Fees" : "$EventType" == "IM" ? "Initial Margin" : "$EventType" == "MI" ? "Clearing Broker Interests" : "Clearer Margin Call"</expression>
            </PdtColumnDest>
          </destPaths>
        </PdtColumn>
        <PdtColumn>
          <name>Sender Reference</name>
          <len>0</len>
          <isRequired>true</isRequired>
          <isRelativeToRootNode>true</isRelativeToRootNode>
          <destPaths>
            <PdtColumnDest>
              <path>//*[local-name() = 'tradeId'][contains(@*[local-name() = 'tradeIdScheme'], 'tradeId/externalReference')]</path>
              <expression>colVal + "_Mir"</expression>
            </PdtColumnDest>
          </destPaths>
        </PdtColumn>
        <PdtColumn>
          <name>Clearer Reference</name>
          <len>0</len>
          <isRequired>true</isRequired>
          <isRelativeToRootNode>true</isRelativeToRootNode>
        </PdtColumn>
        <PdtColumn>
          <name>Clearing Broker BIC</name>
          <len>0</len>
          <isRequired>true</isRequired>
          <isRelativeToRootNode>true</isRelativeToRootNode>
        </PdtColumn>
        <PdtColumn>
          <name>Executing Broker</name>
          <len>0</len>
          <isRequired>true</isRequired>
          <isRelativeToRootNode>true</isRelativeToRootNode>
        </PdtColumn>
        <PdtColumn>
          <name>Account</name>
          <len>0</len>
          <isRequired>true</isRequired>
          <isRelativeToRootNode>true</isRelativeToRootNode>
          <destPaths>
            <PdtColumnDest>
              <path>
//*[local-name() = 'portfolioName'][contains(@*[local-name() = 'portfolioNameScheme'], 'portfolioName/id')] |
//*[local-name() = 'externalReference']/*[local-name() = 'name' and text() = 'RootPortfolio']/../*[local-name() = 'value']</path>
              <Lookup>
                <Expression>@"
SELECT A_MIR.ACCOUNT_ADJUSTMENT_FOLIO
FROM BO_TREASURY_ACCOUNT A_ORI
    JOIN BO_TREASURY_EXT_REF R ON R.ACC_ID = A_ORI.ID
    JOIN BO_TREASURY_EXT_REF_DEF D ON D.REF_ID = R.REF_ID AND D.REF_NAME = 'CBAccountID'
    JOIN BO_TREASURY_ACCOUNT A_MIR ON A_MIR.ACCOUNT_AT_CUSTODIAN = 
        CASE WHEN (A_ORI.ACCOUNT_AT_CUSTODIAN LIKE 'DB%' OR A_ORI.ACCOUNT_AT_CUSTODIAN LIKE 'LU%')
            THEN SUBSTR(A_ORI.ACCOUNT_AT_CUSTODIAN, 0, 14) || 'IM' || SUBSTR(A_ORI.ACCOUNT_AT_CUSTODIAN, 15)
        ELSE SUBSTR(A_ORI.ACCOUNT_AT_CUSTODIAN, 0, 4) || 'IM' || SUBSTR(A_ORI.ACCOUNT_AT_CUSTODIAN, 5) END
WHERE R.VALUE = '" + colVal + "'"</Expression>
                <Table>SQL</Table>
              </Lookup>
            </PdtColumnDest>
            <PdtColumnDest>
              <path>
//*[local-name() = 'partyTradeIdentifier']//*[local-name() = 'partyId'][contains(@*[local-name() = 'partyIdScheme'], 'id')] |
//*[local-name() = 'extendedPartyTradeInformation']//*[local-name() = 'partyId'][contains(@*[local-name() = 'partyIdScheme'], 'id')] |
//*[local-name() = 'buyerPartyReference']//*[local-name() = 'partyId'][contains(@*[local-name() = 'partyIdScheme'], 'id')] |
//*[local-name() = 'entityPartyReference']//*[local-name() = 'partyId'][contains(@*[local-name() = 'partyIdScheme'], 'id')] |
//*[local-name() = 'entity']//*[local-name() = 'partyId'][contains(@*[local-name() = 'partyIdScheme'], 'id')]</path>
              <Lookup>
                <Expression>@"
SELECT A.ENTITY
FROM BO_TREASURY_ACCOUNT A
    JOIN BO_TREASURY_EXT_REF R ON R.ACC_ID = A.ID
    JOIN BO_TREASURY_EXT_REF_DEF D ON D.REF_ID = R.REF_ID AND D.REF_NAME = 'CBAccountID'
WHERE R.VALUE = '" + colVal + "'"</Expression>
                <Table>SQL</Table>
              </Lookup>
            </PdtColumnDest>
            <PdtColumnDest>
              <path>
//*[local-name() = 'counterparty']//*[local-name() = 'partyId'][contains(@*[local-name() = 'partyIdScheme'], 'id')] |
//*[local-name() = 'sellerPartyReference']//*[local-name() = 'partyId'][contains(@*[local-name() = 'partyIdScheme'], 'id')]</path>
              <Lookup>
                <Expression>@"
SELECT T.IDENT
FROM BO_TREASURY_ACCOUNT A
    JOIN BO_TREASURY_EXT_REF R ON R.ACC_ID = A.ID
    JOIN BO_TREASURY_EXT_REF_DEF D ON D.REF_ID = R.REF_ID AND D.REF_NAME = 'CBAccountID'
    JOIN TIERS T ON T.REFERENCE = A.CUSTODIAN
WHERE R.VALUE = '" + colVal + "'"</Expression>
                <Table>SQL</Table>
              </Lookup>
            </PdtColumnDest>
            <PdtColumnDest>
              <path>//*[local-name() = 'accountId']</path>
              <Lookup>
                <Expression>@"
SELECT A_MIR.ID
FROM BO_TREASURY_ACCOUNT A_ORI
    JOIN BO_TREASURY_EXT_REF R ON R.ACC_ID = A_ORI.ID
    JOIN BO_TREASURY_EXT_REF_DEF D ON D.REF_ID = R.REF_ID AND D.REF_NAME = 'CBAccountID'
    JOIN BO_TREASURY_ACCOUNT A_MIR ON A_MIR.ACCOUNT_AT_CUSTODIAN = 
        CASE WHEN (A_ORI.ACCOUNT_AT_CUSTODIAN LIKE 'DB%' OR A_ORI.ACCOUNT_AT_CUSTODIAN LIKE 'LU%')
            THEN SUBSTR(A_ORI.ACCOUNT_AT_CUSTODIAN, 0, 14) || 'IM' || SUBSTR(A_ORI.ACCOUNT_AT_CUSTODIAN, 15)
        ELSE SUBSTR(A_ORI.ACCOUNT_AT_CUSTODIAN, 0, 4) || 'IM' || SUBSTR(A_ORI.ACCOUNT_AT_CUSTODIAN, 5) END
WHERE R.VALUE = '" + colVal + "'"</Expression>
                <Table>SQL</Table>
              </Lookup>
            </PdtColumnDest>
            <PdtColumnDest>
              <path>//*[local-name() = 'depositary']//*[local-name() = 'partyId'][contains(@*[local-name() = 'partyIdScheme'], 'id')]</path>
              <expression>10009350</expression>
            </PdtColumnDest>
          </destPaths>
        </PdtColumn>
        <PdtColumn>
          <name>CommonId</name>
          <len>0</len>
          <isRequired>true</isRequired>
          <isRelativeToRootNode>true</isRelativeToRootNode>
        </PdtColumn>
        <PdtColumn>
          <name>Currency</name>
          <len>0</len>
          <isRequired>true</isRequired>
          <isRelativeToRootNode>true</isRelativeToRootNode>
          <destPaths>
            <PdtColumnDest>
              <path>//*[local-name() = 'currency']</path>
            </PdtColumnDest>
          </destPaths>
        </PdtColumn>
        <PdtColumn>
          <name>Trade Date</name>
          <len>0</len>
          <isRequired>true</isRequired>
          <isRelativeToRootNode>true</isRelativeToRootNode>
          <destPaths>
            <PdtColumnDest>
              <path>//*[local-name() = 'tradeDate']</path>
              <expression>"$EventType" == "FE" || "$EventType" == "IM" ? (colVal.Trim() == "" ? "" : System.DateTime.ParseExact(colVal, "yyyyMMdd", System.Globalization.CultureInfo.InvariantCulture).ToString("yyyy-MM-dd")) : (lineVal.Split(',')[9].Trim() == "" ? "" : System.DateTime.ParseExact(lineVal.Split(',')[9], "yyyyMMdd", System.Globalization.CultureInfo.InvariantCulture).ToString("yyyy-MM-dd"))</expression>
            </PdtColumnDest>
          </destPaths>
        </PdtColumn>
        <PdtColumn>
          <name>Value Date</name>
          <len>0</len>
          <isRequired>true</isRequired>
          <isRelativeToRootNode>true</isRelativeToRootNode>
          <destPaths>
            <PdtColumnDest>
              <path>//*[local-name() = 'unadjustedDate'] | //*[local-name() = 'adjustedPaymentDate'] | //*[local-name() = 'tradeHeader']/*[local-name() = 'paymentDate']</path>
              <expression>colVal.Trim() == "" ? System.DateTime.ParseExact(lineVal.Split(',')[8], "yyyyMMdd", System.Globalization.CultureInfo.InvariantCulture).ToString("yyyy-MM-dd") : System.DateTime.ParseExact(colVal, "yyyyMMdd", System.Globalization.CultureInfo.InvariantCulture).ToString("yyyy-MM-dd")</expression>
            </PdtColumnDest>
          </destPaths>
        </PdtColumn>
        <PdtColumn>
          <name>Quantity</name>
          <len>0</len>
          <isRequired>true</isRequired>
          <isRelativeToRootNode>true</isRelativeToRootNode>
          <destPaths>
            <PdtColumnDest>
              <path>//*[local-name() = 'numberOfSecurities']</path>
              <expression>"$EventType" == "FE" ? double.Parse(colVal) : 1</expression>
            </PdtColumnDest>
          </destPaths>
        </PdtColumn>
        <PdtColumn>
          <name>Net Amount</name>
          <len>0</len>
          <isRequired>true</isRequired>
          <isRelativeToRootNode>true</isRelativeToRootNode>
          <destPaths>
            <PdtColumnDest>
              <path>//*[local-name() = 'principalSettlement']/*[local-name() = 'amount']/*[local-name() = 'amount']</path>
              <expression>"$EventType" == "FE" ? (double.Parse(lineVal.Split(',')[13]) + double.Parse(lineVal.Split(',')[14]) + double.Parse(lineVal.Split(',')[15])) : -1 * double.Parse(colVal)</expression>
            </PdtColumnDest>
          </destPaths>
        </PdtColumn>
        <PdtColumn>
          <name>Bloomberg Ticker</name>
          <len>0</len>
          <isRequired>true</isRequired>
          <isRelativeToRootNode>true</isRelativeToRootNode>
          <destPaths>
            <PdtColumnDest>
              <path>//*[local-name() = 'reference']</path>
              <expression>"$EventType" == "FE" ? colVal : ("$EventType" == "IM" ? "INITIAL MARGIN " : "$EventType" == "MC" ? "MARGIN CALL " : "MONTHLY INTEREST ") + lineVal.Split(',')[7]</expression>
            </PdtColumnDest>
          </destPaths>
        </PdtColumn>
        <PdtColumn>
          <name>Broker fees</name>
          <len>0</len>
          <isRequired>true</isRequired>
          <isRelativeToRootNode>true</isRelativeToRootNode>
          <destPaths>
            <PdtColumnDest>
              <path>//*[local-name() = 'otherPartyPayment'][contains(@*[local-name() = 'paymentTypeScheme'], 'brokerFees')]//*[local-name() = 'amount']</path>
            </PdtColumnDest>
          </destPaths>
        </PdtColumn>
        <PdtColumn>
          <name>Counterparty fees</name>
          <len>0</len>
          <isRequired>true</isRequired>
          <isRelativeToRootNode>true</isRelativeToRootNode>
          <destPaths>
            <PdtColumnDest>
              <path>//*[local-name() = 'otherPartyPayment'][contains(@*[local-name() = 'paymentTypeScheme'], 'couterpartyFees')]//*[local-name() = 'amount']</path>
            </PdtColumnDest>
          </destPaths>
        </PdtColumn>
        <PdtColumn>
          <name>Market fees</name>
          <len>0</len>
          <isRequired>true</isRequired>
          <isRelativeToRootNode>true</isRelativeToRootNode>
          <destPaths>
            <PdtColumnDest>
              <path>//*[local-name() = 'otherPartyPayment'][contains(@*[local-name() = 'paymentTypeScheme'], 'marketFees')]//*[local-name() = 'amount']</path>
            </PdtColumnDest>
          </destPaths>
        </PdtColumn>
      </columns>
    </PdtTransformation>
    <PdtTransformation>
      <name>BBH_IM_Orig_Rev</name>
      <type>Csv2Xml</type>
      <label>Infomediary Initial Margin Original Reversal</label>
      <category>Medio</category>
      <templateFile>BBH_IM.xml</templateFile>
      <repeatingRootPath>//*[local-name() = 'import']</repeatingRootPath>
      <repeatingChildrenPath>//*[local-name() = 'trade']</repeatingChildrenPath>
      <csvSrcSeparator>44</csvSrcSeparator>
      <csvDestSeparator>0</csvDestSeparator>
      <processingCondition>"$EventType" == "IM" &amp;&amp; (lineVal.Split('$CsvSrcSep')[3] == "GSILGB2X" || (lineVal.Split('$CsvSrcSep')[3] == "JPMSGB2L" &amp;&amp; "$OnBoarded" != ""))</processingCondition>
      <variables>
        <PdtVariable>
          <name>EventType</name>
          <expressionBefore>lineVal.Split(',')[0] == "Clearing Broker Fees" ? "FE" : lineVal.Split(',')[0] == "Initial Margin" ? "IM" : lineVal.Split(',')[0] == "Monthly Interest" ? "MI" : lineVal.Split(',')[0] == "Clearer Margin Calls" ? "MC" : ""</expressionBefore>
        </PdtVariable>
        <PdtVariable>
          <name>OnBoarded</name>
          <expressionBefore>lineVal.Split('$CsvSrcSep')[6]</expressionBefore>
          <Lookup>
            <Table>MEDIO_BBH_FUNDFILTER</Table>
            <ColumnIndex>0</ColumnIndex>
          </Lookup>
        </PdtVariable>
      </variables>
      <columns>
        <PdtColumn>
          <name>Event Type</name>
          <len>0</len>
          <isRequired>true</isRequired>
          <isRelativeToRootNode>true</isRelativeToRootNode>
          <destPaths>
            <PdtColumnDest>
              <path>//*[local-name() = 'businessEvent']</path>
              <expression>"$EventType" == "FE" ? "Clearing Broker Fees" : "$EventType" == "IM" ? "Initial Margin" : "$EventType" == "MI" ? "Clearing Broker Interests" : "Clearer Margin Call"</expression>
            </PdtColumnDest>
          </destPaths>
        </PdtColumn>
        <PdtColumn>
          <name>Sender Reference</name>
          <len>0</len>
          <isRequired>true</isRequired>
          <isRelativeToRootNode>true</isRelativeToRootNode>
          <destPaths>
            <PdtColumnDest>
              <path>//*[local-name() = 'tradeId'][contains(@*[local-name() = 'tradeIdScheme'], 'tradeId/externalReference')]</path>
              <expression>colVal + "_Rev"</expression>
            </PdtColumnDest>
            <PdtColumnDest>
              <path>//*[local-name() = 'tradeDate']</path>
              <Lookup>
                <Expression>@"
SELECT CASE WHEN TO_CHAR(H.DATECOMPTABLE, 'DY') = 'SAT' THEN TO_CHAR(H.DATECOMPTABLE+2, 'YYYY-MM-DD') ELSE TO_CHAR(H.DATECOMPTABLE, 'YYYY-MM-DD') END PNLDATE FROM HISTOMVTS H
JOIN EXTRNL_REFERENCES_TRADES R ON R.SOPHIS_IDENT = H.REFCON AND R.VALUE = '" + colVal + "'"</Expression>
                <Table>SQL</Table>
              </Lookup>
            </PdtColumnDest>
            <PdtColumnDest>
              <path>//*[local-name() = 'unadjustedDate'] | //*[local-name() = 'adjustedPaymentDate'] | //*[local-name() = 'tradeHeader']/*[local-name() = 'paymentDate']</path>
              <Lookup>
                <Expression>@"
SELECT CASE WHEN TO_CHAR(H.DATECOMPTABLE, 'DY') = 'SAT' THEN TO_CHAR(H.DATECOMPTABLE+2, 'YYYY-MM-DD') ELSE TO_CHAR(H.DATECOMPTABLE, 'YYYY-MM-DD') END PNLDATE FROM HISTOMVTS H
JOIN EXTRNL_REFERENCES_TRADES R ON R.SOPHIS_IDENT = H.REFCON AND R.VALUE = '" + colVal + "'"</Expression>
                <Table>SQL</Table>
              </Lookup>
            </PdtColumnDest>
          </destPaths>
        </PdtColumn>
        <PdtColumn>
          <name>Clearer Reference</name>
          <len>0</len>
          <isRequired>true</isRequired>
          <isRelativeToRootNode>true</isRelativeToRootNode>
        </PdtColumn>
        <PdtColumn>
          <name>Clearing Broker BIC</name>
          <len>0</len>
          <isRequired>true</isRequired>
          <isRelativeToRootNode>true</isRelativeToRootNode>
        </PdtColumn>
        <PdtColumn>
          <name>Executing Broker</name>
          <len>0</len>
          <isRequired>true</isRequired>
          <isRelativeToRootNode>true</isRelativeToRootNode>
        </PdtColumn>
        <PdtColumn>
          <name>Account</name>
          <len>0</len>
          <isRequired>true</isRequired>
          <isRelativeToRootNode>true</isRelativeToRootNode>
          <destPaths>
            <PdtColumnDest>
              <path>
//*[local-name() = 'portfolioName'][contains(@*[local-name() = 'portfolioNameScheme'], 'portfolioName/id')] |
//*[local-name() = 'externalReference']/*[local-name() = 'name' and text() = 'RootPortfolio']/../*[local-name() = 'value']</path>
              <Lookup>
                <Expression>@"
SELECT F_ORI.IDENT
FROM BO_TREASURY_ACCOUNT A
    JOIN BO_TREASURY_EXT_REF R ON R.ACC_ID = A.ID
    JOIN BO_TREASURY_EXT_REF_DEF D ON D.REF_ID = R.REF_ID AND D.REF_NAME = 'CBAccountID'
    JOIN FOLIO F_MIR ON F_MIR.IDENT = A.ACCOUNT_ADJUSTMENT_FOLIO
    JOIN FOLIO F_ORI ON F_ORI.MGR = F_MIR.MGR AND F_ORI.NAME LIKE '% Cash'
WHERE R.VALUE = '" + colVal + "'"</Expression>
                <Table>SQL</Table>
              </Lookup>
            </PdtColumnDest>
            <PdtColumnDest>
              <path>
//*[local-name() = 'partyTradeIdentifier']//*[local-name() = 'partyId'][contains(@*[local-name() = 'partyIdScheme'], 'id')] |
//*[local-name() = 'extendedPartyTradeInformation']//*[local-name() = 'partyId'][contains(@*[local-name() = 'partyIdScheme'], 'id')] |
//*[local-name() = 'buyerPartyReference']//*[local-name() = 'partyId'][contains(@*[local-name() = 'partyIdScheme'], 'id')] |
//*[local-name() = 'entityPartyReference']//*[local-name() = 'partyId'][contains(@*[local-name() = 'partyIdScheme'], 'id')] |
//*[local-name() = 'entity']//*[local-name() = 'partyId'][contains(@*[local-name() = 'partyIdScheme'], 'id')]</path>
              <Lookup>
                <Expression>@"
SELECT A.ENTITY
FROM BO_TREASURY_ACCOUNT A
    JOIN BO_TREASURY_EXT_REF R ON R.ACC_ID = A.ID
    JOIN BO_TREASURY_EXT_REF_DEF D ON D.REF_ID = R.REF_ID AND D.REF_NAME = 'CBAccountID'
WHERE R.VALUE = '" + colVal + "'"</Expression>
                <Table>SQL</Table>
              </Lookup>
            </PdtColumnDest>
            <PdtColumnDest>
              <path>
//*[local-name() = 'counterparty']//*[local-name() = 'partyId'][contains(@*[local-name() = 'partyIdScheme'], 'id')] |
//*[local-name() = 'sellerPartyReference']//*[local-name() = 'partyId'][contains(@*[local-name() = 'partyIdScheme'], 'id')]</path>
              <Lookup>
                <Expression>@"
SELECT T.IDENT
FROM BO_TREASURY_ACCOUNT A
    JOIN BO_TREASURY_EXT_REF R ON R.ACC_ID = A.ID
    JOIN BO_TREASURY_EXT_REF_DEF D ON D.REF_ID = R.REF_ID AND D.REF_NAME = 'CBAccountID'
    JOIN TIERS T ON T.REFERENCE = A.CUSTODIAN
WHERE R.VALUE = '" + colVal + "'"</Expression>
                <Table>SQL</Table>
              </Lookup>
            </PdtColumnDest>
            <PdtColumnDest>
              <path>//*[local-name() = 'accountId']</path>
              <Lookup>
                <Expression>@"
SELECT A.ID
FROM BO_TREASURY_ACCOUNT A
    JOIN BO_TREASURY_EXT_REF R ON R.ACC_ID = A.ID
    JOIN BO_TREASURY_EXT_REF_DEF D ON D.REF_ID = R.REF_ID AND D.REF_NAME = 'CBAccountID'
WHERE R.VALUE = '" + colVal + "'"</Expression>
                <Table>SQL</Table>
              </Lookup>
            </PdtColumnDest>
            <PdtColumnDest>
              <path>//*[local-name() = 'depositary']//*[local-name() = 'partyId'][contains(@*[local-name() = 'partyIdScheme'], 'id')]</path>
              <Lookup>
                <Expression>@"
SELECT T.IDENT
FROM BO_TREASURY_ACCOUNT A
    JOIN BO_TREASURY_EXT_REF R ON R.ACC_ID = A.ID
    JOIN BO_TREASURY_EXT_REF_DEF D ON D.REF_ID = R.REF_ID AND D.REF_NAME = 'CBAccountID'
    JOIN BO_TREASURY_ACCOUNT CUS ON CUS.ACCOUNT_AT_CUSTODIAN = CASE WHEN (A.ACCOUNT_AT_CUSTODIAN LIKE 'DB%' OR A.ACCOUNT_AT_CUSTODIAN LIKE 'LU%') THEN SUBSTR(A.ACCOUNT_AT_CUSTODIAN, 0, 14) ELSE SUBSTR(A.ACCOUNT_AT_CUSTODIAN, 0, 4) END
    JOIN TIERS T ON T.REFERENCE = CUS.CUSTODIAN
WHERE R.VALUE = '" + colVal + "'"</Expression>
                <Table>SQL</Table>
              </Lookup>
            </PdtColumnDest>
          </destPaths>
        </PdtColumn>
        <PdtColumn>
          <name>CommonId</name>
          <len>0</len>
          <isRequired>true</isRequired>
          <isRelativeToRootNode>true</isRelativeToRootNode>
        </PdtColumn>
        <PdtColumn>
          <name>Currency</name>
          <len>0</len>
          <isRequired>true</isRequired>
          <isRelativeToRootNode>true</isRelativeToRootNode>
          <destPaths>
            <PdtColumnDest>
              <path>//*[local-name() = 'currency']</path>
            </PdtColumnDest>
          </destPaths>
        </PdtColumn>
        <PdtColumn>
          <name>Trade Date</name>
          <len>0</len>
          <isRequired>true</isRequired>
          <isRelativeToRootNode>true</isRelativeToRootNode>
        </PdtColumn>
        <PdtColumn>
          <name>Value Date</name>
          <len>0</len>
          <isRequired>true</isRequired>
          <isRelativeToRootNode>true</isRelativeToRootNode>
        </PdtColumn>
        <PdtColumn>
          <name>Quantity</name>
          <len>0</len>
          <isRequired>true</isRequired>
          <isRelativeToRootNode>true</isRelativeToRootNode>
          <destPaths>
            <PdtColumnDest>
              <path>//*[local-name() = 'numberOfSecurities']</path>
              <expression>"$EventType" == "FE" ? double.Parse(colVal) : 1</expression>
            </PdtColumnDest>
          </destPaths>
        </PdtColumn>
        <PdtColumn>
          <name>Net Amount</name>
          <len>0</len>
          <isRequired>true</isRequired>
          <isRelativeToRootNode>true</isRelativeToRootNode>
          <destPaths>
            <PdtColumnDest>
              <path>//*[local-name() = 'principalSettlement']/*[local-name() = 'amount']/*[local-name() = 'amount']</path>
              <expression>"$EventType" == "FE" ? (double.Parse(lineVal.Split(',')[13]) + double.Parse(lineVal.Split(',')[14]) + double.Parse(lineVal.Split(',')[15])) : -1 * double.Parse(colVal)</expression>
            </PdtColumnDest>
          </destPaths>
        </PdtColumn>
        <PdtColumn>
          <name>Bloomberg Ticker</name>
          <len>0</len>
          <isRequired>true</isRequired>
          <isRelativeToRootNode>true</isRelativeToRootNode>
          <destPaths>
            <PdtColumnDest>
              <path>//*[local-name() = 'reference']</path>
              <expression>"$EventType" == "FE" ? colVal : ("$EventType" == "IM" ? "INITIAL MARGIN " : "$EventType" == "MC" ? "MARGIN CALL " : "MONTHLY INTEREST ") + lineVal.Split(',')[7]</expression>
            </PdtColumnDest>
          </destPaths>
        </PdtColumn>
        <PdtColumn>
          <name>Broker fees</name>
          <len>0</len>
          <isRequired>true</isRequired>
          <isRelativeToRootNode>true</isRelativeToRootNode>
          <destPaths>
            <PdtColumnDest>
              <path>//*[local-name() = 'otherPartyPayment'][contains(@*[local-name() = 'paymentTypeScheme'], 'brokerFees')]//*[local-name() = 'amount']</path>
            </PdtColumnDest>
          </destPaths>
        </PdtColumn>
        <PdtColumn>
          <name>Counterparty fees</name>
          <len>0</len>
          <isRequired>true</isRequired>
          <isRelativeToRootNode>true</isRelativeToRootNode>
          <destPaths>
            <PdtColumnDest>
              <path>//*[local-name() = 'otherPartyPayment'][contains(@*[local-name() = 'paymentTypeScheme'], 'couterpartyFees')]//*[local-name() = 'amount']</path>
            </PdtColumnDest>
          </destPaths>
        </PdtColumn>
        <PdtColumn>
          <name>Market fees</name>
          <len>0</len>
          <isRequired>true</isRequired>
          <isRelativeToRootNode>true</isRelativeToRootNode>
          <destPaths>
            <PdtColumnDest>
              <path>//*[local-name() = 'otherPartyPayment'][contains(@*[local-name() = 'paymentTypeScheme'], 'marketFees')]//*[local-name() = 'amount']</path>
            </PdtColumnDest>
          </destPaths>
        </PdtColumn>
      </columns>
    </PdtTransformation>
    <PdtTransformation>
      <name>BBH_IM_Mirr</name>
      <type>Csv2Xml</type>
      <label>Infomediary Initial Margin Mirroring</label>
      <category>Medio</category>
      <templateFile>BBH_IM.xml</templateFile>
      <repeatingRootPath>//*[local-name() = 'import']</repeatingRootPath>
      <repeatingChildrenPath>//*[local-name() = 'trade']</repeatingChildrenPath>
      <csvSrcSeparator>44</csvSrcSeparator>
      <csvDestSeparator>0</csvDestSeparator>
      <processingCondition>"$EventType" == "IM" &amp;&amp; (lineVal.Split('$CsvSrcSep')[3] == "GSILGB2X" || (lineVal.Split('$CsvSrcSep')[3] == "JPMSGB2L" &amp;&amp; "$OnBoarded" != ""))</processingCondition>
      <variables>
        <PdtVariable>
          <name>EventType</name>
          <expressionBefore>lineVal.Split(',')[0] == "Clearing Broker Fees" ? "FE" : lineVal.Split(',')[0] == "Initial Margin" ? "IM" : lineVal.Split(',')[0] == "Monthly Interest" ? "MI" : lineVal.Split(',')[0] == "Clearer Margin Calls" ? "MC" : ""</expressionBefore>
        </PdtVariable>
        <PdtVariable>
          <name>OnBoarded</name>
          <expressionBefore>lineVal.Split('$CsvSrcSep')[6]</expressionBefore>
          <Lookup>
            <Table>MEDIO_BBH_FUNDFILTER</Table>
            <ColumnIndex>0</ColumnIndex>
          </Lookup>
        </PdtVariable>
      </variables>
      <columns>
        <PdtColumn>
          <name>Event Type</name>
          <len>0</len>
          <isRequired>true</isRequired>
          <isRelativeToRootNode>true</isRelativeToRootNode>
          <destPaths>
            <PdtColumnDest>
              <path>//*[local-name() = 'businessEvent']</path>
              <expression>"$EventType" == "FE" ? "Clearing Broker Fees" : "$EventType" == "IM" ? "Initial Margin" : "$EventType" == "MI" ? "Clearing Broker Interests" : "Clearer Margin Call"</expression>
            </PdtColumnDest>
          </destPaths>
        </PdtColumn>
        <PdtColumn>
          <name>Sender Reference</name>
          <len>0</len>
          <isRequired>true</isRequired>
          <isRelativeToRootNode>true</isRelativeToRootNode>
          <destPaths>
            <PdtColumnDest>
              <path>//*[local-name() = 'tradeId'][contains(@*[local-name() = 'tradeIdScheme'], 'tradeId/externalReference')]</path>
              <expression>colVal + "_Mir"</expression>
            </PdtColumnDest>
          </destPaths>
        </PdtColumn>
        <PdtColumn>
          <name>Clearer Reference</name>
          <len>0</len>
          <isRequired>true</isRequired>
          <isRelativeToRootNode>true</isRelativeToRootNode>
        </PdtColumn>
        <PdtColumn>
          <name>Clearing Broker BIC</name>
          <len>0</len>
          <isRequired>true</isRequired>
          <isRelativeToRootNode>true</isRelativeToRootNode>
        </PdtColumn>
        <PdtColumn>
          <name>Executing Broker</name>
          <len>0</len>
          <isRequired>true</isRequired>
          <isRelativeToRootNode>true</isRelativeToRootNode>
        </PdtColumn>
        <PdtColumn>
          <name>Account</name>
          <len>0</len>
          <isRequired>true</isRequired>
          <isRelativeToRootNode>true</isRelativeToRootNode>
          <destPaths>
            <PdtColumnDest>
              <path>
//*[local-name() = 'portfolioName'][contains(@*[local-name() = 'portfolioNameScheme'], 'portfolioName/id')] |
//*[local-name() = 'externalReference']/*[local-name() = 'name' and text() = 'RootPortfolio']/../*[local-name() = 'value']</path>
              <Lookup>
                <Expression>@"
SELECT A_MIR.ACCOUNT_ADJUSTMENT_FOLIO
FROM BO_TREASURY_ACCOUNT A_ORI
    JOIN BO_TREASURY_EXT_REF R ON R.ACC_ID = A_ORI.ID
    JOIN BO_TREASURY_EXT_REF_DEF D ON D.REF_ID = R.REF_ID AND D.REF_NAME = 'CBAccountID'
    JOIN BO_TREASURY_ACCOUNT A_MIR ON A_MIR.ACCOUNT_AT_CUSTODIAN = 
        CASE WHEN (A_ORI.ACCOUNT_AT_CUSTODIAN LIKE 'DB%' OR A_ORI.ACCOUNT_AT_CUSTODIAN LIKE 'LU%')
            THEN SUBSTR(A_ORI.ACCOUNT_AT_CUSTODIAN, 0, 14) || 'IM' || SUBSTR(A_ORI.ACCOUNT_AT_CUSTODIAN, 15)
        ELSE SUBSTR(A_ORI.ACCOUNT_AT_CUSTODIAN, 0, 4) || 'IM' || SUBSTR(A_ORI.ACCOUNT_AT_CUSTODIAN, 5) END
WHERE R.VALUE = '" + colVal + "'"</Expression>
                <Table>SQL</Table>
              </Lookup>
            </PdtColumnDest>
            <PdtColumnDest>
              <path>
//*[local-name() = 'partyTradeIdentifier']//*[local-name() = 'partyId'][contains(@*[local-name() = 'partyIdScheme'], 'id')] |
//*[local-name() = 'extendedPartyTradeInformation']//*[local-name() = 'partyId'][contains(@*[local-name() = 'partyIdScheme'], 'id')] |
//*[local-name() = 'buyerPartyReference']//*[local-name() = 'partyId'][contains(@*[local-name() = 'partyIdScheme'], 'id')] |
//*[local-name() = 'entityPartyReference']//*[local-name() = 'partyId'][contains(@*[local-name() = 'partyIdScheme'], 'id')] |
//*[local-name() = 'entity']//*[local-name() = 'partyId'][contains(@*[local-name() = 'partyIdScheme'], 'id')]</path>
              <Lookup>
                <Expression>@"
SELECT A.ENTITY
FROM BO_TREASURY_ACCOUNT A
    JOIN BO_TREASURY_EXT_REF R ON R.ACC_ID = A.ID
    JOIN BO_TREASURY_EXT_REF_DEF D ON D.REF_ID = R.REF_ID AND D.REF_NAME = 'CBAccountID'
WHERE R.VALUE = '" + colVal + "'"</Expression>
                <Table>SQL</Table>
              </Lookup>
            </PdtColumnDest>
            <PdtColumnDest>
              <path>
//*[local-name() = 'counterparty']//*[local-name() = 'partyId'][contains(@*[local-name() = 'partyIdScheme'], 'id')] |
//*[local-name() = 'sellerPartyReference']//*[local-name() = 'partyId'][contains(@*[local-name() = 'partyIdScheme'], 'id')]</path>
              <Lookup>
                <Expression>@"
SELECT T.IDENT
FROM BO_TREASURY_ACCOUNT A
    JOIN BO_TREASURY_EXT_REF R ON R.ACC_ID = A.ID
    JOIN BO_TREASURY_EXT_REF_DEF D ON D.REF_ID = R.REF_ID AND D.REF_NAME = 'CBAccountID'
    JOIN TIERS T ON T.REFERENCE = A.CUSTODIAN
WHERE R.VALUE = '" + colVal + "'"</Expression>
                <Table>SQL</Table>
              </Lookup>
            </PdtColumnDest>
            <PdtColumnDest>
              <path>//*[local-name() = 'accountId']</path>
              <Lookup>
                <Expression>@"
SELECT A_MIR.ID
FROM BO_TREASURY_ACCOUNT A_ORI
    JOIN BO_TREASURY_EXT_REF R ON R.ACC_ID = A_ORI.ID
    JOIN BO_TREASURY_EXT_REF_DEF D ON D.REF_ID = R.REF_ID AND D.REF_NAME = 'CBAccountID'
    JOIN BO_TREASURY_ACCOUNT A_MIR ON A_MIR.ACCOUNT_AT_CUSTODIAN = 
        CASE WHEN (A_ORI.ACCOUNT_AT_CUSTODIAN LIKE 'DB%' OR A_ORI.ACCOUNT_AT_CUSTODIAN LIKE 'LU%')
            THEN SUBSTR(A_ORI.ACCOUNT_AT_CUSTODIAN, 0, 14) || 'IM' || SUBSTR(A_ORI.ACCOUNT_AT_CUSTODIAN, 15)
        ELSE SUBSTR(A_ORI.ACCOUNT_AT_CUSTODIAN, 0, 4) || 'IM' || SUBSTR(A_ORI.ACCOUNT_AT_CUSTODIAN, 5) END
WHERE R.VALUE = '" + colVal + "'"</Expression>
                <Table>SQL</Table>
              </Lookup>
            </PdtColumnDest>
            <PdtColumnDest>
              <path>//*[local-name() = 'depositary']//*[local-name() = 'partyId'][contains(@*[local-name() = 'partyIdScheme'], 'id')]</path>
              <expression>10009350</expression>
            </PdtColumnDest>
          </destPaths>
        </PdtColumn>
        <PdtColumn>
          <name>CommonId</name>
          <len>0</len>
          <isRequired>true</isRequired>
          <isRelativeToRootNode>true</isRelativeToRootNode>
        </PdtColumn>
        <PdtColumn>
          <name>Currency</name>
          <len>0</len>
          <isRequired>true</isRequired>
          <isRelativeToRootNode>true</isRelativeToRootNode>
          <destPaths>
            <PdtColumnDest>
              <path>//*[local-name() = 'currency']</path>
            </PdtColumnDest>
          </destPaths>
        </PdtColumn>
        <PdtColumn>
          <name>Trade Date</name>
          <len>0</len>
          <isRequired>true</isRequired>
          <isRelativeToRootNode>true</isRelativeToRootNode>
          <destPaths>
            <PdtColumnDest>
              <path>//*[local-name() = 'tradeDate']</path>
              <expression>"$EventType" == "FE" || "$EventType" == "IM" ? (colVal.Trim() == "" ? "" : System.DateTime.ParseExact(colVal, "yyyyMMdd", System.Globalization.CultureInfo.InvariantCulture).ToString("yyyy-MM-dd")) : (lineVal.Split(',')[9].Trim() == "" ? "" : System.DateTime.ParseExact(lineVal.Split(',')[9], "yyyyMMdd", System.Globalization.CultureInfo.InvariantCulture).ToString("yyyy-MM-dd"))</expression>
            </PdtColumnDest>
          </destPaths>
        </PdtColumn>
        <PdtColumn>
          <name>Value Date</name>
          <len>0</len>
          <isRequired>true</isRequired>
          <isRelativeToRootNode>true</isRelativeToRootNode>
          <destPaths>
            <PdtColumnDest>
              <path>//*[local-name() = 'unadjustedDate'] | //*[local-name() = 'adjustedPaymentDate'] | //*[local-name() = 'tradeHeader']/*[local-name() = 'paymentDate']</path>
              <expression>colVal.Trim() == "" ? System.DateTime.ParseExact(lineVal.Split(',')[8], "yyyyMMdd", System.Globalization.CultureInfo.InvariantCulture).ToString("yyyy-MM-dd") : System.DateTime.ParseExact(colVal, "yyyyMMdd", System.Globalization.CultureInfo.InvariantCulture).ToString("yyyy-MM-dd")</expression>
            </PdtColumnDest>
          </destPaths>
        </PdtColumn>
        <PdtColumn>
          <name>Quantity</name>
          <len>0</len>
          <isRequired>true</isRequired>
          <isRelativeToRootNode>true</isRelativeToRootNode>
          <destPaths>
            <PdtColumnDest>
              <path>//*[local-name() = 'numberOfSecurities']</path>
              <expression>"$EventType" == "FE" ? double.Parse(colVal) : 1</expression>
            </PdtColumnDest>
          </destPaths>
        </PdtColumn>
        <PdtColumn>
          <name>Net Amount</name>
          <len>0</len>
          <isRequired>true</isRequired>
          <isRelativeToRootNode>true</isRelativeToRootNode>
          <destPaths>
            <PdtColumnDest>
              <path>//*[local-name() = 'principalSettlement']/*[local-name() = 'amount']/*[local-name() = 'amount']</path>
              <expression>"$EventType" == "FE" ? (double.Parse(lineVal.Split(',')[13]) + double.Parse(lineVal.Split(',')[14]) + double.Parse(lineVal.Split(',')[15])) : -1 * double.Parse(colVal)</expression>
            </PdtColumnDest>
          </destPaths>
        </PdtColumn>
        <PdtColumn>
          <name>Bloomberg Ticker</name>
          <len>0</len>
          <isRequired>true</isRequired>
          <isRelativeToRootNode>true</isRelativeToRootNode>
          <destPaths>
            <PdtColumnDest>
              <path>//*[local-name() = 'reference']</path>
              <expression>"$EventType" == "FE" ? colVal : ("$EventType" == "IM" ? "INITIAL MARGIN " : "$EventType" == "MC" ? "MARGIN CALL " : "MONTHLY INTEREST ") + lineVal.Split(',')[7]</expression>
            </PdtColumnDest>
          </destPaths>
        </PdtColumn>
        <PdtColumn>
          <name>Broker fees</name>
          <len>0</len>
          <isRequired>true</isRequired>
          <isRelativeToRootNode>true</isRelativeToRootNode>
          <destPaths>
            <PdtColumnDest>
              <path>//*[local-name() = 'otherPartyPayment'][contains(@*[local-name() = 'paymentTypeScheme'], 'brokerFees')]//*[local-name() = 'amount']</path>
            </PdtColumnDest>
          </destPaths>
        </PdtColumn>
        <PdtColumn>
          <name>Counterparty fees</name>
          <len>0</len>
          <isRequired>true</isRequired>
          <isRelativeToRootNode>true</isRelativeToRootNode>
          <destPaths>
            <PdtColumnDest>
              <path>//*[local-name() = 'otherPartyPayment'][contains(@*[local-name() = 'paymentTypeScheme'], 'couterpartyFees')]//*[local-name() = 'amount']</path>
            </PdtColumnDest>
          </destPaths>
        </PdtColumn>
        <PdtColumn>
          <name>Market fees</name>
          <len>0</len>
          <isRequired>true</isRequired>
          <isRelativeToRootNode>true</isRelativeToRootNode>
          <destPaths>
            <PdtColumnDest>
              <path>//*[local-name() = 'otherPartyPayment'][contains(@*[local-name() = 'paymentTypeScheme'], 'marketFees')]//*[local-name() = 'amount']</path>
            </PdtColumnDest>
          </destPaths>
        </PdtColumn>
      </columns>
    </PdtTransformation>
    <PdtTransformation>
      <name>BBH_IM_Mirr_Rev</name>
      <type>Csv2Xml</type>
      <label>Infomediary Initial Margin Mirroring Reversal</label>
      <category>Medio</category>
      <templateFile>BBH_IM.xml</templateFile>
      <repeatingRootPath>//*[local-name() = 'import']</repeatingRootPath>
      <repeatingChildrenPath>//*[local-name() = 'trade']</repeatingChildrenPath>
      <csvSrcSeparator>44</csvSrcSeparator>
      <csvDestSeparator>0</csvDestSeparator>
      <processingCondition>"$EventType" == "IM" &amp;&amp; (lineVal.Split('$CsvSrcSep')[3] == "GSILGB2X" || (lineVal.Split('$CsvSrcSep')[3] == "JPMSGB2L" &amp;&amp; "$OnBoarded" != ""))</processingCondition>
      <variables>
        <PdtVariable>
          <name>EventType</name>
          <expressionBefore>lineVal.Split(',')[0] == "Clearing Broker Fees" ? "FE" : lineVal.Split(',')[0] == "Initial Margin" ? "IM" : lineVal.Split(',')[0] == "Monthly Interest" ? "MI" : lineVal.Split(',')[0] == "Clearer Margin Calls" ? "MC" : ""</expressionBefore>
        </PdtVariable>
        <PdtVariable>
          <name>OnBoarded</name>
          <expressionBefore>lineVal.Split('$CsvSrcSep')[6]</expressionBefore>
          <Lookup>
            <Table>MEDIO_BBH_FUNDFILTER</Table>
            <ColumnIndex>0</ColumnIndex>
          </Lookup>
        </PdtVariable>
      </variables>
      <columns>
        <PdtColumn>
          <name>Event Type</name>
          <len>0</len>
          <isRequired>true</isRequired>
          <isRelativeToRootNode>true</isRelativeToRootNode>
          <destPaths>
            <PdtColumnDest>
              <path>//*[local-name() = 'businessEvent']</path>
              <expression>"$EventType" == "FE" ? "Clearing Broker Fees" : "$EventType" == "IM" ? "Initial Margin" : "$EventType" == "MI" ? "Clearing Broker Interests" : "Clearer Margin Call"</expression>
            </PdtColumnDest>
          </destPaths>
        </PdtColumn>
        <PdtColumn>
          <name>Sender Reference</name>
          <len>0</len>
          <isRequired>true</isRequired>
          <isRelativeToRootNode>true</isRelativeToRootNode>
          <destPaths>
            <PdtColumnDest>
              <path>//*[local-name() = 'tradeId'][contains(@*[local-name() = 'tradeIdScheme'], 'tradeId/externalReference')]</path>
              <expression>colVal + "_Mir_Rev"</expression>
            </PdtColumnDest>
            <PdtColumnDest>
              <path>//*[local-name() = 'tradeDate']</path>
              <Lookup>
                <Expression>@"
SELECT CASE WHEN TO_CHAR(H.DATECOMPTABLE, 'DY') = 'SAT' THEN TO_CHAR(H.DATECOMPTABLE+2, 'YYYY-MM-DD') ELSE TO_CHAR(H.DATECOMPTABLE, 'YYYY-MM-DD') END PNLDATE FROM HISTOMVTS H
JOIN EXTRNL_REFERENCES_TRADES R ON R.SOPHIS_IDENT = H.REFCON AND R.VALUE = '" + colVal + "' || '_Mir'"</Expression>
                <Table>SQL</Table>
              </Lookup>
            </PdtColumnDest>
            <PdtColumnDest>
              <path>//*[local-name() = 'unadjustedDate'] | //*[local-name() = 'adjustedPaymentDate'] | //*[local-name() = 'tradeHeader']/*[local-name() = 'paymentDate']</path>
              <Lookup>
                <Expression>@"
SELECT CASE WHEN TO_CHAR(H.DATECOMPTABLE, 'DY') = 'SAT' THEN TO_CHAR(H.DATECOMPTABLE+2, 'YYYY-MM-DD') ELSE TO_CHAR(H.DATECOMPTABLE, 'YYYY-MM-DD') END PNLDATE FROM HISTOMVTS H
JOIN EXTRNL_REFERENCES_TRADES R ON R.SOPHIS_IDENT = H.REFCON AND R.VALUE = '" + colVal + "' || '_Mir'"</Expression>
                <Table>SQL</Table>
              </Lookup>
            </PdtColumnDest>
          </destPaths>
        </PdtColumn>
        <PdtColumn>
          <name>Clearer Reference</name>
          <len>0</len>
          <isRequired>true</isRequired>
          <isRelativeToRootNode>true</isRelativeToRootNode>
        </PdtColumn>
        <PdtColumn>
          <name>Clearing Broker BIC</name>
          <len>0</len>
          <isRequired>true</isRequired>
          <isRelativeToRootNode>true</isRelativeToRootNode>
        </PdtColumn>
        <PdtColumn>
          <name>Executing Broker</name>
          <len>0</len>
          <isRequired>true</isRequired>
          <isRelativeToRootNode>true</isRelativeToRootNode>
        </PdtColumn>
        <PdtColumn>
          <name>Account</name>
          <len>0</len>
          <isRequired>true</isRequired>
          <isRelativeToRootNode>true</isRelativeToRootNode>
          <destPaths>
            <PdtColumnDest>
              <path>
//*[local-name() = 'portfolioName'][contains(@*[local-name() = 'portfolioNameScheme'], 'portfolioName/id')] |
//*[local-name() = 'externalReference']/*[local-name() = 'name' and text() = 'RootPortfolio']/../*[local-name() = 'value']</path>
              <Lookup>
                <Expression>@"
SELECT A_MIR.ACCOUNT_ADJUSTMENT_FOLIO
FROM BO_TREASURY_ACCOUNT A_ORI
    JOIN BO_TREASURY_EXT_REF R ON R.ACC_ID = A_ORI.ID
    JOIN BO_TREASURY_EXT_REF_DEF D ON D.REF_ID = R.REF_ID AND D.REF_NAME = 'CBAccountID'
    JOIN BO_TREASURY_ACCOUNT A_MIR ON A_MIR.ACCOUNT_AT_CUSTODIAN = 
        CASE WHEN (A_ORI.ACCOUNT_AT_CUSTODIAN LIKE 'DB%' OR A_ORI.ACCOUNT_AT_CUSTODIAN LIKE 'LU%')
            THEN SUBSTR(A_ORI.ACCOUNT_AT_CUSTODIAN, 0, 14) || 'IM' || SUBSTR(A_ORI.ACCOUNT_AT_CUSTODIAN, 15)
        ELSE SUBSTR(A_ORI.ACCOUNT_AT_CUSTODIAN, 0, 4) || 'IM' || SUBSTR(A_ORI.ACCOUNT_AT_CUSTODIAN, 5) END
WHERE R.VALUE = '" + colVal + "'"</Expression>
                <Table>SQL</Table>
              </Lookup>
            </PdtColumnDest>
            <PdtColumnDest>
              <path>
//*[local-name() = 'partyTradeIdentifier']//*[local-name() = 'partyId'][contains(@*[local-name() = 'partyIdScheme'], 'id')] |
//*[local-name() = 'extendedPartyTradeInformation']//*[local-name() = 'partyId'][contains(@*[local-name() = 'partyIdScheme'], 'id')] |
//*[local-name() = 'buyerPartyReference']//*[local-name() = 'partyId'][contains(@*[local-name() = 'partyIdScheme'], 'id')] |
//*[local-name() = 'entityPartyReference']//*[local-name() = 'partyId'][contains(@*[local-name() = 'partyIdScheme'], 'id')] |
//*[local-name() = 'entity']//*[local-name() = 'partyId'][contains(@*[local-name() = 'partyIdScheme'], 'id')]</path>
              <Lookup>
                <Expression>@"
SELECT A.ENTITY
FROM BO_TREASURY_ACCOUNT A
    JOIN BO_TREASURY_EXT_REF R ON R.ACC_ID = A.ID
    JOIN BO_TREASURY_EXT_REF_DEF D ON D.REF_ID = R.REF_ID AND D.REF_NAME = 'CBAccountID'
WHERE R.VALUE = '" + colVal + "'"</Expression>
                <Table>SQL</Table>
              </Lookup>
            </PdtColumnDest>
            <PdtColumnDest>
              <path>
//*[local-name() = 'counterparty']//*[local-name() = 'partyId'][contains(@*[local-name() = 'partyIdScheme'], 'id')] |
//*[local-name() = 'sellerPartyReference']//*[local-name() = 'partyId'][contains(@*[local-name() = 'partyIdScheme'], 'id')]</path>
              <Lookup>
                <Expression>@"
SELECT T.IDENT
FROM BO_TREASURY_ACCOUNT A
    JOIN BO_TREASURY_EXT_REF R ON R.ACC_ID = A.ID
    JOIN BO_TREASURY_EXT_REF_DEF D ON D.REF_ID = R.REF_ID AND D.REF_NAME = 'CBAccountID'
    JOIN TIERS T ON T.REFERENCE = A.CUSTODIAN
WHERE R.VALUE = '" + colVal + "'"</Expression>
                <Table>SQL</Table>
              </Lookup>
            </PdtColumnDest>
            <PdtColumnDest>
              <path>//*[local-name() = 'accountId']</path>
              <Lookup>
                <Expression>@"
SELECT A_MIR.ID
FROM BO_TREASURY_ACCOUNT A_ORI
    JOIN BO_TREASURY_EXT_REF R ON R.ACC_ID = A_ORI.ID
    JOIN BO_TREASURY_EXT_REF_DEF D ON D.REF_ID = R.REF_ID AND D.REF_NAME = 'CBAccountID'
    JOIN BO_TREASURY_ACCOUNT A_MIR ON A_MIR.ACCOUNT_AT_CUSTODIAN = 
        CASE WHEN (A_ORI.ACCOUNT_AT_CUSTODIAN LIKE 'DB%' OR A_ORI.ACCOUNT_AT_CUSTODIAN LIKE 'LU%')
            THEN SUBSTR(A_ORI.ACCOUNT_AT_CUSTODIAN, 0, 14) || 'IM' || SUBSTR(A_ORI.ACCOUNT_AT_CUSTODIAN, 15)
        ELSE SUBSTR(A_ORI.ACCOUNT_AT_CUSTODIAN, 0, 4) || 'IM' || SUBSTR(A_ORI.ACCOUNT_AT_CUSTODIAN, 5) END
WHERE R.VALUE = '" + colVal + "'"</Expression>
                <Table>SQL</Table>
              </Lookup>
            </PdtColumnDest>
            <PdtColumnDest>
              <path>//*[local-name() = 'depositary']//*[local-name() = 'partyId'][contains(@*[local-name() = 'partyIdScheme'], 'id')]</path>
              <expression>10009350</expression>
            </PdtColumnDest>
          </destPaths>
        </PdtColumn>
        <PdtColumn>
          <name>CommonId</name>
          <len>0</len>
          <isRequired>true</isRequired>
          <isRelativeToRootNode>true</isRelativeToRootNode>
        </PdtColumn>
        <PdtColumn>
          <name>Currency</name>
          <len>0</len>
          <isRequired>true</isRequired>
          <isRelativeToRootNode>true</isRelativeToRootNode>
          <destPaths>
            <PdtColumnDest>
              <path>//*[local-name() = 'currency']</path>
            </PdtColumnDest>
          </destPaths>
        </PdtColumn>
        <PdtColumn>
          <name>Trade Date</name>
          <len>0</len>
          <isRequired>true</isRequired>
          <isRelativeToRootNode>true</isRelativeToRootNode>
        </PdtColumn>
        <PdtColumn>
          <name>Value Date</name>
          <len>0</len>
          <isRequired>true</isRequired>
          <isRelativeToRootNode>true</isRelativeToRootNode>
        </PdtColumn>
        <PdtColumn>
          <name>Quantity</name>
          <len>0</len>
          <isRequired>true</isRequired>
          <isRelativeToRootNode>true</isRelativeToRootNode>
          <destPaths>
            <PdtColumnDest>
              <path>//*[local-name() = 'numberOfSecurities']</path>
              <expression>"$EventType" == "FE" ? double.Parse(colVal) : 1</expression>
            </PdtColumnDest>
          </destPaths>
        </PdtColumn>
        <PdtColumn>
          <name>Net Amount</name>
          <len>0</len>
          <isRequired>true</isRequired>
          <isRelativeToRootNode>true</isRelativeToRootNode>
          <destPaths>
            <PdtColumnDest>
              <path>//*[local-name() = 'principalSettlement']/*[local-name() = 'amount']/*[local-name() = 'amount']</path>
              <expression>"$EventType" == "FE" ? (double.Parse(lineVal.Split(',')[13]) + double.Parse(lineVal.Split(',')[14]) + double.Parse(lineVal.Split(',')[15])) : double.Parse(colVal)</expression>
            </PdtColumnDest>
          </destPaths>
        </PdtColumn>
        <PdtColumn>
          <name>Bloomberg Ticker</name>
          <len>0</len>
          <isRequired>true</isRequired>
          <isRelativeToRootNode>true</isRelativeToRootNode>
          <destPaths>
            <PdtColumnDest>
              <path>//*[local-name() = 'reference']</path>
              <expression>"$EventType" == "FE" ? colVal : ("$EventType" == "IM" ? "INITIAL MARGIN " : "$EventType" == "MC" ? "MARGIN CALL " : "MONTHLY INTEREST ") + lineVal.Split(',')[7]</expression>
            </PdtColumnDest>
          </destPaths>
        </PdtColumn>
        <PdtColumn>
          <name>Broker fees</name>
          <len>0</len>
          <isRequired>true</isRequired>
          <isRelativeToRootNode>true</isRelativeToRootNode>
          <destPaths>
            <PdtColumnDest>
              <path>//*[local-name() = 'otherPartyPayment'][contains(@*[local-name() = 'paymentTypeScheme'], 'brokerFees')]//*[local-name() = 'amount']</path>
            </PdtColumnDest>
          </destPaths>
        </PdtColumn>
        <PdtColumn>
          <name>Counterparty fees</name>
          <len>0</len>
          <isRequired>true</isRequired>
          <isRelativeToRootNode>true</isRelativeToRootNode>
          <destPaths>
            <PdtColumnDest>
              <path>//*[local-name() = 'otherPartyPayment'][contains(@*[local-name() = 'paymentTypeScheme'], 'couterpartyFees')]//*[local-name() = 'amount']</path>
            </PdtColumnDest>
          </destPaths>
        </PdtColumn>
        <PdtColumn>
          <name>Market fees</name>
          <len>0</len>
          <isRequired>true</isRequired>
          <isRelativeToRootNode>true</isRelativeToRootNode>
          <destPaths>
            <PdtColumnDest>
              <path>//*[local-name() = 'otherPartyPayment'][contains(@*[local-name() = 'paymentTypeScheme'], 'marketFees')]//*[local-name() = 'amount']</path>
            </PdtColumnDest>
          </destPaths>
        </PdtColumn>
      </columns>
    </PdtTransformation>
    <PdtTransformation>
      <name>BBH_MI</name>
      <type>Csv2Xml</type>
      <label>Infomediary Monthly Interest</label>
      <category>Medio</category>
      <templateFile>BBH_IM.xml</templateFile>
      <repeatingRootPath>//*[local-name() = 'import']</repeatingRootPath>
      <repeatingChildrenPath>//*[local-name() = 'trade']</repeatingChildrenPath>
      <csvSrcSeparator>44</csvSrcSeparator>
      <csvDestSeparator>0</csvDestSeparator>
      <processingCondition>"$EventType" == "MI" &amp;&amp; (lineVal.Split('$CsvSrcSep')[3] == "GSILGB2X" || (lineVal.Split('$CsvSrcSep')[3] == "JPMSGB2L" &amp;&amp; "$OnBoarded" != ""))</processingCondition>
      <variables>
        <PdtVariable>
          <name>EventType</name>
          <expressionBefore>lineVal.Split(',')[0] == "Clearing Broker Fees" ? "FE" : lineVal.Split(',')[0] == "Initial Margin" ? "IM" : lineVal.Split(',')[0] == "Monthly Interest" ? "MI" : lineVal.Split(',')[0] == "Clearer Margin Calls" ? "MC" : ""</expressionBefore>
        </PdtVariable>
        <PdtVariable>
          <name>OnBoarded</name>
          <expressionBefore>lineVal.Split('$CsvSrcSep')[6]</expressionBefore>
          <Lookup>
            <Table>MEDIO_BBH_FUNDFILTER</Table>
            <ColumnIndex>0</ColumnIndex>
          </Lookup>
        </PdtVariable>
      </variables>
      <columns>
        <PdtColumn>
          <name>Event Type</name>
          <len>0</len>
          <isRequired>true</isRequired>
          <isRelativeToRootNode>true</isRelativeToRootNode>
          <destPaths>
            <PdtColumnDest>
              <path>//*[local-name() = 'businessEvent']</path>
              <expression>"$EventType" == "FE" ? "Clearing Broker Fees" : "$EventType" == "IM" ? "Initial Margin" : "$EventType" == "MI" ? "Clearing Broker Interests" : "Clearer Margin Call"</expression>
            </PdtColumnDest>
          </destPaths>
        </PdtColumn>
        <PdtColumn>
          <name>Sender Reference</name>
          <len>0</len>
          <isRequired>true</isRequired>
          <isRelativeToRootNode>true</isRelativeToRootNode>
          <destPaths>
            <PdtColumnDest>
              <path>//*[local-name() = 'tradeId'][contains(@*[local-name() = 'tradeIdScheme'], 'tradeId/externalReference')]</path>
            </PdtColumnDest>
          </destPaths>
        </PdtColumn>
        <PdtColumn>
          <name>Clearer Reference</name>
          <len>0</len>
          <isRequired>true</isRequired>
          <isRelativeToRootNode>true</isRelativeToRootNode>
        </PdtColumn>
        <PdtColumn>
          <name>Clearing Broker BIC</name>
          <len>0</len>
          <isRequired>true</isRequired>
          <isRelativeToRootNode>true</isRelativeToRootNode>
        </PdtColumn>
        <PdtColumn>
          <name>Executing Broker</name>
          <len>0</len>
          <isRequired>true</isRequired>
          <isRelativeToRootNode>true</isRelativeToRootNode>
        </PdtColumn>
        <PdtColumn>
          <name>Account</name>
          <len>0</len>
          <isRequired>true</isRequired>
          <isRelativeToRootNode>true</isRelativeToRootNode>
          <destPaths>
            <PdtColumnDest>
              <path>
//*[local-name() = 'portfolioName'][contains(@*[local-name() = 'portfolioNameScheme'], 'portfolioName/id')] |
//*[local-name() = 'externalReference']/*[local-name() = 'name' and text() = 'RootPortfolio']/../*[local-name() = 'value']</path>
              <Lookup>
                <Expression>@"
SELECT F_ORI.IDENT
FROM BO_TREASURY_ACCOUNT A
    JOIN BO_TREASURY_EXT_REF R ON R.ACC_ID = A.ID
    JOIN BO_TREASURY_EXT_REF_DEF D ON D.REF_ID = R.REF_ID AND D.REF_NAME = 'CBAccountID'
    JOIN FOLIO F_MIR ON F_MIR.IDENT = A.ACCOUNT_ADJUSTMENT_FOLIO
    JOIN FOLIO F_ORI ON F_ORI.MGR = F_MIR.MGR AND F_ORI.NAME LIKE '% Cash'
WHERE R.VALUE = '" + colVal + "'"</Expression>
                <Table>SQL</Table>
              </Lookup>
            </PdtColumnDest>
            <PdtColumnDest>
              <path>
//*[local-name() = 'partyTradeIdentifier']//*[local-name() = 'partyId'][contains(@*[local-name() = 'partyIdScheme'], 'id')] |
//*[local-name() = 'extendedPartyTradeInformation']//*[local-name() = 'partyId'][contains(@*[local-name() = 'partyIdScheme'], 'id')] |
//*[local-name() = 'buyerPartyReference']//*[local-name() = 'partyId'][contains(@*[local-name() = 'partyIdScheme'], 'id')] |
//*[local-name() = 'entityPartyReference']//*[local-name() = 'partyId'][contains(@*[local-name() = 'partyIdScheme'], 'id')] |
//*[local-name() = 'entity']//*[local-name() = 'partyId'][contains(@*[local-name() = 'partyIdScheme'], 'id')]</path>
              <Lookup>
                <Expression>@"
SELECT A.ENTITY
FROM BO_TREASURY_ACCOUNT A
    JOIN BO_TREASURY_EXT_REF R ON R.ACC_ID = A.ID
    JOIN BO_TREASURY_EXT_REF_DEF D ON D.REF_ID = R.REF_ID AND D.REF_NAME = 'CBAccountID'
WHERE R.VALUE = '" + colVal + "'"</Expression>
                <Table>SQL</Table>
              </Lookup>
            </PdtColumnDest>
            <PdtColumnDest>
              <path>
//*[local-name() = 'counterparty']//*[local-name() = 'partyId'][contains(@*[local-name() = 'partyIdScheme'], 'id')] |
//*[local-name() = 'sellerPartyReference']//*[local-name() = 'partyId'][contains(@*[local-name() = 'partyIdScheme'], 'id')]</path>
              <Lookup>
                <Expression>@"
SELECT T.IDENT
FROM BO_TREASURY_ACCOUNT A
    JOIN BO_TREASURY_EXT_REF R ON R.ACC_ID = A.ID
    JOIN BO_TREASURY_EXT_REF_DEF D ON D.REF_ID = R.REF_ID AND D.REF_NAME = 'CBAccountID'
    JOIN TIERS T ON T.REFERENCE = A.CUSTODIAN
WHERE R.VALUE = '" + colVal + "'"</Expression>
                <Table>SQL</Table>
              </Lookup>
            </PdtColumnDest>
            <PdtColumnDest>
              <path>//*[local-name() = 'accountId']</path>
              <Lookup>
                <Expression>@"
SELECT A.ID
FROM BO_TREASURY_ACCOUNT A
    JOIN BO_TREASURY_EXT_REF R ON R.ACC_ID = A.ID
    JOIN BO_TREASURY_EXT_REF_DEF D ON D.REF_ID = R.REF_ID AND D.REF_NAME = 'CBAccountID'
WHERE R.VALUE = '" + colVal + "'"</Expression>
                <Table>SQL</Table>
              </Lookup>
            </PdtColumnDest>
            <PdtColumnDest>
              <path>//*[local-name() = 'depositary']//*[local-name() = 'partyId'][contains(@*[local-name() = 'partyIdScheme'], 'id')]</path>
              <Lookup>
                <Expression>@"
SELECT T.IDENT
FROM BO_TREASURY_ACCOUNT A
    JOIN BO_TREASURY_EXT_REF R ON R.ACC_ID = A.ID
    JOIN BO_TREASURY_EXT_REF_DEF D ON D.REF_ID = R.REF_ID AND D.REF_NAME = 'CBAccountID'
    JOIN BO_TREASURY_ACCOUNT CUS ON CUS.ACCOUNT_AT_CUSTODIAN = CASE WHEN (A.ACCOUNT_AT_CUSTODIAN LIKE 'DB%' OR A.ACCOUNT_AT_CUSTODIAN LIKE 'LU%') THEN SUBSTR(A.ACCOUNT_AT_CUSTODIAN, 0, 14) ELSE SUBSTR(A.ACCOUNT_AT_CUSTODIAN, 0, 4) END
    JOIN TIERS T ON T.REFERENCE = CUS.CUSTODIAN
WHERE R.VALUE = '" + colVal + "'"</Expression>
                <Table>SQL</Table>
              </Lookup>
            </PdtColumnDest>
          </destPaths>
        </PdtColumn>
        <PdtColumn>
          <name>CommonId</name>
          <len>0</len>
          <isRequired>true</isRequired>
          <isRelativeToRootNode>true</isRelativeToRootNode>
        </PdtColumn>
        <PdtColumn>
          <name>Currency</name>
          <len>0</len>
          <isRequired>true</isRequired>
          <isRelativeToRootNode>true</isRelativeToRootNode>
          <destPaths>
            <PdtColumnDest>
              <path>//*[local-name() = 'currency']</path>
            </PdtColumnDest>
          </destPaths>
        </PdtColumn>
        <PdtColumn>
          <name>Trade Date</name>
          <len>0</len>
          <isRequired>true</isRequired>
          <isRelativeToRootNode>true</isRelativeToRootNode>
          <destPaths>
            <PdtColumnDest>
              <path>//*[local-name() = 'tradeDate']</path>
              <expression>"$EventType" == "FE" || "$EventType" == "IM" ? (colVal.Trim() == "" ? "" : System.DateTime.ParseExact(colVal, "yyyyMMdd", System.Globalization.CultureInfo.InvariantCulture).ToString("yyyy-MM-dd")) : (lineVal.Split(',')[9].Trim() == "" ? "" : System.DateTime.ParseExact(lineVal.Split(',')[9], "yyyyMMdd", System.Globalization.CultureInfo.InvariantCulture).ToString("yyyy-MM-dd"))</expression>
            </PdtColumnDest>
          </destPaths>
        </PdtColumn>
        <PdtColumn>
          <name>Value Date</name>
          <len>0</len>
          <isRequired>true</isRequired>
          <isRelativeToRootNode>true</isRelativeToRootNode>
          <destPaths>
            <PdtColumnDest>
              <path>//*[local-name() = 'unadjustedDate'] | //*[local-name() = 'adjustedPaymentDate'] | //*[local-name() = 'tradeHeader']/*[local-name() = 'paymentDate']</path>
              <expression>colVal.Trim() == "" ? System.DateTime.ParseExact(lineVal.Split(',')[8], "yyyyMMdd", System.Globalization.CultureInfo.InvariantCulture).ToString("yyyy-MM-dd") : System.DateTime.ParseExact(colVal, "yyyyMMdd", System.Globalization.CultureInfo.InvariantCulture).ToString("yyyy-MM-dd")</expression>
            </PdtColumnDest>
          </destPaths>
        </PdtColumn>
        <PdtColumn>
          <name>Quantity</name>
          <len>0</len>
          <isRequired>true</isRequired>
          <isRelativeToRootNode>true</isRelativeToRootNode>
          <destPaths>
            <PdtColumnDest>
              <path>//*[local-name() = 'numberOfSecurities']</path>
              <expression>"$EventType" == "FE" ? double.Parse(colVal) : 1</expression>
            </PdtColumnDest>
          </destPaths>
        </PdtColumn>
        <PdtColumn>
          <name>Net Amount</name>
          <len>0</len>
          <isRequired>true</isRequired>
          <isRelativeToRootNode>true</isRelativeToRootNode>
          <destPaths>
            <PdtColumnDest>
              <path>//*[local-name() = 'principalSettlement']/*[local-name() = 'amount']/*[local-name() = 'amount']</path>
              <expression>"$EventType" == "FE" ? (double.Parse(lineVal.Split(',')[13]) + double.Parse(lineVal.Split(',')[14]) + double.Parse(lineVal.Split(',')[15])) : double.Parse(colVal)</expression>
            </PdtColumnDest>
          </destPaths>
        </PdtColumn>
        <PdtColumn>
          <name>Bloomberg Ticker</name>
          <len>0</len>
          <isRequired>true</isRequired>
          <isRelativeToRootNode>true</isRelativeToRootNode>
          <destPaths>
            <PdtColumnDest>
              <path>//*[local-name() = 'reference']</path>
              <expression>"$EventType" == "FE" ? colVal : ("$EventType" == "IM" ? "INITIAL MARGIN " : "$EventType" == "MC" ? "MARGIN CALL " : "MONTHLY INTEREST ") + lineVal.Split(',')[7]</expression>
            </PdtColumnDest>
          </destPaths>
        </PdtColumn>
        <PdtColumn>
          <name>Broker fees</name>
          <len>0</len>
          <isRequired>true</isRequired>
          <isRelativeToRootNode>true</isRelativeToRootNode>
          <destPaths>
            <PdtColumnDest>
              <path>//*[local-name() = 'otherPartyPayment'][contains(@*[local-name() = 'paymentTypeScheme'], 'brokerFees')]//*[local-name() = 'amount']</path>
            </PdtColumnDest>
          </destPaths>
        </PdtColumn>
        <PdtColumn>
          <name>Counterparty fees</name>
          <len>0</len>
          <isRequired>true</isRequired>
          <isRelativeToRootNode>true</isRelativeToRootNode>
          <destPaths>
            <PdtColumnDest>
              <path>//*[local-name() = 'otherPartyPayment'][contains(@*[local-name() = 'paymentTypeScheme'], 'couterpartyFees')]//*[local-name() = 'amount']</path>
            </PdtColumnDest>
          </destPaths>
        </PdtColumn>
        <PdtColumn>
          <name>Market fees</name>
          <len>0</len>
          <isRequired>true</isRequired>
          <isRelativeToRootNode>true</isRelativeToRootNode>
          <destPaths>
            <PdtColumnDest>
              <path>//*[local-name() = 'otherPartyPayment'][contains(@*[local-name() = 'paymentTypeScheme'], 'marketFees')]//*[local-name() = 'amount']</path>
            </PdtColumnDest>
          </destPaths>
        </PdtColumn>
      </columns>
    </PdtTransformation>
    <PdtTransformation>
      <name>BBH_MC_Orig</name>
      <type>Csv2Xml</type>
      <label>Infomediary Margin Calls Original</label>
      <category>Medio</category>
      <templateFile>BBH_IM.xml</templateFile>
      <repeatingRootPath>//*[local-name() = 'import']</repeatingRootPath>
      <repeatingChildrenPath>//*[local-name() = 'trade']</repeatingChildrenPath>
      <csvSrcSeparator>44</csvSrcSeparator>
      <csvDestSeparator>0</csvDestSeparator>
      <processingCondition>"$EventType" == "MC" &amp;&amp; (lineVal.Split('$CsvSrcSep')[3] == "GSILGB2X" || (lineVal.Split('$CsvSrcSep')[3] == "JPMSGB2L" &amp;&amp; "$OnBoarded" != ""))</processingCondition>
      <variables>
        <PdtVariable>
          <name>EventType</name>
          <expressionBefore>lineVal.Split(',')[0] == "Clearing Broker Fees" ? "FE" : lineVal.Split(',')[0] == "Initial Margin" ? "IM" : lineVal.Split(',')[0] == "Monthly Interest" ? "MI" : lineVal.Split(',')[0] == "Clearer Margin Calls" ? "MC" : ""</expressionBefore>
        </PdtVariable>
        <PdtVariable>
          <name>OnBoarded</name>
          <expressionBefore>lineVal.Split('$CsvSrcSep')[6]</expressionBefore>
          <Lookup>
            <Table>MEDIO_BBH_FUNDFILTER</Table>
            <ColumnIndex>0</ColumnIndex>
          </Lookup>
        </PdtVariable>
      </variables>
      <columns>
        <PdtColumn>
          <name>Event Type</name>
          <len>0</len>
          <isRequired>true</isRequired>
          <isRelativeToRootNode>true</isRelativeToRootNode>
          <destPaths>
            <PdtColumnDest>
              <path>//*[local-name() = 'businessEvent']</path>
              <expression>"$EventType" == "FE" ? "Clearing Broker Fees" : "$EventType" == "IM" ? "Initial Margin" : "$EventType" == "MI" ? "Clearing Broker Interests" : "Clearer Margin Call"</expression>
            </PdtColumnDest>
          </destPaths>
        </PdtColumn>
        <PdtColumn>
          <name>Sender Reference</name>
          <len>0</len>
          <isRequired>true</isRequired>
          <isRelativeToRootNode>true</isRelativeToRootNode>
          <destPaths>
            <PdtColumnDest>
              <path>//*[local-name() = 'tradeId'][contains(@*[local-name() = 'tradeIdScheme'], 'tradeId/externalReference')]</path>
            </PdtColumnDest>
          </destPaths>
        </PdtColumn>
        <PdtColumn>
          <name>Clearer Reference</name>
          <len>0</len>
          <isRequired>true</isRequired>
          <isRelativeToRootNode>true</isRelativeToRootNode>
        </PdtColumn>
        <PdtColumn>
          <name>Clearing Broker BIC</name>
          <len>0</len>
          <isRequired>true</isRequired>
          <isRelativeToRootNode>true</isRelativeToRootNode>
        </PdtColumn>
        <PdtColumn>
          <name>Executing Broker</name>
          <len>0</len>
          <isRequired>true</isRequired>
          <isRelativeToRootNode>true</isRelativeToRootNode>
        </PdtColumn>
        <PdtColumn>
          <name>Account</name>
          <len>0</len>
          <isRequired>true</isRequired>
          <isRelativeToRootNode>true</isRelativeToRootNode>
          <destPaths>
            <PdtColumnDest>
              <path>
//*[local-name() = 'portfolioName'][contains(@*[local-name() = 'portfolioNameScheme'], 'portfolioName/id')] |
//*[local-name() = 'externalReference']/*[local-name() = 'name' and text() = 'RootPortfolio']/../*[local-name() = 'value']</path>
              <Lookup>
                <Expression>@"
SELECT F_ORI.IDENT
FROM BO_TREASURY_ACCOUNT A
    JOIN BO_TREASURY_EXT_REF R ON R.ACC_ID = A.ID
    JOIN BO_TREASURY_EXT_REF_DEF D ON D.REF_ID = R.REF_ID AND D.REF_NAME = 'CBAccountID'
    JOIN FOLIO F_MIR ON F_MIR.IDENT = A.ACCOUNT_ADJUSTMENT_FOLIO
    JOIN FOLIO F_ORI ON F_ORI.MGR = F_MIR.MGR AND F_ORI.NAME LIKE '% Cash'
WHERE R.VALUE = '" + colVal + "'"</Expression>
                <Table>SQL</Table>
              </Lookup>
            </PdtColumnDest>
            <PdtColumnDest>
              <path>
//*[local-name() = 'partyTradeIdentifier']//*[local-name() = 'partyId'][contains(@*[local-name() = 'partyIdScheme'], 'id')] |
//*[local-name() = 'extendedPartyTradeInformation']//*[local-name() = 'partyId'][contains(@*[local-name() = 'partyIdScheme'], 'id')] |
//*[local-name() = 'buyerPartyReference']//*[local-name() = 'partyId'][contains(@*[local-name() = 'partyIdScheme'], 'id')] |
//*[local-name() = 'entityPartyReference']//*[local-name() = 'partyId'][contains(@*[local-name() = 'partyIdScheme'], 'id')] |
//*[local-name() = 'entity']//*[local-name() = 'partyId'][contains(@*[local-name() = 'partyIdScheme'], 'id')]</path>
              <Lookup>
                <Expression>@"
SELECT A.ENTITY
FROM BO_TREASURY_ACCOUNT A
    JOIN BO_TREASURY_EXT_REF R ON R.ACC_ID = A.ID
    JOIN BO_TREASURY_EXT_REF_DEF D ON D.REF_ID = R.REF_ID AND D.REF_NAME = 'CBAccountID'
WHERE R.VALUE = '" + colVal + "'"</Expression>
                <Table>SQL</Table>
              </Lookup>
            </PdtColumnDest>
            <PdtColumnDest>
              <path>
//*[local-name() = 'counterparty']//*[local-name() = 'partyId'][contains(@*[local-name() = 'partyIdScheme'], 'id')] |
//*[local-name() = 'sellerPartyReference']//*[local-name() = 'partyId'][contains(@*[local-name() = 'partyIdScheme'], 'id')]</path>
              <Lookup>
                <Expression>@"
SELECT T.IDENT
FROM BO_TREASURY_ACCOUNT A
    JOIN BO_TREASURY_EXT_REF R ON R.ACC_ID = A.ID
    JOIN BO_TREASURY_EXT_REF_DEF D ON D.REF_ID = R.REF_ID AND D.REF_NAME = 'CBAccountID'
    JOIN TIERS T ON T.REFERENCE = A.CUSTODIAN
WHERE R.VALUE = '" + colVal + "'"</Expression>
                <Table>SQL</Table>
              </Lookup>
            </PdtColumnDest>
            <PdtColumnDest>
              <path>//*[local-name() = 'accountId']</path>
              <Lookup>
                <Expression>@"
SELECT A_ORI.ID
FROM BO_TREASURY_ACCOUNT A_MIR
    JOIN BO_TREASURY_EXT_REF R ON R.ACC_ID = A_MIR.ID
    JOIN BO_TREASURY_EXT_REF_DEF D ON D.REF_ID = R.REF_ID AND D.REF_NAME = 'CBAccountID'
    JOIN BO_TREASURY_ACCOUNT A_ORI ON A_ORI.ACCOUNT_AT_CUSTODIAN = CASE WHEN (A_MIR.ACCOUNT_AT_CUSTODIAN LIKE 'DB%' OR A_MIR.ACCOUNT_AT_CUSTODIAN LIKE 'LU%') THEN SUBSTR(A_MIR.ACCOUNT_AT_CUSTODIAN, 0, 14) ELSE SUBSTR(A_MIR.ACCOUNT_AT_CUSTODIAN, 0, 4) END
WHERE R.VALUE = '" + colVal + "'"</Expression>
                <Table>SQL</Table>
              </Lookup>
            </PdtColumnDest>
            <PdtColumnDest>
              <path>//*[local-name() = 'depositary']//*[local-name() = 'partyId'][contains(@*[local-name() = 'partyIdScheme'], 'id')]</path>
              <Lookup>
                <Expression>@"
SELECT T.IDENT
FROM BO_TREASURY_ACCOUNT A
    JOIN BO_TREASURY_EXT_REF R ON R.ACC_ID = A.ID
    JOIN BO_TREASURY_EXT_REF_DEF D ON D.REF_ID = R.REF_ID AND D.REF_NAME = 'CBAccountID'
    JOIN BO_TREASURY_ACCOUNT CUS ON CUS.ACCOUNT_AT_CUSTODIAN = CASE WHEN (A.ACCOUNT_AT_CUSTODIAN LIKE 'DB%' OR A.ACCOUNT_AT_CUSTODIAN LIKE 'LU%') THEN SUBSTR(A.ACCOUNT_AT_CUSTODIAN, 0, 14) ELSE SUBSTR(A.ACCOUNT_AT_CUSTODIAN, 0, 4) END
    JOIN TIERS T ON T.REFERENCE = CUS.CUSTODIAN
WHERE R.VALUE = '" + colVal + "'"</Expression>
                <Table>SQL</Table>
              </Lookup>
            </PdtColumnDest>
          </destPaths>
        </PdtColumn>
        <PdtColumn>
          <name>CommonId</name>
          <len>0</len>
          <isRequired>true</isRequired>
          <isRelativeToRootNode>true</isRelativeToRootNode>
        </PdtColumn>
        <PdtColumn>
          <name>Currency</name>
          <len>0</len>
          <isRequired>true</isRequired>
          <isRelativeToRootNode>true</isRelativeToRootNode>
          <destPaths>
            <PdtColumnDest>
              <path>//*[local-name() = 'currency']</path>
            </PdtColumnDest>
          </destPaths>
        </PdtColumn>
        <PdtColumn>
          <name>Trade Date</name>
          <len>0</len>
          <isRequired>true</isRequired>
          <isRelativeToRootNode>true</isRelativeToRootNode>
          <destPaths>
            <PdtColumnDest>
              <path>//*[local-name() = 'tradeDate']</path>
              <expression>"$EventType" == "FE" || "$EventType" == "IM" ? (colVal.Trim() == "" ? "" : System.DateTime.ParseExact(colVal, "yyyyMMdd", System.Globalization.CultureInfo.InvariantCulture).ToString("yyyy-MM-dd")) : (lineVal.Split(',')[9].Trim() == "" ? "" : System.DateTime.ParseExact(lineVal.Split(',')[9], "yyyyMMdd", System.Globalization.CultureInfo.InvariantCulture).ToString("yyyy-MM-dd"))</expression>
            </PdtColumnDest>
          </destPaths>
        </PdtColumn>
        <PdtColumn>
          <name>Value Date</name>
          <len>0</len>
          <isRequired>true</isRequired>
          <isRelativeToRootNode>true</isRelativeToRootNode>
          <destPaths>
            <PdtColumnDest>
              <path>//*[local-name() = 'unadjustedDate'] | //*[local-name() = 'adjustedPaymentDate'] | //*[local-name() = 'tradeHeader']/*[local-name() = 'paymentDate']</path>
              <expression>colVal.Trim() == "" ? System.DateTime.ParseExact(lineVal.Split(',')[8], "yyyyMMdd", System.Globalization.CultureInfo.InvariantCulture).ToString("yyyy-MM-dd") : System.DateTime.ParseExact(colVal, "yyyyMMdd", System.Globalization.CultureInfo.InvariantCulture).ToString("yyyy-MM-dd")</expression>
            </PdtColumnDest>
          </destPaths>
        </PdtColumn>
        <PdtColumn>
          <name>Quantity</name>
          <len>0</len>
          <isRequired>true</isRequired>
          <isRelativeToRootNode>true</isRelativeToRootNode>
          <destPaths>
            <PdtColumnDest>
              <path>//*[local-name() = 'numberOfSecurities']</path>
              <expression>"$EventType" == "FE" ? double.Parse(colVal) : 1</expression>
            </PdtColumnDest>
          </destPaths>
        </PdtColumn>
        <PdtColumn>
          <name>Net Amount</name>
          <len>0</len>
          <isRequired>true</isRequired>
          <isRelativeToRootNode>true</isRelativeToRootNode>
          <destPaths>
            <PdtColumnDest>
              <path>//*[local-name() = 'principalSettlement']/*[local-name() = 'amount']/*[local-name() = 'amount']</path>
              <expression>"$EventType" == "FE" ? (double.Parse(lineVal.Split(',')[13]) + double.Parse(lineVal.Split(',')[14]) + double.Parse(lineVal.Split(',')[15])) : double.Parse(colVal)</expression>
            </PdtColumnDest>
          </destPaths>
        </PdtColumn>
        <PdtColumn>
          <name>Bloomberg Ticker</name>
          <len>0</len>
          <isRequired>true</isRequired>
          <isRelativeToRootNode>true</isRelativeToRootNode>
          <destPaths>
            <PdtColumnDest>
              <path>//*[local-name() = 'reference']</path>
              <expression>"$EventType" == "FE" ? colVal : ("$EventType" == "IM" ? "INITIAL MARGIN " : "$EventType" == "MC" ? "MARGIN CALL " : "MONTHLY INTEREST ") + lineVal.Split(',')[7]</expression>
            </PdtColumnDest>
          </destPaths>
        </PdtColumn>
        <PdtColumn>
          <name>Broker fees</name>
          <len>0</len>
          <isRequired>true</isRequired>
          <isRelativeToRootNode>true</isRelativeToRootNode>
          <destPaths>
            <PdtColumnDest>
              <path>//*[local-name() = 'otherPartyPayment'][contains(@*[local-name() = 'paymentTypeScheme'], 'brokerFees')]//*[local-name() = 'amount']</path>
            </PdtColumnDest>
          </destPaths>
        </PdtColumn>
        <PdtColumn>
          <name>Counterparty fees</name>
          <len>0</len>
          <isRequired>true</isRequired>
          <isRelativeToRootNode>true</isRelativeToRootNode>
          <destPaths>
            <PdtColumnDest>
              <path>//*[local-name() = 'otherPartyPayment'][contains(@*[local-name() = 'paymentTypeScheme'], 'couterpartyFees')]//*[local-name() = 'amount']</path>
            </PdtColumnDest>
          </destPaths>
        </PdtColumn>
        <PdtColumn>
          <name>Market fees</name>
          <len>0</len>
          <isRequired>true</isRequired>
          <isRelativeToRootNode>true</isRelativeToRootNode>
          <destPaths>
            <PdtColumnDest>
              <path>//*[local-name() = 'otherPartyPayment'][contains(@*[local-name() = 'paymentTypeScheme'], 'marketFees')]//*[local-name() = 'amount']</path>
            </PdtColumnDest>
          </destPaths>
        </PdtColumn>
      </columns>
    </PdtTransformation>
    <PdtTransformation>
      <name>BBH_MC_Mirr</name>
      <type>Csv2Xml</type>
      <label>Infomediary Margin Calls Mirroiring</label>
      <category>Medio</category>
      <templateFile>BBH_IM.xml</templateFile>
      <repeatingRootPath>//*[local-name() = 'import']</repeatingRootPath>
      <repeatingChildrenPath>//*[local-name() = 'trade']</repeatingChildrenPath>
      <csvSrcSeparator>44</csvSrcSeparator>
      <csvDestSeparator>0</csvDestSeparator>
      <processingCondition>"$EventType" == "MC" &amp;&amp; (lineVal.Split('$CsvSrcSep')[3] == "GSILGB2X" || (lineVal.Split('$CsvSrcSep')[3] == "JPMSGB2L" &amp;&amp; "$OnBoarded" != ""))</processingCondition>
      <variables>
        <PdtVariable>
          <name>EventType</name>
          <expressionBefore>lineVal.Split(',')[0] == "Clearing Broker Fees" ? "FE" : lineVal.Split(',')[0] == "Initial Margin" ? "IM" : lineVal.Split(',')[0] == "Monthly Interest" ? "MI" : lineVal.Split(',')[0] == "Clearer Margin Calls" ? "MC" : ""</expressionBefore>
        </PdtVariable>
        <PdtVariable>
          <name>OnBoarded</name>
          <expressionBefore>lineVal.Split('$CsvSrcSep')[6]</expressionBefore>
          <Lookup>
            <Table>MEDIO_BBH_FUNDFILTER</Table>
            <ColumnIndex>0</ColumnIndex>
          </Lookup>
        </PdtVariable>
      </variables>
      <columns>
        <PdtColumn>
          <name>Event Type</name>
          <len>0</len>
          <isRequired>true</isRequired>
          <isRelativeToRootNode>true</isRelativeToRootNode>
          <destPaths>
            <PdtColumnDest>
              <path>//*[local-name() = 'businessEvent']</path>
              <expression>"$EventType" == "FE" ? "Clearing Broker Fees" : "$EventType" == "IM" ? "Initial Margin" : "$EventType" == "MI" ? "Clearing Broker Interests" : "Clearer Margin Call"</expression>
            </PdtColumnDest>
          </destPaths>
        </PdtColumn>
        <PdtColumn>
          <name>Sender Reference</name>
          <len>0</len>
          <isRequired>true</isRequired>
          <isRelativeToRootNode>true</isRelativeToRootNode>
          <destPaths>
            <PdtColumnDest>
              <path>//*[local-name() = 'tradeId'][contains(@*[local-name() = 'tradeIdScheme'], 'tradeId/externalReference')]</path>
              <expression>colVal + "_Mir"</expression>
            </PdtColumnDest>
          </destPaths>
        </PdtColumn>
        <PdtColumn>
          <name>Clearer Reference</name>
          <len>0</len>
          <isRequired>true</isRequired>
          <isRelativeToRootNode>true</isRelativeToRootNode>
        </PdtColumn>
        <PdtColumn>
          <name>Clearing Broker BIC</name>
          <len>0</len>
          <isRequired>true</isRequired>
          <isRelativeToRootNode>true</isRelativeToRootNode>
        </PdtColumn>
        <PdtColumn>
          <name>Executing Broker</name>
          <len>0</len>
          <isRequired>true</isRequired>
          <isRelativeToRootNode>true</isRelativeToRootNode>
        </PdtColumn>
        <PdtColumn>
          <name>Account</name>
          <len>0</len>
          <isRequired>true</isRequired>
          <isRelativeToRootNode>true</isRelativeToRootNode>
          <destPaths>
            <PdtColumnDest>
              <path>
//*[local-name() = 'portfolioName'][contains(@*[local-name() = 'portfolioNameScheme'], 'portfolioName/id')] |
//*[local-name() = 'externalReference']/*[local-name() = 'name' and text() = 'RootPortfolio']/../*[local-name() = 'value']</path>
              <Lookup>
                <Expression>@"
SELECT A.ACCOUNT_ADJUSTMENT_FOLIO
FROM BO_TREASURY_ACCOUNT A
    JOIN BO_TREASURY_EXT_REF R ON R.ACC_ID = A.ID
    JOIN BO_TREASURY_EXT_REF_DEF D ON D.REF_ID = R.REF_ID AND D.REF_NAME = 'CBAccountID'
WHERE R.VALUE = '" + colVal + "'"</Expression>
                <Table>SQL</Table>
              </Lookup>
            </PdtColumnDest>
            <PdtColumnDest>
              <path>
//*[local-name() = 'partyTradeIdentifier']//*[local-name() = 'partyId'][contains(@*[local-name() = 'partyIdScheme'], 'id')] |
//*[local-name() = 'extendedPartyTradeInformation']//*[local-name() = 'partyId'][contains(@*[local-name() = 'partyIdScheme'], 'id')] |
//*[local-name() = 'buyerPartyReference']//*[local-name() = 'partyId'][contains(@*[local-name() = 'partyIdScheme'], 'id')] |
//*[local-name() = 'entityPartyReference']//*[local-name() = 'partyId'][contains(@*[local-name() = 'partyIdScheme'], 'id')] |
//*[local-name() = 'entity']//*[local-name() = 'partyId'][contains(@*[local-name() = 'partyIdScheme'], 'id')]</path>
              <Lookup>
                <Expression>@"
SELECT A.ENTITY
FROM BO_TREASURY_ACCOUNT A
    JOIN BO_TREASURY_EXT_REF R ON R.ACC_ID = A.ID
    JOIN BO_TREASURY_EXT_REF_DEF D ON D.REF_ID = R.REF_ID AND D.REF_NAME = 'CBAccountID'
WHERE R.VALUE = '" + colVal + "'"</Expression>
                <Table>SQL</Table>
              </Lookup>
            </PdtColumnDest>
            <PdtColumnDest>
              <path>
//*[local-name() = 'counterparty']//*[local-name() = 'partyId'][contains(@*[local-name() = 'partyIdScheme'], 'id')] |
//*[local-name() = 'sellerPartyReference']//*[local-name() = 'partyId'][contains(@*[local-name() = 'partyIdScheme'], 'id')]</path>
              <Lookup>
                <Expression>@"
SELECT T.IDENT
FROM BO_TREASURY_ACCOUNT A
    JOIN BO_TREASURY_EXT_REF R ON R.ACC_ID = A.ID
    JOIN BO_TREASURY_EXT_REF_DEF D ON D.REF_ID = R.REF_ID AND D.REF_NAME = 'CBAccountID'
    JOIN BO_TREASURY_ACCOUNT CUS ON CUS.ACCOUNT_AT_CUSTODIAN = CASE WHEN (A.ACCOUNT_AT_CUSTODIAN LIKE 'DB%' OR A.ACCOUNT_AT_CUSTODIAN LIKE 'LU%') THEN SUBSTR(A.ACCOUNT_AT_CUSTODIAN, 0, 14) ELSE SUBSTR(A.ACCOUNT_AT_CUSTODIAN, 0, 4) END
    JOIN TIERS T ON T.REFERENCE = CUS.CUSTODIAN
WHERE R.VALUE = '" + colVal + "'"</Expression>
                <Table>SQL</Table>
              </Lookup>
            </PdtColumnDest>
            <PdtColumnDest>
              <path>//*[local-name() = 'accountId']</path>
              <Lookup>
                <Expression>@"
SELECT A.ID
FROM BO_TREASURY_ACCOUNT A
    JOIN BO_TREASURY_EXT_REF R ON R.ACC_ID = A.ID
    JOIN BO_TREASURY_EXT_REF_DEF D ON D.REF_ID = R.REF_ID AND D.REF_NAME = 'CBAccountID'
WHERE R.VALUE = '" + colVal + "'"</Expression>
                <Table>SQL</Table>
              </Lookup>
            </PdtColumnDest>
            <PdtColumnDest>
              <path>//*[local-name() = 'depositary']//*[local-name() = 'partyId'][contains(@*[local-name() = 'partyIdScheme'], 'id')]</path>
              <Lookup>
                <Expression>@"
SELECT T.IDENT
FROM BO_TREASURY_ACCOUNT A
    JOIN BO_TREASURY_EXT_REF R ON R.ACC_ID = A.ID
    JOIN BO_TREASURY_EXT_REF_DEF D ON D.REF_ID = R.REF_ID AND D.REF_NAME = 'CBAccountID'
    JOIN TIERS T ON T.REFERENCE = A.CUSTODIAN
WHERE R.VALUE = '" + colVal + "'"</Expression>
                <Table>SQL</Table>
              </Lookup>
            </PdtColumnDest>
          </destPaths>
        </PdtColumn>
        <PdtColumn>
          <name>CommonId</name>
          <len>0</len>
          <isRequired>true</isRequired>
          <isRelativeToRootNode>true</isRelativeToRootNode>
        </PdtColumn>
        <PdtColumn>
          <name>Currency</name>
          <len>0</len>
          <isRequired>true</isRequired>
          <isRelativeToRootNode>true</isRelativeToRootNode>
          <destPaths>
            <PdtColumnDest>
              <path>//*[local-name() = 'currency']</path>
            </PdtColumnDest>
          </destPaths>
        </PdtColumn>
        <PdtColumn>
          <name>Trade Date</name>
          <len>0</len>
          <isRequired>true</isRequired>
          <isRelativeToRootNode>true</isRelativeToRootNode>
          <destPaths>
            <PdtColumnDest>
              <path>//*[local-name() = 'tradeDate']</path>
              <expression>"$EventType" == "FE" || "$EventType" == "IM" ? (colVal.Trim() == "" ? "" : System.DateTime.ParseExact(colVal, "yyyyMMdd", System.Globalization.CultureInfo.InvariantCulture).ToString("yyyy-MM-dd")) : (lineVal.Split(',')[9].Trim() == "" ? "" : System.DateTime.ParseExact(lineVal.Split(',')[9], "yyyyMMdd", System.Globalization.CultureInfo.InvariantCulture).ToString("yyyy-MM-dd"))</expression>
            </PdtColumnDest>
          </destPaths>
        </PdtColumn>
        <PdtColumn>
          <name>Value Date</name>
          <len>0</len>
          <isRequired>true</isRequired>
          <isRelativeToRootNode>true</isRelativeToRootNode>
          <destPaths>
            <PdtColumnDest>
              <path>//*[local-name() = 'unadjustedDate'] | //*[local-name() = 'adjustedPaymentDate'] | //*[local-name() = 'tradeHeader']/*[local-name() = 'paymentDate']</path>
              <expression>colVal.Trim() == "" ? System.DateTime.ParseExact(lineVal.Split(',')[8], "yyyyMMdd", System.Globalization.CultureInfo.InvariantCulture).ToString("yyyy-MM-dd") : System.DateTime.ParseExact(colVal, "yyyyMMdd", System.Globalization.CultureInfo.InvariantCulture).ToString("yyyy-MM-dd")</expression>
            </PdtColumnDest>
          </destPaths>
        </PdtColumn>
        <PdtColumn>
          <name>Quantity</name>
          <len>0</len>
          <isRequired>true</isRequired>
          <isRelativeToRootNode>true</isRelativeToRootNode>
          <destPaths>
            <PdtColumnDest>
              <path>//*[local-name() = 'numberOfSecurities']</path>
              <expression>"$EventType" == "FE" ? double.Parse(colVal) : 1</expression>
            </PdtColumnDest>
          </destPaths>
        </PdtColumn>
        <PdtColumn>
          <name>Net Amount</name>
          <len>0</len>
          <isRequired>true</isRequired>
          <isRelativeToRootNode>true</isRelativeToRootNode>
          <destPaths>
            <PdtColumnDest>
              <path>//*[local-name() = 'principalSettlement']/*[local-name() = 'amount']/*[local-name() = 'amount']</path>
              <expression>"$EventType" == "FE" ? (double.Parse(lineVal.Split(',')[13]) + double.Parse(lineVal.Split(',')[14]) + double.Parse(lineVal.Split(',')[15])) : -1 * double.Parse(colVal)</expression>
            </PdtColumnDest>
          </destPaths>
        </PdtColumn>
        <PdtColumn>
          <name>Bloomberg Ticker</name>
          <len>0</len>
          <isRequired>true</isRequired>
          <isRelativeToRootNode>true</isRelativeToRootNode>
          <destPaths>
            <PdtColumnDest>
              <path>//*[local-name() = 'reference']</path>
              <expression>"$EventType" == "FE" ? colVal : ("$EventType" == "IM" ? "INITIAL MARGIN " : "$EventType" == "MC" ? "MARGIN CALL " : "MONTHLY INTEREST ") + lineVal.Split(',')[7]</expression>
            </PdtColumnDest>
          </destPaths>
        </PdtColumn>
        <PdtColumn>
          <name>Broker fees</name>
          <len>0</len>
          <isRequired>true</isRequired>
          <isRelativeToRootNode>true</isRelativeToRootNode>
          <destPaths>
            <PdtColumnDest>
              <path>//*[local-name() = 'otherPartyPayment'][contains(@*[local-name() = 'paymentTypeScheme'], 'brokerFees')]//*[local-name() = 'amount']</path>
            </PdtColumnDest>
          </destPaths>
        </PdtColumn>
        <PdtColumn>
          <name>Counterparty fees</name>
          <len>0</len>
          <isRequired>true</isRequired>
          <isRelativeToRootNode>true</isRelativeToRootNode>
          <destPaths>
            <PdtColumnDest>
              <path>//*[local-name() = 'otherPartyPayment'][contains(@*[local-name() = 'paymentTypeScheme'], 'couterpartyFees')]//*[local-name() = 'amount']</path>
            </PdtColumnDest>
          </destPaths>
        </PdtColumn>
        <PdtColumn>
          <name>Market fees</name>
          <len>0</len>
          <isRequired>true</isRequired>
          <isRelativeToRootNode>true</isRelativeToRootNode>
          <destPaths>
            <PdtColumnDest>
              <path>//*[local-name() = 'otherPartyPayment'][contains(@*[local-name() = 'paymentTypeScheme'], 'marketFees')]//*[local-name() = 'amount']</path>
            </PdtColumnDest>
          </destPaths>
        </PdtColumn>
      </columns>
    </PdtTransformation>
    <PdtTransformation>
      <name>BBH_DIM_Trade</name>
      <type>Csv2Xml</type>
      <label>Infomediary DIM Trade</label>
      <category>Medio</category>
      <templateFile>BBH_DIM_Trade_Nostro.xml</templateFile>
      <repeatingRootPath>//*[local-name() = 'import']</repeatingRootPath>
      <repeatingChildrenPath>//*[local-name() = 'trade']</repeatingChildrenPath>
      <csvSrcSeparator>124</csvSrcSeparator>
      <csvDestSeparator>0</csvDestSeparator>
      <processingCondition>("$SecurityType" == "OPT" || "$SecurityType" == "FUT") &amp;&amp; lineVal.Split('|')[1] == "N"</processingCondition>
      <variables>
        <PdtVariable>
          <name>TransactionType</name>
          <expressionBefore>lineVal.Split('|')[5]</expressionBefore>
        </PdtVariable>
        <PdtVariable>
          <name>SecurityType</name>
          <expressionBefore>lineVal.Split('|')[6]</expressionBefore>
        </PdtVariable>
        <PdtVariable>
          <name>DealAmount</name>
          <expressionBefore>lineVal.Split('|')[16] == "" ? 0 : double.Parse(lineVal.Split('|')[16])</expressionBefore>
        </PdtVariable>
        <PdtVariable>
          <name>Entity</name>
          <Lookup>
            <Expression>@"
SELECT ENTITE FROM (
SELECT CONNECT_BY_ROOT IDENT IDENT, CONNECT_BY_ROOT MGR MGR, SYS_CONNECT_BY_PATH(NAME, ':') PATH, CONNECT_BY_ROOT ENTITE ENTITE, LEVEL
FROM FOLIO WHERE IDENT =
    (SELECT R.VALUE AS ROOTPORTFOLIO
    FROM BO_TREASURY_ACCOUNT A
        JOIN BO_TREASURY_EXT_REF R ON R.ACC_ID = A.ID
        JOIN BO_TREASURY_EXT_REF_DEF D ON D.REF_ID = R.REF_ID AND D.REF_NAME = 'RootPortfolio'
    WHERE A.ACCOUNT_AT_CUSTODIAN IS NOT NULL AND A.ACCOUNT_AT_CUSTODIAN = '" + lineVal.Split('|')[3] + @"')
CONNECT BY PRIOR IDENT = MGR
) WHERE ""LEVEL"" = 3"</Expression>
            <Table>SQL</Table>
          </Lookup>
        </PdtVariable>
        <PdtVariable>
          <name>Ctpy</name>
          <Lookup>
            <Expression>"SELECT IDENT FROM TIERS WHERE REFERENCE = '" + lineVal.Split('|')[35] + "'"</Expression>
            <Table>SQL</Table>
          </Lookup>
        </PdtVariable>
      </variables>
      <columns>
        <PdtColumn>
          <name>Sender's Message Reference Id</name>
          <len>0</len>
          <isRequired>true</isRequired>
          <isRelativeToRootNode>true</isRelativeToRootNode>
          <destPaths>
            <PdtColumnDest>
              <path>//*[local-name() = 'tradeId'][contains(@*[local-name() = 'tradeIdScheme'], 'tradeId/externalReference')]</path>
            </PdtColumnDest>
          </destPaths>
        </PdtColumn>
        <PdtColumn>
          <name>Message Type/Function</name>
          <len>0</len>
          <isRequired>true</isRequired>
          <isRelativeToRootNode>true</isRelativeToRootNode>
          <destPaths>
            <PdtColumnDest>
              <path>//*[local-name() = 'trade']/@*[local-name() = 'persistenceType']</path>
              <expression>"UpdateOrCreate"</expression>
            </PdtColumnDest>
            <PdtColumnDest>
              <path>//*[local-name() = 'businessEvent']</path>
              <expression>"Purchase/Sale"</expression>
            </PdtColumnDest>
            <PdtColumnDest>
              <path>//*[local-name() = 'backofficeStatus']</path>
              <expression>"No Status"</expression>
            </PdtColumnDest>
            <PdtColumnDest>
              <path>//*[local-name() = 'extendedPartyTradeInformation']//*[local-name() = 'comment']</path>
              <expression>DateTime.Now.ToString("yyyyMMdd-HH:mm:ss")</expression>
            </PdtColumnDest>
          </destPaths>
        </PdtColumn>
        <PdtColumn>
          <name>Previous Message Reference ID</name>
          <len>0</len>
          <isRequired>true</isRequired>
          <isRelativeToRootNode>true</isRelativeToRootNode>
        </PdtColumn>
        <PdtColumn>
          <name>Portfolio Code/Custodian Safekeeping Account</name>
          <len>0</len>
          <isRequired>true</isRequired>
          <isRelativeToRootNode>true</isRelativeToRootNode>
          <destPaths>
            <PdtColumnDest>
              <path>
//*[local-name() = 'portfolioName'][contains(@*[local-name() = 'portfolioNameScheme'], 'portfolioName/id')] |
//*[local-name() = 'externalReference']/*[local-name() = 'name' and text() = 'RootPortfolio']/../*[local-name() = 'value']</path>
              <Lookup>
                <Expression>@"
SELECT R.VALUE AS ROOTPORTFOLIO
FROM BO_TREASURY_ACCOUNT A
    JOIN BO_TREASURY_EXT_REF R ON R.ACC_ID = A.ID
    JOIN BO_TREASURY_EXT_REF_DEF D ON D.REF_ID = R.REF_ID AND D.REF_NAME = 'RootPortfolio'
WHERE A.ACCOUNT_AT_CUSTODIAN IS NOT NULL AND A.ACCOUNT_AT_CUSTODIAN = '" + colVal + "'"</Expression>
                <Table>SQL</Table>
              </Lookup>
            </PdtColumnDest>
            <PdtColumnDest>
              <path>
//*[local-name() = 'partyTradeIdentifier']//*[local-name() = 'partyId'][contains(@*[local-name() = 'partyIdScheme'], 'id')] |
//*[local-name() = 'extendedPartyTradeInformation']//*[local-name() = 'partyId'][contains(@*[local-name() = 'partyIdScheme'], 'id')] |
//*[local-name() = 'entityPartyReference']//*[local-name() = 'partyId'][contains(@*[local-name() = 'partyIdScheme'], 'id')] |
//*[local-name() = 'orderer']//*[local-name() = 'partyId'][contains(@*[local-name() = 'partyIdScheme'], 'id')] |
//*[local-name() = 'entity']//*[local-name() = 'partyId'][contains(@*[local-name() = 'partyIdScheme'], 'id')]</path>
              <expression>"$Entity"</expression>
            </PdtColumnDest>
            <PdtColumnDest>
              <path>//*[local-name() = 'buyerPartyReference']//*[local-name() = 'partyId'][contains(@*[local-name() = 'partyIdScheme'], 'id')]</path>
              <expression>"$TransactionType" == "BY" ? $Entity : $Ctpy</expression>
            </PdtColumnDest>
            <PdtColumnDest>
              <path>//*[local-name() = 'sellerPartyReference']//*[local-name() = 'partyId'][contains(@*[local-name() = 'partyIdScheme'], 'id')]</path>
              <expression>"$TransactionType" == "SL" ? $Entity : $Ctpy</expression>
            </PdtColumnDest>
            <PdtColumnDest>
              <path>//*[local-name() = 'depositary']//*[local-name() = 'partyId'][contains(@*[local-name() = 'partyIdScheme'], 'id')]</path>
              <Lookup>
                <Expression>"SELECT DEPOSITARY FROM BO_TREASURY_ACCOUNT WHERE ACCOUNT_AT_CUSTODIAN = '" + colVal + "'"</Expression>
                <Table>SQL</Table>
              </Lookup>
            </PdtColumnDest>
            <PdtColumnDest>
              <path>//*[local-name() = 'counterparty']//*[local-name() = 'partyId'][contains(@*[local-name() = 'partyIdScheme'], 'id')]</path>
              <expression>"$Ctpy"</expression>
            </PdtColumnDest>
          </destPaths>
        </PdtColumn>
        <PdtColumn>
          <name>Account Name</name>
          <len>0</len>
          <isRequired>true</isRequired>
          <isRelativeToRootNode>true</isRelativeToRootNode>
        </PdtColumn>
        <PdtColumn>
          <name>Transaction Type</name>
          <len>0</len>
          <isRequired>true</isRequired>
          <isRelativeToRootNode>true</isRelativeToRootNode>
        </PdtColumn>
        <PdtColumn>
          <name>Security Type</name>
          <len>0</len>
          <isRequired>true</isRequired>
          <isRelativeToRootNode>true</isRelativeToRootNode>
        </PdtColumn>
        <PdtColumn>
          <name>Security Identifier</name>
          <len>0</len>
          <isRequired>true</isRequired>
          <isRelativeToRootNode>true</isRelativeToRootNode>
        </PdtColumn>
        <PdtColumn>
          <name>Security Name</name>
          <len>0</len>
          <isRequired>true</isRequired>
          <isRelativeToRootNode>true</isRelativeToRootNode>
          <destPaths>
            <PdtColumnDest>
              <path>//*[local-name() = 'reference'][@*[local-name() = 'name'] = 'Sophisref']</path>
            </PdtColumnDest>
          </destPaths>
        </PdtColumn>
        <PdtColumn>
          <name>Issue Date</name>
          <len>0</len>
          <isRequired>true</isRequired>
          <isRelativeToRootNode>true</isRelativeToRootNode>
        </PdtColumn>
        <PdtColumn>
          <name>Interest Rate</name>
          <len>0</len>
          <isRequired>true</isRequired>
          <isRelativeToRootNode>true</isRelativeToRootNode>
        </PdtColumn>
        <PdtColumn>
          <name>Maturity Date</name>
          <len>0</len>
          <isRequired>true</isRequired>
          <isRelativeToRootNode>true</isRelativeToRootNode>
        </PdtColumn>
        <PdtColumn>
          <name>Original Face Amount</name>
          <len>0</len>
          <isRequired>true</isRequired>
          <isRelativeToRootNode>true</isRelativeToRootNode>
        </PdtColumn>
        <PdtColumn>
          <name>Trade Quantity</name>
          <len>0</len>
          <isRequired>true</isRequired>
          <isRelativeToRootNode>true</isRelativeToRootNode>
          <destPaths>
            <PdtColumnDest>
              <path>//*[local-name() = 'numberOfSecurities']</path>
              <expression>("$TransactionType" == "BY" ? "+" : "-") + colVal</expression>
            </PdtColumnDest>
          </destPaths>
        </PdtColumn>
        <PdtColumn>
          <name>Deal Price</name>
          <len>0</len>
          <isRequired>true</isRequired>
          <isRelativeToRootNode>true</isRelativeToRootNode>
          <destPaths>
            <PdtColumnDest>
              <path>//*[local-name() = 'spot']</path>
            </PdtColumnDest>
          </destPaths>
        </PdtColumn>
        <PdtColumn>
          <name>ISO Currency Code</name>
          <len>0</len>
          <isRequired>true</isRequired>
          <isRelativeToRootNode>true</isRelativeToRootNode>
          <destPaths>
            <PdtColumnDest>
              <path>//*[local-name() = 'principalSettlement']//*[local-name() = 'amount']//*[local-name() = 'currency']</path>
            </PdtColumnDest>
            <PdtColumnDest>
              <path>//*[local-name() = 'principalSettlement']//*[local-name() = 'grossAmount']//*[local-name() = 'currency']</path>
            </PdtColumnDest>
            <PdtColumnDest>
              <path>//*[local-name() = 'paymentAmount']//*[local-name() = 'currency']</path>
            </PdtColumnDest>
            <PdtColumnDest>
              <path>//*[local-name() = 'detailedFee']//*[local-name() = 'currency']</path>
            </PdtColumnDest>
            <PdtColumnDest>
              <path>//*[local-name() = 'spot']/@*[local-name() = 'type']</path>
              <expression>colVal == "AUD" ? "InRate" : "InAmount"</expression>
            </PdtColumnDest>
          </destPaths>
        </PdtColumn>
        <PdtColumn>
          <name>Principal/Deal Amount</name>
          <len>0</len>
          <isRequired>true</isRequired>
          <isRelativeToRootNode>true</isRelativeToRootNode>
          <destPaths>
            <PdtColumnDest>
              <path>//*[local-name() = 'principalSettlement']//*[local-name() = 'grossAmount']//*[local-name() = 'amount']</path>
              <expression>$DealAmount == 0 ? double.Parse(lineVal.Split('|')[22]) : $DealAmount</expression>
            </PdtColumnDest>
          </destPaths>
        </PdtColumn>
        <PdtColumn>
          <name>Commission Amount</name>
          <len>0</len>
          <isRequired>true</isRequired>
          <isRelativeToRootNode>true</isRelativeToRootNode>
        </PdtColumn>
        <PdtColumn>
          <name>Charges/Fees</name>
          <len>0</len>
          <isRequired>true</isRequired>
          <isRelativeToRootNode>true</isRelativeToRootNode>
        </PdtColumn>
        <PdtColumn>
          <name>SEC/ Other Amounts</name>
          <len>0</len>
          <isRequired>true</isRequired>
          <isRelativeToRootNode>true</isRelativeToRootNode>
        </PdtColumn>
        <PdtColumn>
          <name>Local Tax Amount</name>
          <len>0</len>
          <isRequired>true</isRequired>
          <isRelativeToRootNode>true</isRelativeToRootNode>
        </PdtColumn>
        <PdtColumn>
          <name>Accrued Interest Amount</name>
          <len>0</len>
          <isRequired>true</isRequired>
          <isRelativeToRootNode>true</isRelativeToRootNode>
        </PdtColumn>
        <PdtColumn>
          <name>Net Settlement Amount</name>
          <len>0</len>
          <isRequired>true</isRequired>
          <isRelativeToRootNode>true</isRelativeToRootNode>
          <destPaths>
            <PdtColumnDest>
              <path>//*[local-name() = 'principalSettlement']/*[local-name() = 'amount']/*[local-name() = 'amount']</path>
              <expression>"$SecurityType" == "OPT" ? colVal : "0"</expression>
            </PdtColumnDest>
          </destPaths>
        </PdtColumn>
        <PdtColumn>
          <name>Non Local Currency Settlement Amount</name>
          <len>0</len>
          <isRequired>true</isRequired>
          <isRelativeToRootNode>true</isRelativeToRootNode>
        </PdtColumn>
        <PdtColumn>
          <name>Stamp Duty Amount</name>
          <len>0</len>
          <isRequired>true</isRequired>
          <isRelativeToRootNode>true</isRelativeToRootNode>
        </PdtColumn>
        <PdtColumn>
          <name>Value Added Tax Amount</name>
          <len>0</len>
          <isRequired>true</isRequired>
          <isRelativeToRootNode>true</isRelativeToRootNode>
        </PdtColumn>
        <PdtColumn>
          <name>Net / Gain Loss Amount</name>
          <len>0</len>
          <isRequired>true</isRequired>
          <isRelativeToRootNode>true</isRelativeToRootNode>
        </PdtColumn>
        <PdtColumn>
          <name>Trade Date</name>
          <len>0</len>
          <isRequired>true</isRequired>
          <isRelativeToRootNode>true</isRelativeToRootNode>
          <destPaths>
            <PdtColumnDest>
              <path>//*[local-name() = 'tradeDate'] | //*[local-name() = 'unadjustedDate']</path>
              <expression>colVal.Trim() == "" ? "" : System.DateTime.ParseExact(colVal, "yyyyMMdd", System.Globalization.CultureInfo.InvariantCulture).ToString("yyyy-MM-dd")</expression>
            </PdtColumnDest>
            <PdtColumnDest>
              <path>//*[local-name() = 'pnLDate']</path>
              <expression>DateTime.Today.ToString("yyyy-MM-dd")</expression>
            </PdtColumnDest>
          </destPaths>
        </PdtColumn>
        <PdtColumn>
          <name>Settlement Date</name>
          <len>0</len>
          <isRequired>true</isRequired>
          <isRelativeToRootNode>true</isRelativeToRootNode>
          <destPaths>
            <PdtColumnDest>
              <path>//*[local-name() = 'adjustedPaymentDate'] | //*[local-name() = 'tradeHeader']/*[local-name() = 'paymentDate'] | //*[local-name() = 'settlementDate']</path>
              <expression>colVal.Trim() == "" ? "" : System.DateTime.ParseExact(colVal, "yyyyMMdd", System.Globalization.CultureInfo.InvariantCulture).ToString("yyyy-MM-dd")</expression>
            </PdtColumnDest>
          </destPaths>
        </PdtColumn>
        <PdtColumn>
          <name>Place of Settlement BIC</name>
          <len>0</len>
          <isRequired>true</isRequired>
          <isRelativeToRootNode>true</isRelativeToRootNode>
        </PdtColumn>
        <PdtColumn>
          <name>Country of Settlement ISO Code</name>
          <len>0</len>
          <isRequired>true</isRequired>
          <isRelativeToRootNode>true</isRelativeToRootNode>
        </PdtColumn>
        <PdtColumn>
          <name>Place of Safekeeping BIC</name>
          <len>0</len>
          <isRequired>true</isRequired>
          <isRelativeToRootNode>true</isRelativeToRootNode>
        </PdtColumn>
        <PdtColumn>
          <name>Place of Trade</name>
          <len>0</len>
          <isRequired>true</isRequired>
          <isRelativeToRootNode>true</isRelativeToRootNode>
        </PdtColumn>
        <PdtColumn>
          <name>Executing Broker Local ID Type</name>
          <len>0</len>
          <isRequired>true</isRequired>
          <isRelativeToRootNode>true</isRelativeToRootNode>
        </PdtColumn>
        <PdtColumn>
          <name>Executing Broker Local ID</name>
          <len>0</len>
          <isRequired>true</isRequired>
          <isRelativeToRootNode>true</isRelativeToRootNode>
        </PdtColumn>
        <PdtColumn>
          <name>Executing Broker BIC</name>
          <len>0</len>
          <isRequired>true</isRequired>
          <isRelativeToRootNode>true</isRelativeToRootNode>
        </PdtColumn>
        <PdtColumn>
          <name>Executing Broker Name</name>
          <len>0</len>
          <isRequired>true</isRequired>
          <isRelativeToRootNode>true</isRelativeToRootNode>
        </PdtColumn>
        <PdtColumn>
          <name>Executing Broker Beneficiary Account Code</name>
          <len>0</len>
          <isRequired>true</isRequired>
          <isRelativeToRootNode>true</isRelativeToRootNode>
        </PdtColumn>
        <PdtColumn>
          <name>Clearing Broker Local ID Type</name>
          <len>0</len>
          <isRequired>true</isRequired>
          <isRelativeToRootNode>true</isRelativeToRootNode>
        </PdtColumn>
        <PdtColumn>
          <name>Clearing Broker Local ID</name>
          <len>0</len>
          <isRequired>true</isRequired>
          <isRelativeToRootNode>true</isRelativeToRootNode>
        </PdtColumn>
        <PdtColumn>
          <name>Clearing Broker BIC</name>
          <len>0</len>
          <isRequired>true</isRequired>
          <isRelativeToRootNode>true</isRelativeToRootNode>
        </PdtColumn>
        <PdtColumn>
          <name>Clearing Broker Name</name>
          <len>0</len>
          <isRequired>true</isRequired>
          <isRelativeToRootNode>true</isRelativeToRootNode>
        </PdtColumn>
        <PdtColumn>
          <name>Clearing Broker Beneficiary Account Code</name>
          <len>0</len>
          <isRequired>true</isRequired>
          <isRelativeToRootNode>true</isRelativeToRootNode>
          <destPaths>
            <PdtColumnDest>
              <path>//*[local-name() = 'accountId']</path>
              <Lookup>
                <Expression>@"
SELECT A.ID
FROM BO_TREASURY_ACCOUNT A
    JOIN BO_TREASURY_EXT_REF R ON R.ACC_ID = A.ID
    JOIN BO_TREASURY_EXT_REF_DEF D ON D.REF_ID = R.REF_ID AND D.REF_NAME = 'CBAccountID'
WHERE R.VALUE = '" + colVal + "'"</Expression>
                <Table>SQL</Table>
              </Lookup>
            </PdtColumnDest>
          </destPaths>
        </PdtColumn>
        <PdtColumn>
          <name>Receiver/ Deliverer’s Agent BIC</name>
          <len>0</len>
          <isRequired>true</isRequired>
          <isRelativeToRootNode>true</isRelativeToRootNode>
        </PdtColumn>
        <PdtColumn>
          <name>Receiver/Deliverer’s Agent Name</name>
          <len>0</len>
          <isRequired>true</isRequired>
          <isRelativeToRootNode>true</isRelativeToRootNode>
        </PdtColumn>
        <PdtColumn>
          <name>Receiver/Deliverer’s Beneficiary Account Code</name>
          <len>0</len>
          <isRequired>true</isRequired>
          <isRelativeToRootNode>true</isRelativeToRootNode>
        </PdtColumn>
        <PdtColumn>
          <name>Sender to Receiver Instruction Line</name>
          <len>0</len>
          <isRequired>true</isRequired>
          <isRelativeToRootNode>true</isRelativeToRootNode>
        </PdtColumn>
        <PdtColumn>
          <name>FX Instructions – Currency to Buy/Sell</name>
          <len>0</len>
          <isRequired>true</isRequired>
          <isRelativeToRootNode>true</isRelativeToRootNode>
        </PdtColumn>
        <PdtColumn>
          <name>Exchange Rate - First Currency</name>
          <len>0</len>
          <isRequired>true</isRequired>
          <isRelativeToRootNode>true</isRelativeToRootNode>
        </PdtColumn>
        <PdtColumn>
          <name>Exchange Rate – Second Currency</name>
          <len>0</len>
          <isRequired>true</isRequired>
          <isRelativeToRootNode>true</isRelativeToRootNode>
        </PdtColumn>
        <PdtColumn>
          <name>Exchange Rate</name>
          <len>0</len>
          <isRequired>true</isRequired>
          <isRelativeToRootNode>true</isRelativeToRootNode>
        </PdtColumn>
        <PdtColumn>
          <name>Tax Identifier</name>
          <len>0</len>
          <isRequired>true</isRequired>
          <isRelativeToRootNode>true</isRelativeToRootNode>
        </PdtColumn>
        <PdtColumn>
          <name>Turnaround Indicator</name>
          <len>0</len>
          <isRequired>true</isRequired>
          <isRelativeToRootNode>true</isRelativeToRootNode>
        </PdtColumn>
        <PdtColumn>
          <name>Pair Off /TBA Indicator</name>
          <len>0</len>
          <isRequired>true</isRequired>
          <isRelativeToRootNode>true</isRelativeToRootNode>
        </PdtColumn>
        <PdtColumn>
          <name>Dirty/Clean Indicator</name>
          <len>0</len>
          <isRequired>true</isRequired>
          <isRelativeToRootNode>true</isRelativeToRootNode>
        </PdtColumn>
        <PdtColumn>
          <name>Physical Trade Indicator</name>
          <len>0</len>
          <isRequired>true</isRequired>
          <isRelativeToRootNode>true</isRelativeToRootNode>
        </PdtColumn>
        <PdtColumn>
          <name>Stock Loan Indicator</name>
          <len>0</len>
          <isRequired>true</isRequired>
          <isRelativeToRootNode>true</isRelativeToRootNode>
        </PdtColumn>
        <PdtColumn>
          <name>Book Transfer Indicator</name>
          <len>0</len>
          <isRequired>true</isRequired>
          <isRelativeToRootNode>true</isRelativeToRootNode>
        </PdtColumn>
        <PdtColumn>
          <name>Settlement System Override Indicator</name>
          <len>0</len>
          <isRequired>true</isRequired>
          <isRelativeToRootNode>true</isRelativeToRootNode>
        </PdtColumn>
        <PdtColumn>
          <name>Registration Override Indicator</name>
          <len>0</len>
          <isRequired>true</isRequired>
          <isRelativeToRootNode>true</isRelativeToRootNode>
        </PdtColumn>
        <PdtColumn>
          <name>Trade Transaction Condition Indicator</name>
          <len>0</len>
          <isRequired>true</isRequired>
          <isRelativeToRootNode>true</isRelativeToRootNode>
        </PdtColumn>
        <PdtColumn>
          <name>Form of Securities Indicator</name>
          <len>0</len>
          <isRequired>true</isRequired>
          <isRelativeToRootNode>true</isRelativeToRootNode>
        </PdtColumn>
        <PdtColumn>
          <name>Split Settlement</name>
          <len>0</len>
          <isRequired>true</isRequired>
          <isRelativeToRootNode>true</isRelativeToRootNode>
        </PdtColumn>
        <PdtColumn>
          <name>Change of Beneficial Ownership</name>
          <len>0</len>
          <isRequired>true</isRequired>
          <isRelativeToRootNode>true</isRelativeToRootNode>
        </PdtColumn>
        <PdtColumn>
          <name>Stamp Duty Type Indicator</name>
          <len>0</len>
          <isRequired>true</isRequired>
          <isRelativeToRootNode>true</isRelativeToRootNode>
        </PdtColumn>
        <PdtColumn>
          <name>Short Sale/Buy to Cover Indicator</name>
          <len>0</len>
          <isRequired>true</isRequired>
          <isRelativeToRootNode>true</isRelativeToRootNode>
        </PdtColumn>
        <PdtColumn>
          <name>Settlement System Indicator</name>
          <len>0</len>
          <isRequired>true</isRequired>
          <isRelativeToRootNode>true</isRelativeToRootNode>
        </PdtColumn>
        <PdtColumn>
          <name>FX Instruction Cancellation Indicator</name>
          <len>0</len>
          <isRequired>true</isRequired>
          <isRelativeToRootNode>true</isRelativeToRootNode>
        </PdtColumn>
        <PdtColumn>
          <name>ID of Financial Instrument – Listed Derivatives</name>
          <len>0</len>
          <isRequired>true</isRequired>
          <isRelativeToRootNode>true</isRelativeToRootNode>
          <destPaths>
            <PdtColumnDest>
              <path>//*[local-name() = 'reference'][@*[local-name() = 'name'] = 'Ticker']</path>
            </PdtColumnDest>
          </destPaths>
        </PdtColumn>
        <PdtColumn>
          <name>Currency of Denomination</name>
          <len>0</len>
          <isRequired>true</isRequired>
          <isRelativeToRootNode>true</isRelativeToRootNode>
        </PdtColumn>
        <PdtColumn>
          <name>Split Settlement</name>
          <len>0</len>
          <isRequired>true</isRequired>
          <isRelativeToRootNode>true</isRelativeToRootNode>
        </PdtColumn>
        <PdtColumn>
          <name>Expiration Date</name>
          <len>0</len>
          <isRequired>true</isRequired>
          <isRelativeToRootNode>true</isRelativeToRootNode>
        </PdtColumn>
        <PdtColumn>
          <name>Open/Close Indicator</name>
          <len>0</len>
          <isRequired>true</isRequired>
          <isRelativeToRootNode>true</isRelativeToRootNode>
        </PdtColumn>
        <PdtColumn>
          <name>Underlying Security ID</name>
          <len>0</len>
          <isRequired>true</isRequired>
          <isRelativeToRootNode>true</isRelativeToRootNode>
        </PdtColumn>
        <PdtColumn>
          <name>Underlying Security Description</name>
          <len>0</len>
          <isRequired>true</isRequired>
          <isRelativeToRootNode>true</isRelativeToRootNode>
        </PdtColumn>
        <PdtColumn>
          <name>Option Style</name>
          <len>0</len>
          <isRequired>true</isRequired>
          <isRelativeToRootNode>true</isRelativeToRootNode>
        </PdtColumn>
        <PdtColumn>
          <name>Option Type</name>
          <len>0</len>
          <isRequired>true</isRequired>
          <isRelativeToRootNode>true</isRelativeToRootNode>
        </PdtColumn>
        <PdtColumn>
          <name>Exercise Price</name>
          <len>0</len>
          <isRequired>true</isRequired>
          <isRelativeToRootNode>true</isRelativeToRootNode>
        </PdtColumn>
        <PdtColumn>
          <name>Contract Size</name>
          <len>0</len>
          <isRequired>true</isRequired>
          <isRelativeToRootNode>true</isRelativeToRootNode>
        </PdtColumn>
        <PdtColumn>
          <name>Message Recipient</name>
          <len>0</len>
          <isRequired>true</isRequired>
          <isRelativeToRootNode>true</isRelativeToRootNode>
        </PdtColumn>
        <PdtColumn>
          <name>Quantity Type</name>
          <len>0</len>
          <isRequired>true</isRequired>
          <isRelativeToRootNode>true</isRelativeToRootNode>
        </PdtColumn>
        <PdtColumn>
          <name>Price Type</name>
          <len>0</len>
          <isRequired>true</isRequired>
          <isRelativeToRootNode>true</isRelativeToRootNode>
        </PdtColumn>
        <PdtColumn>
          <name>Repo Type</name>
          <len>0</len>
          <isRequired>true</isRequired>
          <isRelativeToRootNode>true</isRelativeToRootNode>
        </PdtColumn>
        <PdtColumn>
          <name>Repo Action Type</name>
          <len>0</len>
          <isRequired>true</isRequired>
          <isRelativeToRootNode>true</isRelativeToRootNode>
        </PdtColumn>
        <PdtColumn>
          <name>Repo Transaction Reference Number</name>
          <len>0</len>
          <isRequired>true</isRequired>
          <isRelativeToRootNode>true</isRelativeToRootNode>
        </PdtColumn>
        <PdtColumn>
          <name>Repo Second Leg Reference</name>
          <len>0</len>
          <isRequired>true</isRequired>
          <isRelativeToRootNode>true</isRelativeToRootNode>
        </PdtColumn>
        <PdtColumn>
          <name>Repo Termination Date</name>
          <len>0</len>
          <isRequired>true</isRequired>
          <isRelativeToRootNode>true</isRelativeToRootNode>
        </PdtColumn>
        <PdtColumn>
          <name>Repo Rate</name>
          <len>0</len>
          <isRequired>true</isRequired>
          <isRelativeToRootNode>true</isRelativeToRootNode>
        </PdtColumn>
        <PdtColumn>
          <name>Repo Spread Rate</name>
          <len>0</len>
          <isRequired>true</isRequired>
          <isRelativeToRootNode>true</isRelativeToRootNode>
        </PdtColumn>
        <PdtColumn>
          <name>Repo Variable Rate Support</name>
          <len>0</len>
          <isRequired>true</isRequired>
          <isRelativeToRootNode>true</isRelativeToRootNode>
        </PdtColumn>
        <PdtColumn>
          <name>Repo Pricing Rate</name>
          <len>0</len>
          <isRequired>true</isRequired>
          <isRelativeToRootNode>true</isRelativeToRootNode>
        </PdtColumn>
        <PdtColumn>
          <name>Repo Stock Loan Margin</name>
          <len>0</len>
          <isRequired>true</isRequired>
          <isRelativeToRootNode>true</isRelativeToRootNode>
        </PdtColumn>
        <PdtColumn>
          <name>Repo Securities Haircut</name>
          <len>0</len>
          <isRequired>true</isRequired>
          <isRelativeToRootNode>true</isRelativeToRootNode>
        </PdtColumn>
        <PdtColumn>
          <name>Repo Accrual Basis</name>
          <len>0</len>
          <isRequired>true</isRequired>
          <isRelativeToRootNode>true</isRelativeToRootNode>
        </PdtColumn>
        <PdtColumn>
          <name>Repo Rate Type</name>
          <len>0</len>
          <isRequired>true</isRequired>
          <isRelativeToRootNode>true</isRelativeToRootNode>
        </PdtColumn>
        <PdtColumn>
          <name>Repo Rate Change Date</name>
          <len>0</len>
          <isRequired>true</isRequired>
          <isRelativeToRootNode>true</isRelativeToRootNode>
        </PdtColumn>
        <PdtColumn>
          <name>Repo Total Pieces of Collateral</name>
          <len>0</len>
          <isRequired>true</isRequired>
          <isRelativeToRootNode>true</isRelativeToRootNode>
        </PdtColumn>
        <PdtColumn>
          <name>Repo Settlement Instruction Number</name>
          <len>0</len>
          <isRequired>true</isRequired>
          <isRelativeToRootNode>true</isRelativeToRootNode>
        </PdtColumn>
        <PdtColumn>
          <name>Repo Interest Amount</name>
          <len>0</len>
          <isRequired>true</isRequired>
          <isRelativeToRootNode>true</isRelativeToRootNode>
        </PdtColumn>
        <PdtColumn>
          <name>Repo Termination Amount (P&amp;I) per piece of collateral</name>
          <len>0</len>
          <isRequired>true</isRequired>
          <isRelativeToRootNode>true</isRelativeToRootNode>
        </PdtColumn>
        <PdtColumn>
          <name>Repo Total Termination Amount (P&amp;I)</name>
          <len>0</len>
          <isRequired>true</isRequired>
          <isRelativeToRootNode>true</isRelativeToRootNode>
        </PdtColumn>
        <PdtColumn>
          <name>Repo Deal Amount</name>
          <len>0</len>
          <isRequired>true</isRequired>
          <isRelativeToRootNode>true</isRelativeToRootNode>
        </PdtColumn>
        <PdtColumn>
          <name>Repo Forfeit Amount</name>
          <len>0</len>
          <isRequired>true</isRequired>
          <isRelativeToRootNode>true</isRelativeToRootNode>
        </PdtColumn>
        <PdtColumn>
          <name>Repo Premium Amount</name>
          <len>0</len>
          <isRequired>true</isRequired>
          <isRelativeToRootNode>true</isRelativeToRootNode>
        </PdtColumn>
        <PdtColumn>
          <name>Repo Link with Reference</name>
          <len>0</len>
          <isRequired>true</isRequired>
          <isRelativeToRootNode>true</isRelativeToRootNode>
        </PdtColumn>
        <PdtColumn>
          <name>Repo Revaluation Indicator</name>
          <len>0</len>
          <isRequired>true</isRequired>
          <isRelativeToRootNode>true</isRelativeToRootNode>
        </PdtColumn>
        <PdtColumn>
          <name>Repo Second Leg Narrative</name>
          <len>0</len>
          <isRequired>true</isRequired>
          <isRelativeToRootNode>true</isRelativeToRootNode>
        </PdtColumn>
        <PdtColumn>
          <name>Cash Party Account With Local ID Type</name>
          <len>0</len>
          <isRequired>true</isRequired>
          <isRelativeToRootNode>true</isRelativeToRootNode>
        </PdtColumn>
        <PdtColumn>
          <name>Cash Party Account With Local ID</name>
          <len>0</len>
          <isRequired>true</isRequired>
          <isRelativeToRootNode>true</isRelativeToRootNode>
        </PdtColumn>
        <PdtColumn>
          <name>Cash Party Account With BIC</name>
          <len>0</len>
          <isRequired>true</isRequired>
          <isRelativeToRootNode>true</isRelativeToRootNode>
        </PdtColumn>
        <PdtColumn>
          <name>Cash Party Account With Name</name>
          <len>0</len>
          <isRequired>true</isRequired>
          <isRelativeToRootNode>true</isRelativeToRootNode>
        </PdtColumn>
        <PdtColumn>
          <name>Cash Party Type</name>
          <len>0</len>
          <isRequired>true</isRequired>
          <isRelativeToRootNode>true</isRelativeToRootNode>
        </PdtColumn>
        <PdtColumn>
          <name>Cash Party Local ID Type</name>
          <len>0</len>
          <isRequired>true</isRequired>
          <isRelativeToRootNode>true</isRelativeToRootNode>
        </PdtColumn>
        <PdtColumn>
          <name>Cash Party Local ID</name>
          <len>0</len>
          <isRequired>true</isRequired>
          <isRelativeToRootNode>true</isRelativeToRootNode>
        </PdtColumn>
        <PdtColumn>
          <name>Cash Party BIC</name>
          <len>0</len>
          <isRequired>true</isRequired>
          <isRelativeToRootNode>true</isRelativeToRootNode>
        </PdtColumn>
        <PdtColumn>
          <name>Cash Party Name</name>
          <len>0</len>
          <isRequired>true</isRequired>
          <isRelativeToRootNode>true</isRelativeToRootNode>
        </PdtColumn>
        <PdtColumn>
          <name>Cash Party Beneficiary Account Type</name>
          <len>0</len>
          <isRequired>true</isRequired>
          <isRelativeToRootNode>true</isRelativeToRootNode>
        </PdtColumn>
        <PdtColumn>
          <name>Cash Party Account Number</name>
          <len>0</len>
          <isRequired>true</isRequired>
          <isRelativeToRootNode>true</isRelativeToRootNode>
        </PdtColumn>
        <PdtColumn>
          <name>Narrative Party</name>
          <len>0</len>
          <isRequired>true</isRequired>
          <isRelativeToRootNode>true</isRelativeToRootNode>
        </PdtColumn>
        <PdtColumn>
          <name>Narrative Type</name>
          <len>0</len>
          <isRequired>true</isRequired>
          <isRelativeToRootNode>true</isRelativeToRootNode>
        </PdtColumn>
        <PdtColumn>
          <name>Narrative</name>
          <len>0</len>
          <isRequired>true</isRequired>
          <isRelativeToRootNode>true</isRelativeToRootNode>
        </PdtColumn>
        <PdtColumn>
          <name>Collateral Indicator</name>
          <len>0</len>
          <isRequired>true</isRequired>
          <isRelativeToRootNode>true</isRelativeToRootNode>
        </PdtColumn>
        <PdtColumn>
          <name>Exposure Type</name>
          <len>0</len>
          <isRequired>true</isRequired>
          <isRelativeToRootNode>true</isRelativeToRootNode>
        </PdtColumn>
        <PdtColumn>
          <name>Partial Settlement</name>
          <len>0</len>
          <isRequired>true</isRequired>
          <isRelativeToRootNode>true</isRelativeToRootNode>
        </PdtColumn>
        <PdtColumn>
          <name>Buy In</name>
          <len>0</len>
          <isRequired>true</isRequired>
          <isRelativeToRootNode>true</isRelativeToRootNode>
        </PdtColumn>
        <PdtColumn>
          <name>Related Reference</name>
          <len>0</len>
          <isRequired>true</isRequired>
          <isRelativeToRootNode>true</isRelativeToRootNode>
        </PdtColumn>
        <PdtColumn>
          <name>Buy In Partial Successful</name>
          <len>0</len>
          <isRequired>true</isRequired>
          <isRelativeToRootNode>true</isRelativeToRootNode>
        </PdtColumn>
        <PdtColumn>
          <name>UTI- Unique Transaction ID</name>
          <len>0</len>
          <isRequired>true</isRequired>
          <isRelativeToRootNode>true</isRelativeToRootNode>
        </PdtColumn>
      </columns>
    </PdtTransformation>
    <PdtTransformation>
      <name>BBH_DIM_Trade_Cancel</name>
      <type>Csv2Xml</type>
      <label>Infomediary DIM Trade Cancel</label>
      <category>Medio</category>
      <templateFile>BBH_DIM_Trade_Cancel_Ack.xml</templateFile>
      <repeatingRootPath>//*[local-name() = 'import']</repeatingRootPath>
      <repeatingChildrenPath>//*[local-name() = 'trade']</repeatingChildrenPath>
      <csvSrcSeparator>124</csvSrcSeparator>
      <csvDestSeparator>0</csvDestSeparator>
      <processingCondition>lineVal.Split('|')[1] == "C"</processingCondition>
      <columns>
        <PdtColumn>
          <name>Sender's Message Reference Id</name>
          <len>0</len>
          <isRequired>true</isRequired>
          <isRelativeToRootNode>true</isRelativeToRootNode>
          <destPaths>
            <PdtColumnDest>
              <path>//*[local-name() = 'trade']/@*[local-name() = 'updateWorkflowEventName']</path>
              <expression>"BBH Upload"</expression>
            </PdtColumnDest>
          </destPaths>
        </PdtColumn>
        <PdtColumn>
          <name>Message Type/Function</name>
          <len>0</len>
          <isRequired>true</isRequired>
          <isRelativeToRootNode>true</isRelativeToRootNode>
        </PdtColumn>
        <PdtColumn>
          <name>Previous Message Reference ID</name>
          <len>0</len>
          <isRequired>true</isRequired>
          <isRelativeToRootNode>true</isRelativeToRootNode>
          <destPaths>
            <PdtColumnDest>
              <path>//*[local-name() = 'tradeId']</path>
              <Lookup>
                <Expression>"SELECT SOPHIS_IDENT FROM EXTRNL_REFERENCES_TRADES WHERE VALUE = '" + colVal + "'"</Expression>
                <Table>SQL</Table>
              </Lookup>
            </PdtColumnDest>
          </destPaths>
        </PdtColumn>
      </columns>
    </PdtTransformation>
    <PdtTransformation>
      <name>BBH_DIM_Trade_Ack</name>
      <type>Csv2Xml</type>
      <label>Infomediary DIM Trade Ack</label>
      <category>Medio</category>
      <templateFile>BBH_DIM_Trade_Cancel_Ack.xml</templateFile>
      <repeatingRootPath>//*[local-name() = 'import']</repeatingRootPath>
      <repeatingChildrenPath>//*[local-name() = 'trade']</repeatingChildrenPath>
      <csvSrcSeparator>124</csvSrcSeparator>
      <csvDestSeparator>0</csvDestSeparator>
      <columns>
        <PdtColumn>
          <name>Sender's Message Reference Id</name>
          <len>0</len>
          <isRequired>true</isRequired>
          <isRelativeToRootNode>true</isRelativeToRootNode>
          <destPaths>
            <PdtColumnDest>
              <path>//*[local-name() = 'trade']/@*[local-name() = 'updateWorkflowEventName']</path>
              <expression>"Ack Received"</expression>
            </PdtColumnDest>
            <PdtColumnDest>
              <path>//*[local-name() = 'tradeId']</path>
              <Lookup>
                <Expression>"SELECT TRADE_ID FROM BO_MESSAGES WHERE IDENT = " + colVal</Expression>
                <Table>SQL</Table>
              </Lookup>
            </PdtColumnDest>
          </destPaths>
        </PdtColumn>
      </columns>
    </PdtTransformation>
    <PdtTransformation>
      <name>BBH_DIM_Cash_Orig</name>
      <type>Csv2Xml</type>
      <label>Infomediary DIM Cash Original</label>
      <category>Medio</category>
      <templateFile>BBH_DIM_Cash_Nostro.xml</templateFile>
      <repeatingRootPath>//*[local-name() = 'import']</repeatingRootPath>
      <repeatingChildrenPath>//*[local-name() = 'trade']</repeatingChildrenPath>
      <csvSrcSeparator>124</csvSrcSeparator>
      <csvDestSeparator>0</csvDestSeparator>
      <processingCondition>($MessageType == 202 || $MessageType == 210) &amp;&amp; lineVal.Split('|')[6] == "MARG"</processingCondition>
      <variables>
        <PdtVariable>
          <name>MessageType</name>
          <expressionBefore>lineVal.Split('|')[0]</expressionBefore>
        </PdtVariable>
        <PdtVariable>
          <name>Entity</name>
          <Lookup>
            <Expression>@"
SELECT A.ENTITY
FROM BO_TREASURY_ACCOUNT A
    JOIN BO_TREASURY_EXT_REF R ON R.ACC_ID = A.ID
    JOIN BO_TREASURY_EXT_REF_DEF D ON D.REF_ID = R.REF_ID AND D.REF_NAME = 'CBAccountID'
WHERE R.VALUE = '" + lineVal.Split('|')[5] + "'"</Expression>
            <Table>SQL</Table>
          </Lookup>
        </PdtVariable>
        <PdtVariable>
          <name>Ctpy</name>
          <Lookup>
            <Expression>@"
SELECT T.IDENT
FROM BO_TREASURY_ACCOUNT A
    JOIN BO_TREASURY_EXT_REF R ON R.ACC_ID = A.ID
    JOIN BO_TREASURY_EXT_REF_DEF D ON D.REF_ID = R.REF_ID AND D.REF_NAME = 'CBAccountID'
    JOIN TIERS T ON T.REFERENCE = A.CUSTODIAN
WHERE R.VALUE = '" + lineVal.Split('|')[5] + "'"</Expression>
            <Table>SQL</Table>
          </Lookup>
        </PdtVariable>
      </variables>
      <columns>
        <PdtColumn>
          <name>Message Type</name>
          <len>0</len>
          <isRequired>true</isRequired>
          <isRelativeToRootNode>true</isRelativeToRootNode>
          <destPaths>
            <PdtColumnDest>
              <path>//*[local-name() = 'trade']/@*[local-name() = 'persistenceType']</path>
              <expression>"UpdateOrCreate"</expression>
            </PdtColumnDest>
            <PdtColumnDest>
              <path>//*[local-name() = 'businessEvent']</path>
              <expression>"Clearer Margin Call"</expression>
            </PdtColumnDest>
            <PdtColumnDest>
              <path>//*[local-name() = 'backofficeStatus']</path>
              <expression>"No Status"</expression>
            </PdtColumnDest>
            <PdtColumnDest>
              <path>//*[local-name() = 'extendedPartyTradeInformation']//*[local-name() = 'comment']</path>
              <expression>DateTime.Now.ToString("yyyyMMdd-HH:mm:ss")</expression>
            </PdtColumnDest>
            <PdtColumnDest>
              <path>//*[local-name() = 'tradeTime']</path>
              <expression>DateTime.Now.ToString("HH:mm:ss")</expression>
            </PdtColumnDest>
            <PdtColumnDest>
              <path>//*[local-name() = 'numberOfSecurities']</path>
              <expression>1</expression>
            </PdtColumnDest>
            <PdtColumnDest>
              <path>//*[local-name() = 'spot']</path>
              <expression>0</expression>
            </PdtColumnDest>
            <PdtColumnDest>
              <path>//*[local-name() = 'spot']/@*[local-name() = 'type']</path>
              <expression>"InAmount"</expression>
            </PdtColumnDest>
          </destPaths>
        </PdtColumn>
        <PdtColumn>
          <name>Recipient</name>
          <len>0</len>
          <isRequired>true</isRequired>
          <isRelativeToRootNode>true</isRelativeToRootNode>
        </PdtColumn>
        <PdtColumn>
          <name>Transaction/ Senders Reference Number</name>
          <len>0</len>
          <isRequired>true</isRequired>
          <isRelativeToRootNode>true</isRelativeToRootNode>
          <destPaths>
            <PdtColumnDest>
              <path>//*[local-name() = 'tradeId'][contains(@*[local-name() = 'tradeIdScheme'], 'tradeId/externalReference')]</path>
            </PdtColumnDest>
          </destPaths>
        </PdtColumn>
        <PdtColumn>
          <name>Time Indication Code</name>
          <len>0</len>
          <isRequired>true</isRequired>
          <isRelativeToRootNode>true</isRelativeToRootNode>
        </PdtColumn>
        <PdtColumn>
          <name>Time Indication Time</name>
          <len>0</len>
          <isRequired>true</isRequired>
          <isRelativeToRootNode>true</isRelativeToRootNode>
        </PdtColumn>
        <PdtColumn>
          <name>Account Number</name>
          <len>0</len>
          <isRequired>true</isRequired>
          <isRelativeToRootNode>true</isRelativeToRootNode>
          <destPaths>
            <PdtColumnDest>
              <path>
//*[local-name() = 'portfolioName'][contains(@*[local-name() = 'portfolioNameScheme'], 'portfolioName/id')] |
//*[local-name() = 'externalReference']/*[local-name() = 'name' and text() = 'RootPortfolio']/../*[local-name() = 'value']</path>
              <Lookup>
                <Expression>@"
SELECT F_ORI.IDENT
FROM BO_TREASURY_ACCOUNT A
    JOIN BO_TREASURY_EXT_REF R ON R.ACC_ID = A.ID
    JOIN BO_TREASURY_EXT_REF_DEF D ON D.REF_ID = R.REF_ID AND D.REF_NAME = 'CBAccountID'
    JOIN FOLIO F_MIR ON F_MIR.IDENT = A.ACCOUNT_ADJUSTMENT_FOLIO
    JOIN FOLIO F_ORI ON F_ORI.MGR = F_MIR.MGR AND F_ORI.NAME LIKE '% Cash'
WHERE R.VALUE = '" + colVal + "'"</Expression>
                <Table>SQL</Table>
              </Lookup>
            </PdtColumnDest>
            <PdtColumnDest>
              <path>
//*[local-name() = 'partyTradeIdentifier']//*[local-name() = 'partyId'][contains(@*[local-name() = 'partyIdScheme'], 'id')] |
//*[local-name() = 'extendedPartyTradeInformation']//*[local-name() = 'partyId'][contains(@*[local-name() = 'partyIdScheme'], 'id')] |
//*[local-name() = 'buyerPartyReference']//*[local-name() = 'partyId'][contains(@*[local-name() = 'partyIdScheme'], 'id')] |
//*[local-name() = 'entityPartyReference']//*[local-name() = 'partyId'][contains(@*[local-name() = 'partyIdScheme'], 'id')] |
//*[local-name() = 'entity']//*[local-name() = 'partyId'][contains(@*[local-name() = 'partyIdScheme'], 'id')]</path>
              <expression>"$Entity"</expression>
            </PdtColumnDest>
            <PdtColumnDest>
              <path>
//*[local-name() = 'counterparty']//*[local-name() = 'partyId'][contains(@*[local-name() = 'partyIdScheme'], 'id')] |
//*[local-name() = 'sellerPartyReference']//*[local-name() = 'partyId'][contains(@*[local-name() = 'partyIdScheme'], 'id')]</path>
              <expression>"$Ctpy"</expression>
            </PdtColumnDest>
            <PdtColumnDest>
              <path>//*[local-name() = 'accountId']</path>
              <Lookup>
                <Expression>@"
SELECT A_ORI.ID
FROM BO_TREASURY_ACCOUNT A_MIR
    JOIN BO_TREASURY_EXT_REF R ON R.ACC_ID = A_MIR.ID
    JOIN BO_TREASURY_EXT_REF_DEF D ON D.REF_ID = R.REF_ID AND D.REF_NAME = 'CBAccountID'
    JOIN BO_TREASURY_ACCOUNT A_ORI ON A_ORI.ACCOUNT_AT_CUSTODIAN = CASE WHEN (A_MIR.ACCOUNT_AT_CUSTODIAN LIKE 'DB%' OR A_MIR.ACCOUNT_AT_CUSTODIAN LIKE 'LU%') THEN SUBSTR(A_MIR.ACCOUNT_AT_CUSTODIAN, 0, 14) ELSE SUBSTR(A_MIR.ACCOUNT_AT_CUSTODIAN, 0, 4) END
WHERE R.VALUE = '" + colVal + "'"</Expression>
                <Table>SQL</Table>
              </Lookup>
            </PdtColumnDest>
            <PdtColumnDest>
              <path>//*[local-name() = 'depositary']//*[local-name() = 'partyId'][contains(@*[local-name() = 'partyIdScheme'], 'id')]</path>
              <Lookup>
                <Expression>@"
SELECT T.IDENT
FROM BO_TREASURY_ACCOUNT A
    JOIN BO_TREASURY_EXT_REF R ON R.ACC_ID = A.ID
    JOIN BO_TREASURY_EXT_REF_DEF D ON D.REF_ID = R.REF_ID AND D.REF_NAME = 'CBAccountID'
    JOIN BO_TREASURY_ACCOUNT CUS ON CUS.ACCOUNT_AT_CUSTODIAN = CASE WHEN (A.ACCOUNT_AT_CUSTODIAN LIKE 'DB%' OR A.ACCOUNT_AT_CUSTODIAN LIKE 'LU%') THEN SUBSTR(A.ACCOUNT_AT_CUSTODIAN, 0, 14) ELSE SUBSTR(A.ACCOUNT_AT_CUSTODIAN, 0, 4) END
    JOIN TIERS T ON T.REFERENCE = CUS.CUSTODIAN
WHERE R.VALUE = '" + colVal + "'"</Expression>
                <Table>SQL</Table>
              </Lookup>
            </PdtColumnDest>
          </destPaths>
        </PdtColumn>
        <PdtColumn>
          <name>Related Reference</name>
          <len>0</len>
          <isRequired>true</isRequired>
          <isRelativeToRootNode>true</isRelativeToRootNode>
        </PdtColumn>
        <PdtColumn>
          <name>Related Reference of the Original Message</name>
          <len>0</len>
          <isRequired>true</isRequired>
          <isRelativeToRootNode>true</isRelativeToRootNode>
        </PdtColumn>
        <PdtColumn>
          <name>Original Instruction Date</name>
          <len>0</len>
          <isRequired>true</isRequired>
          <isRelativeToRootNode>true</isRelativeToRootNode>
        </PdtColumn>
        <PdtColumn>
          <name>Value Date</name>
          <len>0</len>
          <isRequired>true</isRequired>
          <isRelativeToRootNode>true</isRelativeToRootNode>
          <destPaths>
            <PdtColumnDest>
              <path>//*[local-name() = 'tradeDate'] | //*[local-name() = 'unadjustedDate']</path>
              <expression>colVal.Trim() == "" ? "" : System.DateTime.ParseExact(colVal, "yyMMdd", System.Globalization.CultureInfo.InvariantCulture).ToString("yyyy-MM-dd")</expression>
            </PdtColumnDest>
            <PdtColumnDest>
              <path>//*[local-name() = 'adjustedPaymentDate'] | //*[local-name() = 'tradeHeader']/*[local-name() = 'paymentDate']</path>
              <expression>colVal.Trim() == "" ? "" : System.DateTime.ParseExact(colVal, "yyMMdd", System.Globalization.CultureInfo.InvariantCulture).ToString("yyyy-MM-dd")</expression>
            </PdtColumnDest>
            <PdtColumnDest>
              <path>//*[local-name() = 'settlementDate'] | //*[local-name() = 'pnLDate']</path>
              <expression>DateTime.Today.ToString("yyyy-MM-dd")</expression>
            </PdtColumnDest>
          </destPaths>
        </PdtColumn>
        <PdtColumn>
          <name>Currency Code of Settled Amount</name>
          <len>0</len>
          <isRequired>true</isRequired>
          <isRelativeToRootNode>true</isRelativeToRootNode>
          <destPaths>
            <PdtColumnDest>
              <path>//*[local-name() = 'principalSettlement']//*[local-name() = 'amount']//*[local-name() = 'currency']</path>
            </PdtColumnDest>
            <PdtColumnDest>
              <path>//*[local-name() = 'principalSettlement']//*[local-name() = 'grossAmount']//*[local-name() = 'currency']</path>
            </PdtColumnDest>
            <PdtColumnDest>
              <path>//*[local-name() = 'paymentAmount']//*[local-name() = 'currency']</path>
            </PdtColumnDest>
            <PdtColumnDest>
              <path>//*[local-name() = 'detailedFee']//*[local-name() = 'currency']</path>
            </PdtColumnDest>
            <PdtColumnDest>
              <path>//*[local-name() = 'reference'][@*[local-name() = 'name'] = 'Sophisref']</path>
              <expression>"MARGIN CALL " + colVal</expression>
            </PdtColumnDest>
          </destPaths>
        </PdtColumn>
        <PdtColumn>
          <name>Settled Amount</name>
          <len>0</len>
          <isRequired>true</isRequired>
          <isRelativeToRootNode>true</isRelativeToRootNode>
          <destPaths>
            <PdtColumnDest>
              <path>//*[local-name() = 'principalSettlement']/*[local-name() = 'amount']/*[local-name() = 'amount']</path>
            </PdtColumnDest>
          </destPaths>
        </PdtColumn>
        <PdtColumn>
          <name>Ordering Customer BIC</name>
          <len>0</len>
          <isRequired>true</isRequired>
          <isRelativeToRootNode>true</isRelativeToRootNode>
        </PdtColumn>
        <PdtColumn>
          <name>Ordering Customer Party Identifier Code</name>
          <len>0</len>
          <isRequired>true</isRequired>
          <isRelativeToRootNode>true</isRelativeToRootNode>
        </PdtColumn>
        <PdtColumn>
          <name>Ordering Customer Country Code</name>
          <len>0</len>
          <isRequired>true</isRequired>
          <isRelativeToRootNode>true</isRelativeToRootNode>
        </PdtColumn>
        <PdtColumn>
          <name>Ordering Customer Party Identifier</name>
          <len>0</len>
          <isRequired>true</isRequired>
          <isRelativeToRootNode>true</isRelativeToRootNode>
        </PdtColumn>
        <PdtColumn>
          <name>Ordering Customer Name &amp; Address</name>
          <len>0</len>
          <isRequired>true</isRequired>
          <isRelativeToRootNode>true</isRelativeToRootNode>
        </PdtColumn>
        <PdtColumn>
          <name>Ordering Customer Account</name>
          <len>0</len>
          <isRequired>true</isRequired>
          <isRelativeToRootNode>true</isRelativeToRootNode>
        </PdtColumn>
        <PdtColumn>
          <name>Ordering Institution BIC</name>
          <len>0</len>
          <isRequired>true</isRequired>
          <isRelativeToRootNode>true</isRelativeToRootNode>
        </PdtColumn>
        <PdtColumn>
          <name>Ordering Institution Clearing System Code</name>
          <len>0</len>
          <isRequired>true</isRequired>
          <isRelativeToRootNode>true</isRelativeToRootNode>
        </PdtColumn>
        <PdtColumn>
          <name>Ordering Institution Name &amp; Address</name>
          <len>0</len>
          <isRequired>true</isRequired>
          <isRelativeToRootNode>true</isRelativeToRootNode>
        </PdtColumn>
        <PdtColumn>
          <name>Ordering Institution Account</name>
          <len>0</len>
          <isRequired>true</isRequired>
          <isRelativeToRootNode>true</isRelativeToRootNode>
        </PdtColumn>
        <PdtColumn>
          <name>Sender's Correspondent BIC</name>
          <len>0</len>
          <isRequired>true</isRequired>
          <isRelativeToRootNode>true</isRelativeToRootNode>
        </PdtColumn>
        <PdtColumn>
          <name>Sender's Correspondent Location</name>
          <len>0</len>
          <isRequired>true</isRequired>
          <isRelativeToRootNode>true</isRelativeToRootNode>
        </PdtColumn>
        <PdtColumn>
          <name>Sender's Correspondent Name &amp; Address</name>
          <len>0</len>
          <isRequired>true</isRequired>
          <isRelativeToRootNode>true</isRelativeToRootNode>
        </PdtColumn>
        <PdtColumn>
          <name>Receiver's Correspondent BIC</name>
          <len>0</len>
          <isRequired>true</isRequired>
          <isRelativeToRootNode>true</isRelativeToRootNode>
        </PdtColumn>
        <PdtColumn>
          <name>Receiver's Correspondent Location</name>
          <len>0</len>
          <isRequired>true</isRequired>
          <isRelativeToRootNode>true</isRelativeToRootNode>
        </PdtColumn>
        <PdtColumn>
          <name>Receiver's Correspondent Name &amp; Address</name>
          <len>0</len>
          <isRequired>true</isRequired>
          <isRelativeToRootNode>true</isRelativeToRootNode>
        </PdtColumn>
        <PdtColumn>
          <name>Receiver's Correspondent Account</name>
          <len>0</len>
          <isRequired>true</isRequired>
          <isRelativeToRootNode>true</isRelativeToRootNode>
        </PdtColumn>
        <PdtColumn>
          <name>Intermediary Institution BIC</name>
          <len>0</len>
          <isRequired>true</isRequired>
          <isRelativeToRootNode>true</isRelativeToRootNode>
        </PdtColumn>
        <PdtColumn>
          <name>Intermediary Institution Clearing System Code</name>
          <len>0</len>
          <isRequired>true</isRequired>
          <isRelativeToRootNode>true</isRelativeToRootNode>
        </PdtColumn>
        <PdtColumn>
          <name>Intermediary Institution Name &amp; Address</name>
          <len>0</len>
          <isRequired>true</isRequired>
          <isRelativeToRootNode>true</isRelativeToRootNode>
        </PdtColumn>
        <PdtColumn>
          <name>Intermediary Institution Account</name>
          <len>0</len>
          <isRequired>true</isRequired>
          <isRelativeToRootNode>true</isRelativeToRootNode>
        </PdtColumn>
        <PdtColumn>
          <name>Account with Institution BIC</name>
          <len>0</len>
          <isRequired>true</isRequired>
          <isRelativeToRootNode>true</isRelativeToRootNode>
        </PdtColumn>
        <PdtColumn>
          <name>Account with Institution Clearing System Code</name>
          <len>0</len>
          <isRequired>true</isRequired>
          <isRelativeToRootNode>true</isRelativeToRootNode>
        </PdtColumn>
        <PdtColumn>
          <name>Account with Institution Location</name>
          <len>0</len>
          <isRequired>true</isRequired>
          <isRelativeToRootNode>true</isRelativeToRootNode>
        </PdtColumn>
        <PdtColumn>
          <name>Account with Institution Name &amp; Address</name>
          <len>0</len>
          <isRequired>true</isRequired>
          <isRelativeToRootNode>true</isRelativeToRootNode>
        </PdtColumn>
        <PdtColumn>
          <name>Account with Institution Account</name>
          <len>0</len>
          <isRequired>true</isRequired>
          <isRelativeToRootNode>true</isRelativeToRootNode>
        </PdtColumn>
        <PdtColumn>
          <name>Beneficiary Institution BIC</name>
          <len>0</len>
          <isRequired>true</isRequired>
          <isRelativeToRootNode>true</isRelativeToRootNode>
        </PdtColumn>
        <PdtColumn>
          <name>Beneficiary Institution Clearing Code</name>
          <len>0</len>
          <isRequired>true</isRequired>
          <isRelativeToRootNode>true</isRelativeToRootNode>
        </PdtColumn>
        <PdtColumn>
          <name>Beneficiary Institution Name &amp; Address</name>
          <len>0</len>
          <isRequired>true</isRequired>
          <isRelativeToRootNode>true</isRelativeToRootNode>
        </PdtColumn>
        <PdtColumn>
          <name>Beneficiary Institution Account</name>
          <len>0</len>
          <isRequired>true</isRequired>
          <isRelativeToRootNode>true</isRelativeToRootNode>
        </PdtColumn>
        <PdtColumn>
          <name>Sender to Receiver Information First line Narrative</name>
          <len>0</len>
          <isRequired>true</isRequired>
          <isRelativeToRootNode>true</isRelativeToRootNode>
        </PdtColumn>
        <PdtColumn>
          <name>Sender to Receiver Information 2nd line Narrative</name>
          <len>0</len>
          <isRequired>true</isRequired>
          <isRelativeToRootNode>true</isRelativeToRootNode>
        </PdtColumn>
        <PdtColumn>
          <name>Sender to Receiver Information 3rd line Narrative</name>
          <len>0</len>
          <isRequired>true</isRequired>
          <isRelativeToRootNode>true</isRelativeToRootNode>
        </PdtColumn>
        <PdtColumn>
          <name>Sender to Receiver Information – 4th line Narrative</name>
          <len>0</len>
          <isRequired>true</isRequired>
          <isRelativeToRootNode>true</isRelativeToRootNode>
        </PdtColumn>
        <PdtColumn>
          <name>Sender to Receiver Information – 5th line Narrative</name>
          <len>0</len>
          <isRequired>true</isRequired>
          <isRelativeToRootNode>true</isRelativeToRootNode>
        </PdtColumn>
        <PdtColumn>
          <name>Sender to Receiver Information – 6th line Narrative</name>
          <len>0</len>
          <isRequired>true</isRequired>
          <isRelativeToRootNode>true</isRelativeToRootNode>
        </PdtColumn>
        <PdtColumn>
          <name>Sender to Receiver Information for Cancel Message</name>
          <len>0</len>
          <isRequired>true</isRequired>
          <isRelativeToRootNode>true</isRelativeToRootNode>
        </PdtColumn>
      </columns>
    </PdtTransformation>
    <PdtTransformation>
      <name>BBH_DIM_Cash_Mirr</name>
      <type>Csv2Xml</type>
      <label>Infomediary DIM Cash Mirroring</label>
      <category>Medio</category>
      <templateFile>BBH_DIM_Cash_Nostro.xml</templateFile>
      <repeatingRootPath>//*[local-name() = 'import']</repeatingRootPath>
      <repeatingChildrenPath>//*[local-name() = 'trade']</repeatingChildrenPath>
      <csvSrcSeparator>124</csvSrcSeparator>
      <csvDestSeparator>0</csvDestSeparator>
      <processingCondition>($MessageType == 202 || $MessageType == 210) &amp;&amp; lineVal.Split('|')[6] == "MARG"</processingCondition>
      <variables>
        <PdtVariable>
          <name>MessageType</name>
          <expressionBefore>lineVal.Split('|')[0]</expressionBefore>
        </PdtVariable>
        <PdtVariable>
          <name>Entity</name>
          <Lookup>
            <Expression>@"
SELECT A.ENTITY
FROM BO_TREASURY_ACCOUNT A
    JOIN BO_TREASURY_EXT_REF R ON R.ACC_ID = A.ID
    JOIN BO_TREASURY_EXT_REF_DEF D ON D.REF_ID = R.REF_ID AND D.REF_NAME = 'CBAccountID'
WHERE R.VALUE = '" + lineVal.Split('|')[5] + "'"</Expression>
            <Table>SQL</Table>
          </Lookup>
        </PdtVariable>
        <PdtVariable>
          <name>Ctpy</name>
          <Lookup>
            <Expression>@"
SELECT T.IDENT
FROM BO_TREASURY_ACCOUNT A
    JOIN BO_TREASURY_EXT_REF R ON R.ACC_ID = A.ID
    JOIN BO_TREASURY_EXT_REF_DEF D ON D.REF_ID = R.REF_ID AND D.REF_NAME = 'CBAccountID'
    JOIN BO_TREASURY_ACCOUNT CUS ON CUS.ACCOUNT_AT_CUSTODIAN = CASE WHEN (A.ACCOUNT_AT_CUSTODIAN LIKE 'DB%' OR A.ACCOUNT_AT_CUSTODIAN LIKE 'LU%') THEN SUBSTR(A.ACCOUNT_AT_CUSTODIAN, 0, 14) ELSE SUBSTR(A.ACCOUNT_AT_CUSTODIAN, 0, 4) END
    JOIN TIERS T ON T.REFERENCE = CUS.CUSTODIAN
WHERE R.VALUE = '" + lineVal.Split('|')[5] + "'"</Expression>
            <Table>SQL</Table>
          </Lookup>
        </PdtVariable>
      </variables>
      <columns>
        <PdtColumn>
          <name>Message Type</name>
          <len>0</len>
          <isRequired>true</isRequired>
          <isRelativeToRootNode>true</isRelativeToRootNode>
          <destPaths>
            <PdtColumnDest>
              <path>//*[local-name() = 'trade']/@*[local-name() = 'persistenceType']</path>
              <expression>"UpdateOrCreate"</expression>
            </PdtColumnDest>
            <PdtColumnDest>
              <path>//*[local-name() = 'businessEvent']</path>
              <expression>"Clearer Margin Call"</expression>
            </PdtColumnDest>
            <PdtColumnDest>
              <path>//*[local-name() = 'backofficeStatus']</path>
              <expression>"No Status"</expression>
            </PdtColumnDest>
            <PdtColumnDest>
              <path>//*[local-name() = 'extendedPartyTradeInformation']//*[local-name() = 'comment']</path>
              <expression>DateTime.Now.ToString("yyyyMMdd-HH:mm:ss")</expression>
            </PdtColumnDest>
            <PdtColumnDest>
              <path>//*[local-name() = 'tradeTime']</path>
              <expression>DateTime.Now.ToString("HH:mm:ss")</expression>
            </PdtColumnDest>
            <PdtColumnDest>
              <path>//*[local-name() = 'numberOfSecurities']</path>
              <expression>1</expression>
            </PdtColumnDest>
            <PdtColumnDest>
              <path>//*[local-name() = 'spot']</path>
              <expression>0</expression>
            </PdtColumnDest>
            <PdtColumnDest>
              <path>//*[local-name() = 'spot']/@*[local-name() = 'type']</path>
              <expression>"InAmount"</expression>
            </PdtColumnDest>
          </destPaths>
        </PdtColumn>
        <PdtColumn>
          <name>Recipient</name>
          <len>0</len>
          <isRequired>true</isRequired>
          <isRelativeToRootNode>true</isRelativeToRootNode>
        </PdtColumn>
        <PdtColumn>
          <name>Transaction/ Senders Reference Number</name>
          <len>0</len>
          <isRequired>true</isRequired>
          <isRelativeToRootNode>true</isRelativeToRootNode>
          <destPaths>
            <PdtColumnDest>
              <path>//*[local-name() = 'tradeId'][contains(@*[local-name() = 'tradeIdScheme'], 'tradeId/externalReference')]</path>
              <expression>colVal + "_Mir"</expression>
            </PdtColumnDest>
          </destPaths>
        </PdtColumn>
        <PdtColumn>
          <name>Time Indication Code</name>
          <len>0</len>
          <isRequired>true</isRequired>
          <isRelativeToRootNode>true</isRelativeToRootNode>
        </PdtColumn>
        <PdtColumn>
          <name>Time Indication Time</name>
          <len>0</len>
          <isRequired>true</isRequired>
          <isRelativeToRootNode>true</isRelativeToRootNode>
        </PdtColumn>
        <PdtColumn>
          <name>Account Number</name>
          <len>0</len>
          <isRequired>true</isRequired>
          <isRelativeToRootNode>true</isRelativeToRootNode>
          <destPaths>
            <PdtColumnDest>
              <path>
//*[local-name() = 'portfolioName'][contains(@*[local-name() = 'portfolioNameScheme'], 'portfolioName/id')] |
//*[local-name() = 'externalReference']/*[local-name() = 'name' and text() = 'RootPortfolio']/../*[local-name() = 'value']</path>
              <Lookup>
                <Expression>@"
SELECT A.ACCOUNT_ADJUSTMENT_FOLIO
FROM BO_TREASURY_ACCOUNT A
    JOIN BO_TREASURY_EXT_REF R ON R.ACC_ID = A.ID
    JOIN BO_TREASURY_EXT_REF_DEF D ON D.REF_ID = R.REF_ID AND D.REF_NAME = 'CBAccountID'
WHERE R.VALUE = '" + colVal + "'"</Expression>
                <Table>SQL</Table>
              </Lookup>
            </PdtColumnDest>
            <PdtColumnDest>
              <path>
//*[local-name() = 'partyTradeIdentifier']//*[local-name() = 'partyId'][contains(@*[local-name() = 'partyIdScheme'], 'id')] |
//*[local-name() = 'extendedPartyTradeInformation']//*[local-name() = 'partyId'][contains(@*[local-name() = 'partyIdScheme'], 'id')] |
//*[local-name() = 'buyerPartyReference']//*[local-name() = 'partyId'][contains(@*[local-name() = 'partyIdScheme'], 'id')] |
//*[local-name() = 'entityPartyReference']//*[local-name() = 'partyId'][contains(@*[local-name() = 'partyIdScheme'], 'id')] |
//*[local-name() = 'entity']//*[local-name() = 'partyId'][contains(@*[local-name() = 'partyIdScheme'], 'id')]</path>
              <expression>"$Entity"</expression>
            </PdtColumnDest>
            <PdtColumnDest>
              <path>
//*[local-name() = 'counterparty']//*[local-name() = 'partyId'][contains(@*[local-name() = 'partyIdScheme'], 'id')] |
//*[local-name() = 'sellerPartyReference']//*[local-name() = 'partyId'][contains(@*[local-name() = 'partyIdScheme'], 'id')]</path>
              <expression>"$Ctpy"</expression>
            </PdtColumnDest>
            <PdtColumnDest>
              <path>//*[local-name() = 'accountId']</path>
              <Lookup>
                <Expression>@"
SELECT A.ID
FROM BO_TREASURY_ACCOUNT A
    JOIN BO_TREASURY_EXT_REF R ON R.ACC_ID = A.ID
    JOIN BO_TREASURY_EXT_REF_DEF D ON D.REF_ID = R.REF_ID AND D.REF_NAME = 'CBAccountID'
WHERE R.VALUE = '" + colVal + "'"</Expression>
                <Table>SQL</Table>
              </Lookup>
            </PdtColumnDest>
            <PdtColumnDest>
              <path>//*[local-name() = 'depositary']//*[local-name() = 'partyId'][contains(@*[local-name() = 'partyIdScheme'], 'id')]</path>
              <Lookup>
                <Expression>@"
SELECT T.IDENT
FROM BO_TREASURY_ACCOUNT A
    JOIN BO_TREASURY_EXT_REF R ON R.ACC_ID = A.ID
    JOIN BO_TREASURY_EXT_REF_DEF D ON D.REF_ID = R.REF_ID AND D.REF_NAME = 'CBAccountID'
    JOIN TIERS T ON T.REFERENCE = A.CUSTODIAN
WHERE R.VALUE = '" + colVal + "'"</Expression>
                <Table>SQL</Table>
              </Lookup>
            </PdtColumnDest>
          </destPaths>
        </PdtColumn>
        <PdtColumn>
          <name>Related Reference</name>
          <len>0</len>
          <isRequired>true</isRequired>
          <isRelativeToRootNode>true</isRelativeToRootNode>
        </PdtColumn>
        <PdtColumn>
          <name>Related Reference of the Original Message</name>
          <len>0</len>
          <isRequired>true</isRequired>
          <isRelativeToRootNode>true</isRelativeToRootNode>
        </PdtColumn>
        <PdtColumn>
          <name>Original Instruction Date</name>
          <len>0</len>
          <isRequired>true</isRequired>
          <isRelativeToRootNode>true</isRelativeToRootNode>
        </PdtColumn>
        <PdtColumn>
          <name>Value Date</name>
          <len>0</len>
          <isRequired>true</isRequired>
          <isRelativeToRootNode>true</isRelativeToRootNode>
          <destPaths>
            <PdtColumnDest>
              <path>//*[local-name() = 'tradeDate'] | //*[local-name() = 'unadjustedDate']</path>
              <expression>colVal.Trim() == "" ? "" : System.DateTime.ParseExact(colVal, "yyMMdd", System.Globalization.CultureInfo.InvariantCulture).ToString("yyyy-MM-dd")</expression>
            </PdtColumnDest>
            <PdtColumnDest>
              <path>//*[local-name() = 'adjustedPaymentDate'] | //*[local-name() = 'tradeHeader']/*[local-name() = 'paymentDate']</path>
              <expression>colVal.Trim() == "" ? "" : System.DateTime.ParseExact(colVal, "yyMMdd", System.Globalization.CultureInfo.InvariantCulture).ToString("yyyy-MM-dd")</expression>
            </PdtColumnDest>
            <PdtColumnDest>
              <path>//*[local-name() = 'settlementDate'] | //*[local-name() = 'pnLDate']</path>
              <expression>DateTime.Today.ToString("yyyy-MM-dd")</expression>
            </PdtColumnDest>
          </destPaths>
        </PdtColumn>
        <PdtColumn>
          <name>Currency Code of Settled Amount</name>
          <len>0</len>
          <isRequired>true</isRequired>
          <isRelativeToRootNode>true</isRelativeToRootNode>
          <destPaths>
            <PdtColumnDest>
              <path>//*[local-name() = 'principalSettlement']//*[local-name() = 'amount']//*[local-name() = 'currency']</path>
            </PdtColumnDest>
            <PdtColumnDest>
              <path>//*[local-name() = 'principalSettlement']//*[local-name() = 'grossAmount']//*[local-name() = 'currency']</path>
            </PdtColumnDest>
            <PdtColumnDest>
              <path>//*[local-name() = 'paymentAmount']//*[local-name() = 'currency']</path>
            </PdtColumnDest>
            <PdtColumnDest>
              <path>//*[local-name() = 'detailedFee']//*[local-name() = 'currency']</path>
            </PdtColumnDest>
            <PdtColumnDest>
              <path>//*[local-name() = 'reference'][@*[local-name() = 'name'] = 'Sophisref']</path>
              <expression>"MARGIN CALL " + colVal</expression>
            </PdtColumnDest>
          </destPaths>
        </PdtColumn>
        <PdtColumn>
          <name>Settled Amount</name>
          <len>0</len>
          <isRequired>true</isRequired>
          <isRelativeToRootNode>true</isRelativeToRootNode>
          <destPaths>
            <PdtColumnDest>
              <path>//*[local-name() = 'principalSettlement']/*[local-name() = 'amount']/*[local-name() = 'amount']</path>
              <expression>-1 * double.Parse(colVal)</expression>
            </PdtColumnDest>
          </destPaths>
        </PdtColumn>
        <PdtColumn>
          <name>Ordering Customer BIC</name>
          <len>0</len>
          <isRequired>true</isRequired>
          <isRelativeToRootNode>true</isRelativeToRootNode>
        </PdtColumn>
        <PdtColumn>
          <name>Ordering Customer Party Identifier Code</name>
          <len>0</len>
          <isRequired>true</isRequired>
          <isRelativeToRootNode>true</isRelativeToRootNode>
        </PdtColumn>
        <PdtColumn>
          <name>Ordering Customer Country Code</name>
          <len>0</len>
          <isRequired>true</isRequired>
          <isRelativeToRootNode>true</isRelativeToRootNode>
        </PdtColumn>
        <PdtColumn>
          <name>Ordering Customer Party Identifier</name>
          <len>0</len>
          <isRequired>true</isRequired>
          <isRelativeToRootNode>true</isRelativeToRootNode>
        </PdtColumn>
        <PdtColumn>
          <name>Ordering Customer Name &amp; Address</name>
          <len>0</len>
          <isRequired>true</isRequired>
          <isRelativeToRootNode>true</isRelativeToRootNode>
        </PdtColumn>
        <PdtColumn>
          <name>Ordering Customer Account</name>
          <len>0</len>
          <isRequired>true</isRequired>
          <isRelativeToRootNode>true</isRelativeToRootNode>
        </PdtColumn>
        <PdtColumn>
          <name>Ordering Institution BIC</name>
          <len>0</len>
          <isRequired>true</isRequired>
          <isRelativeToRootNode>true</isRelativeToRootNode>
        </PdtColumn>
        <PdtColumn>
          <name>Ordering Institution Clearing System Code</name>
          <len>0</len>
          <isRequired>true</isRequired>
          <isRelativeToRootNode>true</isRelativeToRootNode>
        </PdtColumn>
        <PdtColumn>
          <name>Ordering Institution Name &amp; Address</name>
          <len>0</len>
          <isRequired>true</isRequired>
          <isRelativeToRootNode>true</isRelativeToRootNode>
        </PdtColumn>
        <PdtColumn>
          <name>Ordering Institution Account</name>
          <len>0</len>
          <isRequired>true</isRequired>
          <isRelativeToRootNode>true</isRelativeToRootNode>
        </PdtColumn>
        <PdtColumn>
          <name>Sender's Correspondent BIC</name>
          <len>0</len>
          <isRequired>true</isRequired>
          <isRelativeToRootNode>true</isRelativeToRootNode>
        </PdtColumn>
        <PdtColumn>
          <name>Sender's Correspondent Location</name>
          <len>0</len>
          <isRequired>true</isRequired>
          <isRelativeToRootNode>true</isRelativeToRootNode>
        </PdtColumn>
        <PdtColumn>
          <name>Sender's Correspondent Name &amp; Address</name>
          <len>0</len>
          <isRequired>true</isRequired>
          <isRelativeToRootNode>true</isRelativeToRootNode>
        </PdtColumn>
        <PdtColumn>
          <name>Receiver's Correspondent BIC</name>
          <len>0</len>
          <isRequired>true</isRequired>
          <isRelativeToRootNode>true</isRelativeToRootNode>
        </PdtColumn>
        <PdtColumn>
          <name>Receiver's Correspondent Location</name>
          <len>0</len>
          <isRequired>true</isRequired>
          <isRelativeToRootNode>true</isRelativeToRootNode>
        </PdtColumn>
        <PdtColumn>
          <name>Receiver's Correspondent Name &amp; Address</name>
          <len>0</len>
          <isRequired>true</isRequired>
          <isRelativeToRootNode>true</isRelativeToRootNode>
        </PdtColumn>
        <PdtColumn>
          <name>Receiver's Correspondent Account</name>
          <len>0</len>
          <isRequired>true</isRequired>
          <isRelativeToRootNode>true</isRelativeToRootNode>
        </PdtColumn>
        <PdtColumn>
          <name>Intermediary Institution BIC</name>
          <len>0</len>
          <isRequired>true</isRequired>
          <isRelativeToRootNode>true</isRelativeToRootNode>
        </PdtColumn>
        <PdtColumn>
          <name>Intermediary Institution Clearing System Code</name>
          <len>0</len>
          <isRequired>true</isRequired>
          <isRelativeToRootNode>true</isRelativeToRootNode>
        </PdtColumn>
        <PdtColumn>
          <name>Intermediary Institution Name &amp; Address</name>
          <len>0</len>
          <isRequired>true</isRequired>
          <isRelativeToRootNode>true</isRelativeToRootNode>
        </PdtColumn>
        <PdtColumn>
          <name>Intermediary Institution Account</name>
          <len>0</len>
          <isRequired>true</isRequired>
          <isRelativeToRootNode>true</isRelativeToRootNode>
        </PdtColumn>
        <PdtColumn>
          <name>Account with Institution BIC</name>
          <len>0</len>
          <isRequired>true</isRequired>
          <isRelativeToRootNode>true</isRelativeToRootNode>
        </PdtColumn>
        <PdtColumn>
          <name>Account with Institution Clearing System Code</name>
          <len>0</len>
          <isRequired>true</isRequired>
          <isRelativeToRootNode>true</isRelativeToRootNode>
        </PdtColumn>
        <PdtColumn>
          <name>Account with Institution Location</name>
          <len>0</len>
          <isRequired>true</isRequired>
          <isRelativeToRootNode>true</isRelativeToRootNode>
        </PdtColumn>
        <PdtColumn>
          <name>Account with Institution Name &amp; Address</name>
          <len>0</len>
          <isRequired>true</isRequired>
          <isRelativeToRootNode>true</isRelativeToRootNode>
        </PdtColumn>
        <PdtColumn>
          <name>Account with Institution Account</name>
          <len>0</len>
          <isRequired>true</isRequired>
          <isRelativeToRootNode>true</isRelativeToRootNode>
        </PdtColumn>
        <PdtColumn>
          <name>Beneficiary Institution BIC</name>
          <len>0</len>
          <isRequired>true</isRequired>
          <isRelativeToRootNode>true</isRelativeToRootNode>
        </PdtColumn>
        <PdtColumn>
          <name>Beneficiary Institution Clearing Code</name>
          <len>0</len>
          <isRequired>true</isRequired>
          <isRelativeToRootNode>true</isRelativeToRootNode>
        </PdtColumn>
        <PdtColumn>
          <name>Beneficiary Institution Name &amp; Address</name>
          <len>0</len>
          <isRequired>true</isRequired>
          <isRelativeToRootNode>true</isRelativeToRootNode>
        </PdtColumn>
        <PdtColumn>
          <name>Beneficiary Institution Account</name>
          <len>0</len>
          <isRequired>true</isRequired>
          <isRelativeToRootNode>true</isRelativeToRootNode>
        </PdtColumn>
        <PdtColumn>
          <name>Sender to Receiver Information First line Narrative</name>
          <len>0</len>
          <isRequired>true</isRequired>
          <isRelativeToRootNode>true</isRelativeToRootNode>
        </PdtColumn>
        <PdtColumn>
          <name>Sender to Receiver Information 2nd line Narrative</name>
          <len>0</len>
          <isRequired>true</isRequired>
          <isRelativeToRootNode>true</isRelativeToRootNode>
        </PdtColumn>
        <PdtColumn>
          <name>Sender to Receiver Information 3rd line Narrative</name>
          <len>0</len>
          <isRequired>true</isRequired>
          <isRelativeToRootNode>true</isRelativeToRootNode>
        </PdtColumn>
        <PdtColumn>
          <name>Sender to Receiver Information – 4th line Narrative</name>
          <len>0</len>
          <isRequired>true</isRequired>
          <isRelativeToRootNode>true</isRelativeToRootNode>
        </PdtColumn>
        <PdtColumn>
          <name>Sender to Receiver Information – 5th line Narrative</name>
          <len>0</len>
          <isRequired>true</isRequired>
          <isRelativeToRootNode>true</isRelativeToRootNode>
        </PdtColumn>
        <PdtColumn>
          <name>Sender to Receiver Information – 6th line Narrative</name>
          <len>0</len>
          <isRequired>true</isRequired>
          <isRelativeToRootNode>true</isRelativeToRootNode>
        </PdtColumn>
        <PdtColumn>
          <name>Sender to Receiver Information for Cancel Message</name>
          <len>0</len>
          <isRequired>true</isRequired>
          <isRelativeToRootNode>true</isRelativeToRootNode>
        </PdtColumn>
      </columns>
    </PdtTransformation>
    <PdtTransformation>
      <name>SSB2Rbc_CashCollateralTrade</name>
      <type>Csv2Csv</type>
      <label>SSB to RBC Cash Collateral Trade</label>
      <category>Medio</category>
      <templateFile>Rbc_CashCollateralTrade.csv</templateFile>
      <csvSrcSeparator>0</csvSrcSeparator>
      <csvDestSeparator>59</csvDestSeparator>
      <processingCondition>"$TransactionType" == "VMI" || "$TransactionType" == "PMI" || "$TransactionType" == "MADV"</processingCondition>
      <variables>
        <PdtVariable>
          <name>SignOfTransaction</name>
          <expressionBefore>lineVal.Substring(51, 1)</expressionBefore>
        </PdtVariable>
        <PdtVariable>
          <name>TransactionType</name>
          <expressionBefore>lineVal.Substring(47, 4).Trim()</expressionBefore>
        </PdtVariable>
      </variables>
      <columns>
        <PdtColumn>
          <name>Portfolio Code</name>
          <len>6</len>
          <isRequired>false</isRequired>
          <isRelativeToRootNode>false</isRelativeToRootNode>
          <destPaths>
            <PdtColumnDest>
              <path>Fund Custody Code</path>
            </PdtColumnDest>
            <PdtColumnDest>
              <path>PTG Name</path>
            </PdtColumnDest>
            <PdtColumnDest>
              <path>Fund Manager Reference</path>
            </PdtColumnDest>
            <PdtColumnDest>
              <path>External Fund Identifier</path>
              <expression>colVal == "M6" ? "GFJN" : colVal == "M4" ? "GFJG" : colVal</expression>
            </PdtColumnDest>
          </destPaths>
        </PdtColumn>
        <PdtColumn>
          <name>ISO Currency Code</name>
          <len>3</len>
          <isRequired>false</isRequired>
          <isRelativeToRootNode>false</isRelativeToRootNode>
          <destPaths>
            <PdtColumnDest>
              <path>Currency</path>
            </PdtColumnDest>
          </destPaths>
        </PdtColumn>
        <PdtColumn>
          <name>Internal Transaction Number</name>
          <len>12</len>
          <isRequired>false</isRequired>
          <isRelativeToRootNode>false</isRelativeToRootNode>
          <destPaths>
            <PdtColumnDest>
              <path>Transaction ID</path>
            </PdtColumnDest>
          </destPaths>
        </PdtColumn>
        <PdtColumn>
          <name>Internal Contract Number</name>
          <len>10</len>
          <isRequired>false</isRequired>
          <isRelativeToRootNode>false</isRelativeToRootNode>
        </PdtColumn>
        <PdtColumn>
          <name>Transaction Date</name>
          <len>8</len>
          <isRequired>false</isRequired>
          <isRelativeToRootNode>false</isRelativeToRootNode>
          <destPaths>
            <PdtColumnDest>
              <path>Trade Date</path>
              <expression>colVal.Trim() == "" ? "" : System.DateTime.ParseExact(colVal, "yyyyMMdd", System.Globalization.CultureInfo.InvariantCulture).ToString("dd/MM/yyyy")</expression>
            </PdtColumnDest>
          </destPaths>
        </PdtColumn>
        <PdtColumn>
          <name>Settle Date</name>
          <len>8</len>
          <isRequired>false</isRequired>
          <isRelativeToRootNode>false</isRelativeToRootNode>
          <destPaths>
            <PdtColumnDest>
              <path>Settlement Date</path>
              <expression>colVal.Trim() == "" ? "" : System.DateTime.ParseExact(colVal, "yyyyMMdd", System.Globalization.CultureInfo.InvariantCulture).ToString("dd/MM/yyyy")</expression>
            </PdtColumnDest>
          </destPaths>
        </PdtColumn>
        <PdtColumn>
          <name>Type of Transaction</name>
          <len>4</len>
          <isRequired>false</isRequired>
          <isRelativeToRootNode>false</isRelativeToRootNode>
          <destPaths>
            <PdtColumnDest>
              <path>Transaction Description</path>
              <expression>colVal == "VMI" ? "CASH DIRECT ENTRY" : colVal == "PMI" ? "CASH WITHDRAWAL" : "CASH VARIATION MARGIN"</expression>
            </PdtColumnDest>
          </destPaths>
        </PdtColumn>
        <PdtColumn>
          <name>Sign of Transaction</name>
          <len>1</len>
          <isRequired>false</isRequired>
          <isRelativeToRootNode>false</isRelativeToRootNode>
        </PdtColumn>
        <PdtColumn>
          <name>Broker Code</name>
          <len>8</len>
          <isRequired>false</isRequired>
          <isRelativeToRootNode>false</isRelativeToRootNode>
          <destPaths>
            <PdtColumnDest>
              <path>Collateral Counterparty Name</path>
              <expression>"State Street Milan"</expression>
            </PdtColumnDest>
            <PdtColumnDest>
              <path>Collateral Counterparty BIC Code</path>
              <expression>"SBOSGB2"</expression>
            </PdtColumnDest>
          </destPaths>
        </PdtColumn>
        <PdtColumn>
          <name>Current Amount</name>
          <len>17</len>
          <isRequired>false</isRequired>
          <isRelativeToRootNode>false</isRelativeToRootNode>
          <destPaths>
            <PdtColumnDest>
              <path>Quantity</path>
              <expression>0</expression>
            </PdtColumnDest>
            <PdtColumnDest>
              <path>Net Amount</path>
              <expression>("$TransactionType" == "VMI" ? "+" : "$TransactionType" == "PMI" ? "-" : "$SignOfTransaction") + colVal.Substring(0, 15 - int.Parse(colVal.Substring(15, 1))) + "." + colVal.Substring(15 - int.Parse(colVal.Substring(15, 1)), int.Parse(colVal.Substring(15, 1)))</expression>
            </PdtColumnDest>
          </destPaths>
        </PdtColumn>
        <PdtColumn>
          <name>Internal Security Number</name>
          <len>10</len>
          <isRequired>false</isRequired>
          <isRelativeToRootNode>false</isRelativeToRootNode>
        </PdtColumn>
        <PdtColumn>
          <name>Position Type</name>
          <len>1</len>
          <isRequired>false</isRequired>
          <isRelativeToRootNode>false</isRelativeToRootNode>
        </PdtColumn>
        <PdtColumn>
          <name>External reference</name>
          <len>16</len>
          <isRequired>false</isRequired>
          <isRelativeToRootNode>false</isRelativeToRootNode>
        </PdtColumn>
      </columns>
    </PdtTransformation>
    <PdtTransformation>
      <name>SSB2Rbc_CashMonthlyInterest</name>
      <type>Csv2Csv</type>
      <label>SSB to RBC Cash Monthly Interest</label>
      <category>Medio</category>
      <templateFile>Rbc_CashMonthlyInterest.csv</templateFile>
      <csvSrcSeparator>0</csvSrcSeparator>
      <csvDestSeparator>59</csvDestSeparator>
      <processingCondition>lineVal.Substring(47, 4).Trim() == "ITR"</processingCondition>
      <variables>
        <PdtVariable>
          <name>SignOfTransaction</name>
          <expressionBefore>lineVal.Substring(51, 1)</expressionBefore>
        </PdtVariable>
      </variables>
      <columns>
        <PdtColumn>
          <name>Portfolio Code</name>
          <len>6</len>
          <isRequired>false</isRequired>
          <isRelativeToRootNode>false</isRelativeToRootNode>
          <destPaths>
            <PdtColumnDest>
              <path>Fund Custody Code</path>
            </PdtColumnDest>
            <PdtColumnDest>
              <path>External Fund Identifier</path>
            </PdtColumnDest>
            <PdtColumnDest>
              <path>Fund Name</path>
              <Lookup>
                <File>MIFL_ME_10FLSNV_202*</File>
                <Expression>lineVal.Substring(0, 6).Trim() == colVal ? lineVal.Substring(6, 40).Trim() : ""</Expression>
              </Lookup>
            </PdtColumnDest>
          </destPaths>
        </PdtColumn>
        <PdtColumn>
          <name>ISO Currency Code</name>
          <len>3</len>
          <isRequired>false</isRequired>
          <isRelativeToRootNode>false</isRelativeToRootNode>
          <destPaths>
            <PdtColumnDest>
              <path>Currency</path>
            </PdtColumnDest>
          </destPaths>
        </PdtColumn>
        <PdtColumn>
          <name>Internal Transaction Number</name>
          <len>12</len>
          <isRequired>false</isRequired>
          <isRelativeToRootNode>false</isRelativeToRootNode>
          <destPaths>
            <PdtColumnDest>
              <path>Transaction ID</path>
            </PdtColumnDest>
          </destPaths>
        </PdtColumn>
        <PdtColumn>
          <name>Internal Contract Number</name>
          <len>10</len>
          <isRequired>false</isRequired>
          <isRelativeToRootNode>false</isRelativeToRootNode>
        </PdtColumn>
        <PdtColumn>
          <name>Transaction Date</name>
          <len>8</len>
          <isRequired>false</isRequired>
          <isRelativeToRootNode>false</isRelativeToRootNode>
          <destPaths>
            <PdtColumnDest>
              <path>Trade Date</path>
              <expression>colVal.Trim() == "" ? "" : System.DateTime.ParseExact(string.Compare(colVal, lineVal.Substring(39, 8).Trim()) == 1 ? lineVal.Substring(39, 8).Trim() : colVal, "yyyyMMdd", System.Globalization.CultureInfo.InvariantCulture).ToString("dd/MM/yyyy")</expression>
            </PdtColumnDest>
          </destPaths>
        </PdtColumn>
        <PdtColumn>
          <name>Settle Date</name>
          <len>8</len>
          <isRequired>false</isRequired>
          <isRelativeToRootNode>false</isRelativeToRootNode>
          <destPaths>
            <PdtColumnDest>
              <path>Value Date</path>
              <expression>colVal.Trim() == "" ? "" : System.DateTime.ParseExact(colVal, "yyyyMMdd", System.Globalization.CultureInfo.InvariantCulture).ToString("dd/MM/yyyy")</expression>
            </PdtColumnDest>
          </destPaths>
        </PdtColumn>
        <PdtColumn>
          <name>Type of Transaction</name>
          <len>4</len>
          <isRequired>false</isRequired>
          <isRelativeToRootNode>false</isRelativeToRootNode>
          <destPaths>
            <PdtColumnDest>
              <path>Transaction Type</path>
              <expression>"S1"</expression>
            </PdtColumnDest>
          </destPaths>
        </PdtColumn>
        <PdtColumn>
          <name>Sign of Transaction</name>
          <len>1</len>
          <isRequired>false</isRequired>
          <isRelativeToRootNode>false</isRelativeToRootNode>
        </PdtColumn>
        <PdtColumn>
          <name>Broker Code</name>
          <len>8</len>
          <isRequired>false</isRequired>
          <isRelativeToRootNode>false</isRelativeToRootNode>
        </PdtColumn>
        <PdtColumn>
          <name>Current Amount</name>
          <len>17</len>
          <isRequired>false</isRequired>
          <isRelativeToRootNode>false</isRelativeToRootNode>
          <destPaths>
            <PdtColumnDest>
              <path>Amount</path>
              <expression>"$SignOfTransaction" + colVal.Substring(0, 15 - int.Parse(colVal.Substring(15, 1))) + "." + colVal.Substring(15 - int.Parse(colVal.Substring(15, 1)), int.Parse(colVal.Substring(15, 1)))</expression>
            </PdtColumnDest>
          </destPaths>
        </PdtColumn>
        <PdtColumn>
          <name>Internal Security Number</name>
          <len>10</len>
          <isRequired>false</isRequired>
          <isRelativeToRootNode>false</isRelativeToRootNode>
        </PdtColumn>
        <PdtColumn>
          <name>Position Type</name>
          <len>1</len>
          <isRequired>false</isRequired>
          <isRelativeToRootNode>false</isRelativeToRootNode>
        </PdtColumn>
        <PdtColumn>
          <name>External reference</name>
          <len>16</len>
          <isRequired>false</isRequired>
          <isRelativeToRootNode>false</isRelativeToRootNode>
        </PdtColumn>
      </columns>
    </PdtTransformation>
    <PdtTransformation>
      <name>SSB2Rbc_CorporateAction</name>
      <type>Csv2Csv</type>
      <label>SSB to RBC Corporate Action</label>
      <category>Medio</category>
      <templateFile>Rbc_CorporateAction.csv</templateFile>
      <csvSrcSeparator>0</csvSrcSeparator>
      <csvDestSeparator>59</csvDestSeparator>
      <processingCondition>"$SecurityDescription" == "BONDS" &amp;&amp; lineVal.Substring(73, 4) == "RTIT" &amp;&amp; string.Compare("$MaturityDate", lineVal.Substring(36, 8).Trim()) &gt; 0</processingCondition>
      <variables>
        <PdtVariable>
          <name>SecurityDescription</name>
          <expressionBefore>lineVal.Substring(6, 10).Trim()</expressionBefore>
          <Lookup>
            <Table>MIFL_ME_01ANATIT</Table>
            <ColumnIndex>1</ColumnIndex>
            <Lookup>
              <File>MIFL_ME_15DOMIN_*</File>
              <Expression>lineVal.Substring(0, 20).Trim() == "INST_GRP_COD" &amp;&amp; lineVal.Substring(20, 10).Trim() == colVal ? lineVal.Substring(30, 40).Trim() : ""</Expression>
            </Lookup>
          </Lookup>
        </PdtVariable>
        <PdtVariable>
          <name>MaturityDate</name>
          <expressionBefore>lineVal.Substring(6, 10).Trim()</expressionBefore>
          <Lookup>
            <Table>MIFL_ME_01ANATIT</Table>
            <ColumnIndex>5</ColumnIndex>
          </Lookup>
        </PdtVariable>
      </variables>
      <columns>
        <PdtColumn>
          <name>Portfolio Code</name>
          <len>6</len>
          <isRequired>false</isRequired>
          <isRelativeToRootNode>false</isRelativeToRootNode>
          <destPaths>
            <PdtColumnDest>
              <path>Fund Custody Code</path>
            </PdtColumnDest>
            <PdtColumnDest>
              <path>External Fund Identifier</path>
            </PdtColumnDest>
          </destPaths>
        </PdtColumn>
        <PdtColumn>
          <name>Internal Security Number</name>
          <len>10</len>
          <isRequired>false</isRequired>
          <isRelativeToRootNode>false</isRelativeToRootNode>
          <destPaths>
            <PdtColumnDest>
              <path>Security Description</path>
              <expression>"$SecurityDescription" == "EQUITIES" ? "EQUITIES" : "FUNDS"</expression>
            </PdtColumnDest>
            <PdtColumnDest>
              <path>Security Name</path>
              <Lookup>
                <Table>MIFL_ME_01ANATIT</Table>
                <ColumnIndex>4</ColumnIndex>
              </Lookup>
            </PdtColumnDest>
            <PdtColumnDest>
              <path>Type</path>
              <Lookup>
                <Table>MIFL_ME_01ANATIT</Table>
                <ColumnIndex>0</ColumnIndex>
                <Lookup>
                  <File>MIFL_ME_15DOMIN_*</File>
                  <Expression>lineVal.Substring(0, 20).Trim() == "INST_TYP" &amp;&amp; lineVal.Substring(20, 10).Trim() == colVal ? lineVal.Substring(30, 40).Trim() : ""</Expression>
                </Lookup>
              </Lookup>
            </PdtColumnDest>
          </destPaths>
        </PdtColumn>
        <PdtColumn>
          <name>ISIN Code</name>
          <len>12</len>
          <isRequired>false</isRequired>
          <isRelativeToRootNode>false</isRelativeToRootNode>
          <destPaths>
            <PdtColumnDest>
              <path>OLD ISIN</path>
            </PdtColumnDest>
          </destPaths>
        </PdtColumn>
        <PdtColumn>
          <name>Transaction Date</name>
          <len>8</len>
          <isRequired>false</isRequired>
          <isRelativeToRootNode>false</isRelativeToRootNode>
          <destPaths>
            <PdtColumnDest>
              <path>Ex Date</path>
              <expression>System.DateTime.ParseExact(string.Compare(colVal, lineVal.Substring(36, 8).Trim()) == 1 ? lineVal.Substring(36, 8).Trim() : colVal, "yyyyMMdd", System.Globalization.CultureInfo.InvariantCulture).ToString("dd/MM/yyyy")</expression>
            </PdtColumnDest>
          </destPaths>
        </PdtColumn>
        <PdtColumn>
          <name>Settle Date</name>
          <len>8</len>
          <isRequired>false</isRequired>
          <isRelativeToRootNode>false</isRelativeToRootNode>
          <destPaths>
            <PdtColumnDest>
              <path>Payment Date</path>
              <expression>colVal.Trim() == "" ? "" : System.DateTime.ParseExact(colVal, "yyyyMMdd", System.Globalization.CultureInfo.InvariantCulture).ToString("dd/MM/yyyy")</expression>
            </PdtColumnDest>
          </destPaths>
        </PdtColumn>
        <PdtColumn>
          <name>Internal Transaction Number</name>
          <len>12</len>
          <isRequired>false</isRequired>
          <isRelativeToRootNode>false</isRelativeToRootNode>
          <destPaths>
            <PdtColumnDest>
              <path>Transaction ID</path>
            </PdtColumnDest>
          </destPaths>
        </PdtColumn>
        <PdtColumn>
          <name>External Transaction Number</name>
          <len>16</len>
          <isRequired>false</isRequired>
          <isRelativeToRootNode>false</isRelativeToRootNode>
        </PdtColumn>
        <PdtColumn>
          <name>Flag P/T</name>
          <len>1</len>
          <isRequired>false</isRequired>
          <isRelativeToRootNode>false</isRelativeToRootNode>
        </PdtColumn>
        <PdtColumn>
          <name>Type of Transaction</name>
          <len>4</len>
          <isRequired>false</isRequired>
          <isRelativeToRootNode>false</isRelativeToRootNode>
          <destPaths>
            <PdtColumnDest>
              <path>LST Name</path>
              <expression>colVal.Trim() == "RTIT" ? (string.Compare("$MaturityDate", lineVal.Substring(36, 8).Trim()) &gt; 0 ? "Early Redemption" : "Final Redemption") : ""</expression>
            </PdtColumnDest>
            <PdtColumnDest>
              <path>LST Type</path>
              <expression>colVal.Trim() == "RTIT" ? "77" : ""</expression>
            </PdtColumnDest>
            <PdtColumnDest>
              <path>OLD Type</path>
              <expression>colVal.Trim() == "RTIT" ? "Bonds (Corp, Govie)" : ""</expression>
            </PdtColumnDest>
          </destPaths>
        </PdtColumn>
        <PdtColumn>
          <name>Sign of Transaction</name>
          <len>1</len>
          <isRequired>false</isRequired>
          <isRelativeToRootNode>false</isRelativeToRootNode>
        </PdtColumn>
        <PdtColumn>
          <name>Broker Code</name>
          <len>8</len>
          <isRequired>false</isRequired>
          <isRelativeToRootNode>false</isRelativeToRootNode>
        </PdtColumn>
        <PdtColumn>
          <name>Quantity</name>
          <len>17</len>
          <isRequired>false</isRequired>
          <isRelativeToRootNode>false</isRelativeToRootNode>
          <destPaths>
            <PdtColumnDest>
              <path>Out Quantity</path>
              <expression>(lineVal.Substring(77, 1) == "A" ? "+" : "-") + colVal.Substring(0, 15 - int.Parse(colVal.Substring(15, 1))) + "." + colVal.Substring(15 - int.Parse(colVal.Substring(15, 1)), int.Parse(colVal.Substring(15, 1)))</expression>
            </PdtColumnDest>
          </destPaths>
        </PdtColumn>
        <PdtColumn>
          <name>Security Price</name>
          <len>17</len>
          <isRequired>false</isRequired>
          <isRelativeToRootNode>false</isRelativeToRootNode>
          <destPaths>
            <PdtColumnDest>
              <path>Price</path>
              <expression>colVal.Substring(16, 1) + colVal.Substring(0, 15 - int.Parse(colVal.Substring(15, 1))) + "." + colVal.Substring(15 - int.Parse(colVal.Substring(15, 1)), int.Parse(colVal.Substring(15, 1)))</expression>
            </PdtColumnDest>
          </destPaths>
        </PdtColumn>
        <PdtColumn>
          <name>Net Price</name>
          <len>17</len>
          <isRequired>false</isRequired>
          <isRelativeToRootNode>false</isRelativeToRootNode>
        </PdtColumn>
        <PdtColumn>
          <name>Close Price</name>
          <len>17</len>
          <isRequired>false</isRequired>
          <isRelativeToRootNode>false</isRelativeToRootNode>
        </PdtColumn>
        <PdtColumn>
          <name>Accrued Interest Amount</name>
          <len>17</len>
          <isRequired>false</isRequired>
          <isRelativeToRootNode>false</isRelativeToRootNode>
        </PdtColumn>
        <PdtColumn>
          <name>Net Total Amount in Security Currency</name>
          <len>17</len>
          <isRequired>false</isRequired>
          <isRelativeToRootNode>false</isRelativeToRootNode>
        </PdtColumn>
        <PdtColumn>
          <name>Gross Amount in Security Currency</name>
          <len>17</len>
          <isRequired>false</isRequired>
          <isRelativeToRootNode>false</isRelativeToRootNode>
        </PdtColumn>
        <PdtColumn>
          <name>ISO Currency Code</name>
          <len>3</len>
          <isRequired>false</isRequired>
          <isRelativeToRootNode>false</isRelativeToRootNode>
        </PdtColumn>
        <PdtColumn>
          <name>Net Total Amount in Settlement Currency</name>
          <len>17</len>
          <isRequired>false</isRequired>
          <isRelativeToRootNode>false</isRelativeToRootNode>
          <destPaths>
            <PdtColumnDest>
              <path>Net Amount</path>
              <expression>(lineVal.Substring(77, 1) == "A" ? "+" : "-") + colVal.Substring(0, 15 - int.Parse(colVal.Substring(15, 1))) + "." + colVal.Substring(15 - int.Parse(colVal.Substring(15, 1)), int.Parse(colVal.Substring(15, 1)))</expression>
            </PdtColumnDest>
          </destPaths>
        </PdtColumn>
        <PdtColumn>
          <name>Gross Total Amount in Settlement Currency</name>
          <len>17</len>
          <isRequired>false</isRequired>
          <isRelativeToRootNode>false</isRelativeToRootNode>
          <destPaths>
            <PdtColumnDest>
              <path>Gross Amount</path>
              <expression>(lineVal.Substring(77, 1) == "A" ? "+" : "-") + colVal.Substring(0, 15 - int.Parse(colVal.Substring(15, 1))) + "." + colVal.Substring(15 - int.Parse(colVal.Substring(15, 1)), int.Parse(colVal.Substring(15, 1)))</expression>
            </PdtColumnDest>
          </destPaths>
        </PdtColumn>
        <PdtColumn>
          <name>Settlement ISO Currency Code</name>
          <len>3</len>
          <isRequired>false</isRequired>
          <isRelativeToRootNode>false</isRelativeToRootNode>
          <destPaths>
            <PdtColumnDest>
              <path>OLD Ccy</path>
            </PdtColumnDest>
            <PdtColumnDest>
              <path>NEW Ccy</path>
            </PdtColumnDest>
          </destPaths>
        </PdtColumn>
        <PdtColumn>
          <name>Settlement Currency Exchange Rate</name>
          <len>17</len>
          <isRequired>false</isRequired>
          <isRelativeToRootNode>false</isRelativeToRootNode>
        </PdtColumn>
        <PdtColumn>
          <name>Fees Amount</name>
          <len>17</len>
          <isRequired>false</isRequired>
          <isRelativeToRootNode>false</isRelativeToRootNode>
        </PdtColumn>
        <PdtColumn>
          <name>Commission Broker</name>
          <len>17</len>
          <isRequired>false</isRequired>
          <isRelativeToRootNode>false</isRelativeToRootNode>
        </PdtColumn>
        <PdtColumn>
          <name>Commission Others</name>
          <len>17</len>
          <isRequired>false</isRequired>
          <isRelativeToRootNode>false</isRelativeToRootNode>
        </PdtColumn>
        <PdtColumn>
          <name>Internal Contract Number</name>
          <len>10</len>
          <isRequired>false</isRequired>
          <isRelativeToRootNode>false</isRelativeToRootNode>
        </PdtColumn>
      </columns>
    </PdtTransformation>
    <PdtTransformation>
      <name>SSB2Rbc_CorporateActionFR</name>
      <type>Csv2Csv</type>
      <label>SSB to RBC Corporate Action Final Redemption</label>
      <category>Medio</category>
      <templateFile>Rbc_CorporateAction.csv</templateFile>
      <csvSrcSeparator>0</csvSrcSeparator>
      <csvDestSeparator>59</csvDestSeparator>
      <processingCondition>"$SecurityDescription" == "BONDS" &amp;&amp; lineVal.Substring(73, 4) == "RTIT" &amp;&amp; string.Compare("$MaturityDate", lineVal.Substring(36, 8).Trim()) &lt;= 0</processingCondition>
      <variables>
        <PdtVariable>
          <name>SecurityDescription</name>
          <expressionBefore>lineVal.Substring(6, 10).Trim()</expressionBefore>
          <Lookup>
            <Table>MIFL_ME_01ANATIT</Table>
            <ColumnIndex>1</ColumnIndex>
            <Lookup>
              <File>MIFL_ME_15DOMIN_*</File>
              <Expression>lineVal.Substring(0, 20).Trim() == "INST_GRP_COD" &amp;&amp; lineVal.Substring(20, 10).Trim() == colVal ? lineVal.Substring(30, 40).Trim() : ""</Expression>
            </Lookup>
          </Lookup>
        </PdtVariable>
        <PdtVariable>
          <name>MaturityDate</name>
          <expressionBefore>lineVal.Substring(6, 10).Trim()</expressionBefore>
          <Lookup>
            <Table>MIFL_ME_01ANATIT</Table>
            <ColumnIndex>5</ColumnIndex>
          </Lookup>
        </PdtVariable>
      </variables>
      <columns>
        <PdtColumn>
          <name>Portfolio Code</name>
          <len>6</len>
          <isRequired>false</isRequired>
          <isRelativeToRootNode>false</isRelativeToRootNode>
          <destPaths>
            <PdtColumnDest>
              <path>Fund Custody Code</path>
            </PdtColumnDest>
            <PdtColumnDest>
              <path>External Fund Identifier</path>
            </PdtColumnDest>
          </destPaths>
        </PdtColumn>
        <PdtColumn>
          <name>Internal Security Number</name>
          <len>10</len>
          <isRequired>false</isRequired>
          <isRelativeToRootNode>false</isRelativeToRootNode>
          <destPaths>
            <PdtColumnDest>
              <path>Security Description</path>
              <expression>"$SecurityDescription" == "EQUITIES" ? "EQUITIES" : "FUNDS"</expression>
            </PdtColumnDest>
            <PdtColumnDest>
              <path>Security Name</path>
              <Lookup>
                <Table>MIFL_ME_01ANATIT</Table>
                <ColumnIndex>4</ColumnIndex>
              </Lookup>
            </PdtColumnDest>
            <PdtColumnDest>
              <path>Type</path>
              <Lookup>
                <Table>MIFL_ME_01ANATIT</Table>
                <ColumnIndex>0</ColumnIndex>
                <Lookup>
                  <File>MIFL_ME_15DOMIN_*</File>
                  <Expression>lineVal.Substring(0, 20).Trim() == "INST_TYP" &amp;&amp; lineVal.Substring(20, 10).Trim() == colVal ? lineVal.Substring(30, 40).Trim() : ""</Expression>
                </Lookup>
              </Lookup>
            </PdtColumnDest>
          </destPaths>
        </PdtColumn>
        <PdtColumn>
          <name>ISIN Code</name>
          <len>12</len>
          <isRequired>false</isRequired>
          <isRelativeToRootNode>false</isRelativeToRootNode>
          <destPaths>
            <PdtColumnDest>
              <path>OLD ISIN</path>
            </PdtColumnDest>
          </destPaths>
        </PdtColumn>
        <PdtColumn>
          <name>Transaction Date</name>
          <len>8</len>
          <isRequired>false</isRequired>
          <isRelativeToRootNode>false</isRelativeToRootNode>
          <destPaths>
            <PdtColumnDest>
              <path>Ex Date</path>
              <expression>System.DateTime.ParseExact(string.Compare(colVal, lineVal.Substring(36, 8).Trim()) == 1 ? lineVal.Substring(36, 8).Trim() : colVal, "yyyyMMdd", System.Globalization.CultureInfo.InvariantCulture).ToString("dd/MM/yyyy")</expression>
            </PdtColumnDest>
          </destPaths>
        </PdtColumn>
        <PdtColumn>
          <name>Settle Date</name>
          <len>8</len>
          <isRequired>false</isRequired>
          <isRelativeToRootNode>false</isRelativeToRootNode>
          <destPaths>
            <PdtColumnDest>
              <path>Payment Date</path>
              <expression>colVal.Trim() == "" ? "" : System.DateTime.ParseExact(colVal, "yyyyMMdd", System.Globalization.CultureInfo.InvariantCulture).ToString("dd/MM/yyyy")</expression>
            </PdtColumnDest>
          </destPaths>
        </PdtColumn>
        <PdtColumn>
          <name>Internal Transaction Number</name>
          <len>12</len>
          <isRequired>false</isRequired>
          <isRelativeToRootNode>false</isRelativeToRootNode>
          <destPaths>
            <PdtColumnDest>
              <path>Transaction ID</path>
            </PdtColumnDest>
          </destPaths>
        </PdtColumn>
        <PdtColumn>
          <name>External Transaction Number</name>
          <len>16</len>
          <isRequired>false</isRequired>
          <isRelativeToRootNode>false</isRelativeToRootNode>
        </PdtColumn>
        <PdtColumn>
          <name>Flag P/T</name>
          <len>1</len>
          <isRequired>false</isRequired>
          <isRelativeToRootNode>false</isRelativeToRootNode>
        </PdtColumn>
        <PdtColumn>
          <name>Type of Transaction</name>
          <len>4</len>
          <isRequired>false</isRequired>
          <isRelativeToRootNode>false</isRelativeToRootNode>
          <destPaths>
            <PdtColumnDest>
              <path>LST Name</path>
              <expression>colVal.Trim() == "RTIT" ? (string.Compare("$MaturityDate", lineVal.Substring(36, 8).Trim()) &gt; 0 ? "Early Redemption" : "Final Redemption") : ""</expression>
            </PdtColumnDest>
            <PdtColumnDest>
              <path>LST Type</path>
              <expression>colVal.Trim() == "RTIT" ? "77" : ""</expression>
            </PdtColumnDest>
            <PdtColumnDest>
              <path>OLD Type</path>
              <expression>colVal.Trim() == "RTIT" ? "Bonds (Corp, Govie)" : ""</expression>
            </PdtColumnDest>
          </destPaths>
        </PdtColumn>
        <PdtColumn>
          <name>Sign of Transaction</name>
          <len>1</len>
          <isRequired>false</isRequired>
          <isRelativeToRootNode>false</isRelativeToRootNode>
        </PdtColumn>
        <PdtColumn>
          <name>Broker Code</name>
          <len>8</len>
          <isRequired>false</isRequired>
          <isRelativeToRootNode>false</isRelativeToRootNode>
        </PdtColumn>
        <PdtColumn>
          <name>Quantity</name>
          <len>17</len>
          <isRequired>false</isRequired>
          <isRelativeToRootNode>false</isRelativeToRootNode>
          <destPaths>
            <PdtColumnDest>
              <path>Out Quantity</path>
              <expression>(lineVal.Substring(77, 1) == "A" ? "+" : "-") + colVal.Substring(0, 15 - int.Parse(colVal.Substring(15, 1))) + "." + colVal.Substring(15 - int.Parse(colVal.Substring(15, 1)), int.Parse(colVal.Substring(15, 1)))</expression>
            </PdtColumnDest>
          </destPaths>
        </PdtColumn>
        <PdtColumn>
          <name>Security Price</name>
          <len>17</len>
          <isRequired>false</isRequired>
          <isRelativeToRootNode>false</isRelativeToRootNode>
          <destPaths>
            <PdtColumnDest>
              <path>Price</path>
              <expression>colVal.Substring(16, 1) + colVal.Substring(0, 15 - int.Parse(colVal.Substring(15, 1))) + "." + colVal.Substring(15 - int.Parse(colVal.Substring(15, 1)), int.Parse(colVal.Substring(15, 1)))</expression>
            </PdtColumnDest>
          </destPaths>
        </PdtColumn>
        <PdtColumn>
          <name>Net Price</name>
          <len>17</len>
          <isRequired>false</isRequired>
          <isRelativeToRootNode>false</isRelativeToRootNode>
        </PdtColumn>
        <PdtColumn>
          <name>Close Price</name>
          <len>17</len>
          <isRequired>false</isRequired>
          <isRelativeToRootNode>false</isRelativeToRootNode>
        </PdtColumn>
        <PdtColumn>
          <name>Accrued Interest Amount</name>
          <len>17</len>
          <isRequired>false</isRequired>
          <isRelativeToRootNode>false</isRelativeToRootNode>
        </PdtColumn>
        <PdtColumn>
          <name>Net Total Amount in Security Currency</name>
          <len>17</len>
          <isRequired>false</isRequired>
          <isRelativeToRootNode>false</isRelativeToRootNode>
        </PdtColumn>
        <PdtColumn>
          <name>Gross Amount in Security Currency</name>
          <len>17</len>
          <isRequired>false</isRequired>
          <isRelativeToRootNode>false</isRelativeToRootNode>
        </PdtColumn>
        <PdtColumn>
          <name>ISO Currency Code</name>
          <len>3</len>
          <isRequired>false</isRequired>
          <isRelativeToRootNode>false</isRelativeToRootNode>
        </PdtColumn>
        <PdtColumn>
          <name>Net Total Amount in Settlement Currency</name>
          <len>17</len>
          <isRequired>false</isRequired>
          <isRelativeToRootNode>false</isRelativeToRootNode>
          <destPaths>
            <PdtColumnDest>
              <path>Net Amount</path>
              <expression>(lineVal.Substring(77, 1) == "A" ? "+" : "-") + colVal.Substring(0, 15 - int.Parse(colVal.Substring(15, 1))) + "." + colVal.Substring(15 - int.Parse(colVal.Substring(15, 1)), int.Parse(colVal.Substring(15, 1)))</expression>
            </PdtColumnDest>
          </destPaths>
        </PdtColumn>
        <PdtColumn>
          <name>Gross Total Amount in Settlement Currency</name>
          <len>17</len>
          <isRequired>false</isRequired>
          <isRelativeToRootNode>false</isRelativeToRootNode>
          <destPaths>
            <PdtColumnDest>
              <path>Gross Amount</path>
              <expression>(lineVal.Substring(77, 1) == "A" ? "+" : "-") + colVal.Substring(0, 15 - int.Parse(colVal.Substring(15, 1))) + "." + colVal.Substring(15 - int.Parse(colVal.Substring(15, 1)), int.Parse(colVal.Substring(15, 1)))</expression>
            </PdtColumnDest>
          </destPaths>
        </PdtColumn>
        <PdtColumn>
          <name>Settlement ISO Currency Code</name>
          <len>3</len>
          <isRequired>false</isRequired>
          <isRelativeToRootNode>false</isRelativeToRootNode>
          <destPaths>
            <PdtColumnDest>
              <path>OLD Ccy</path>
            </PdtColumnDest>
            <PdtColumnDest>
              <path>NEW Ccy</path>
            </PdtColumnDest>
          </destPaths>
        </PdtColumn>
        <PdtColumn>
          <name>Settlement Currency Exchange Rate</name>
          <len>17</len>
          <isRequired>false</isRequired>
          <isRelativeToRootNode>false</isRelativeToRootNode>
        </PdtColumn>
        <PdtColumn>
          <name>Fees Amount</name>
          <len>17</len>
          <isRequired>false</isRequired>
          <isRelativeToRootNode>false</isRelativeToRootNode>
        </PdtColumn>
        <PdtColumn>
          <name>Commission Broker</name>
          <len>17</len>
          <isRequired>false</isRequired>
          <isRelativeToRootNode>false</isRelativeToRootNode>
        </PdtColumn>
        <PdtColumn>
          <name>Commission Others</name>
          <len>17</len>
          <isRequired>false</isRequired>
          <isRelativeToRootNode>false</isRelativeToRootNode>
        </PdtColumn>
        <PdtColumn>
          <name>Internal Contract Number</name>
          <len>10</len>
          <isRequired>false</isRequired>
          <isRelativeToRootNode>false</isRelativeToRootNode>
        </PdtColumn>
      </columns>
    </PdtTransformation>
    <PdtTransformation>
      <name>SSB2Rbc_SR</name>
      <type>Csv2Csv</type>
      <label>SSB to RBC Subscription Redemption</label>
      <category>Medio</category>
      <templateFile>Rbc_SR.csv</templateFile>
      <csvSrcSeparator>0</csvSrcSeparator>
      <csvDestSeparator>59</csvDestSeparator>
      <processingCondition>lineVal.Substring(84, 4).Trim() == "SOT" || lineVal.Substring(84, 4).Trim() == "RIS"</processingCondition>
      <columns>
        <PdtColumn>
          <name>Portfolio Code</name>
          <len>6</len>
          <isRequired>false</isRequired>
          <isRelativeToRootNode>false</isRelativeToRootNode>
          <destPaths>
            <PdtColumnDest>
              <path>Fund Custody Code / SARA code</path>
            </PdtColumnDest>
            <PdtColumnDest>
              <path>MF code</path>
            </PdtColumnDest>
            <PdtColumnDest>
              <path>Fund Manager Identifier</path>
            </PdtColumnDest>
            <PdtColumnDest>
              <path>External Fund Reference</path>
              <expression>colVal == "M6" ? "GFJN" : colVal == "M4" ? "GFJG" : colVal</expression>
            </PdtColumnDest>
          </destPaths>
        </PdtColumn>
        <PdtColumn>
          <name>Account Code</name>
          <len>12</len>
          <isRequired>false</isRequired>
          <isRelativeToRootNode>false</isRelativeToRootNode>
        </PdtColumn>
        <PdtColumn>
          <name>Account Name</name>
          <len>50</len>
          <isRequired>false</isRequired>
          <isRelativeToRootNode>false</isRelativeToRootNode>
        </PdtColumn>
        <PdtColumn>
          <name>NAV Date</name>
          <len>8</len>
          <isRequired>false</isRequired>
          <isRelativeToRootNode>false</isRelativeToRootNode>
          <destPaths>
            <PdtColumnDest>
              <path>Trade Date</path>
              <expression>colVal.Trim() == "" ? "" : System.DateTime.ParseExact(colVal, "yyyyMMdd", System.Globalization.CultureInfo.InvariantCulture).ToString("dd/MM/yyyy")</expression>
            </PdtColumnDest>
            <PdtColumnDest>
              <path>Creation Date</path>
              <expression>colVal.Trim() == "" ? "" : System.DateTime.ParseExact(colVal, "yyyyMMdd", System.Globalization.CultureInfo.InvariantCulture).ToString("dd/MM/yyyy")</expression>
            </PdtColumnDest>
            <PdtColumnDest>
              <path>ReportDate</path>
              <expression>colVal.Trim() == "" ? "" : System.DateTime.ParseExact(colVal, "yyyyMMdd", System.Globalization.CultureInfo.InvariantCulture).ToString("dd/MM/yyyy")</expression>
            </PdtColumnDest>
          </destPaths>
        </PdtColumn>
        <PdtColumn>
          <name>Settlement Date</name>
          <len>8</len>
          <isRequired>false</isRequired>
          <isRelativeToRootNode>false</isRelativeToRootNode>
          <destPaths>
            <PdtColumnDest>
              <path>Settlement Date</path>
              <expression>colVal.Trim() == "" ? "" : System.DateTime.ParseExact(colVal, "yyyyMMdd", System.Globalization.CultureInfo.InvariantCulture).ToString("dd/MM/yyyy")</expression>
            </PdtColumnDest>
          </destPaths>
        </PdtColumn>
        <PdtColumn>
          <name>Causal</name>
          <len>4</len>
          <isRequired>false</isRequired>
          <isRelativeToRootNode>false</isRelativeToRootNode>
        </PdtColumn>
        <PdtColumn>
          <name>Number Movement</name>
          <len>12</len>
          <isRequired>false</isRequired>
          <isRelativeToRootNode>false</isRelativeToRootNode>
        </PdtColumn>
        <PdtColumn>
          <name>Line Movement</name>
          <len>12</len>
          <isRequired>false</isRequired>
          <isRelativeToRootNode>false</isRelativeToRootNode>
        </PdtColumn>
        <PdtColumn>
          <name>Amount</name>
          <len>17</len>
          <isRequired>false</isRequired>
          <isRelativeToRootNode>false</isRelativeToRootNode>
          <destPaths>
            <PdtColumnDest>
              <path>Projected Amount Local ccy</path>
              <expression>colVal.Substring(16, 1) + colVal.Substring(0, 15 - int.Parse(colVal.Substring(15, 1))) + "." + colVal.Substring(15 - int.Parse(colVal.Substring(15, 1)), int.Parse(colVal.Substring(15, 1)))</expression>
            </PdtColumnDest>
            <PdtColumnDest>
              <path>Projected Amount Fund ccy</path>
              <expression>colVal.Substring(16, 1) + colVal.Substring(0, 15 - int.Parse(colVal.Substring(15, 1))) + "." + colVal.Substring(15 - int.Parse(colVal.Substring(15, 1)), int.Parse(colVal.Substring(15, 1)))</expression>
            </PdtColumnDest>
            <PdtColumnDest>
              <path>Account Currency(ISO)</path>
              <expression>"EUR"</expression>
            </PdtColumnDest>
            <PdtColumnDest>
              <path>CashFlow Type Id</path>
              <expression>"TA"</expression>
            </PdtColumnDest>
          </destPaths>
        </PdtColumn>
        <PdtColumn>
          <name>Sign</name>
          <len>1</len>
          <isRequired>false</isRequired>
          <isRelativeToRootNode>false</isRelativeToRootNode>
        </PdtColumn>
        <PdtColumn>
          <name>Code  Reference</name>
          <len>12</len>
          <isRequired>false</isRequired>
          <isRelativeToRootNode>false</isRelativeToRootNode>
        </PdtColumn>
        <PdtColumn>
          <name>Class Code</name>
          <len>10</len>
          <isRequired>false</isRequired>
          <isRelativeToRootNode>false</isRelativeToRootNode>
        </PdtColumn>
        <PdtColumn>
          <name>Internal Security Number</name>
          <len>10</len>
          <isRequired>false</isRequired>
          <isRelativeToRootNode>false</isRelativeToRootNode>
        </PdtColumn>
      </columns>
    </PdtTransformation>
    <PdtTransformation>
      <name>SSB2Rbc_CashTrade</name>
      <type>Csv2Csv</type>
      <label>SSB to RBC Cash Trade</label>
      <category>Medio</category>
      <templateFile>Rbc_CashTrade.csv</templateFile>
      <csvSrcSeparator>0</csvSrcSeparator>
      <csvDestSeparator>59</csvDestSeparator>
      <processingCondition>lineVal.Substring(84, 4).Trim() == "TDA" &amp;&amp; lineVal.Substring(0, 6).Trim() != "M4" &amp;&amp; lineVal.Substring(0, 6).Trim() != "M6"</processingCondition>
      <variables>
        <PdtVariable>
          <name>SignOfTransaction</name>
          <expressionBefore>lineVal.Substring(129, 1)</expressionBefore>
        </PdtVariable>
        <PdtVariable>
          <name>CurrentAmount</name>
          <expressionBefore>lineVal.Substring(112, 17)</expressionBefore>
          <expressionAfter>colVal.Substring(16, 1) + colVal.Substring(0, 15 - int.Parse(colVal.Substring(15, 1))) + "." + colVal.Substring(15 - int.Parse(colVal.Substring(15, 1)), int.Parse(colVal.Substring(15, 1)))</expressionAfter>
        </PdtVariable>
      </variables>
      <columns>
        <PdtColumn>
          <name>Portfolio Code</name>
          <len>6</len>
          <isRequired>false</isRequired>
          <isRelativeToRootNode>false</isRelativeToRootNode>
          <destPaths>
            <PdtColumnDest>
              <path>External Fund Identifier</path>
            </PdtColumnDest>
          </destPaths>
        </PdtColumn>
        <PdtColumn>
          <name>Account Code</name>
          <len>12</len>
          <isRequired>false</isRequired>
          <isRelativeToRootNode>false</isRelativeToRootNode>
        </PdtColumn>
        <PdtColumn>
          <name>Account Name</name>
          <len>50</len>
          <isRequired>false</isRequired>
          <isRelativeToRootNode>false</isRelativeToRootNode>
        </PdtColumn>
        <PdtColumn>
          <name>NAV Date</name>
          <len>8</len>
          <isRequired>false</isRequired>
          <isRelativeToRootNode>false</isRelativeToRootNode>
          <destPaths>
            <PdtColumnDest>
              <path>Trade Date</path>
              <expression>colVal.Trim() == "" ? "" : System.DateTime.ParseExact(string.Compare(colVal, lineVal.Substring(76, 8).Trim()) == 1 ? lineVal.Substring(76, 8).Trim() : colVal, "yyyyMMdd", System.Globalization.CultureInfo.InvariantCulture).ToString("dd/MM/yyyy")</expression>
            </PdtColumnDest>
          </destPaths>
        </PdtColumn>
        <PdtColumn>
          <name>Settlement Date</name>
          <len>8</len>
          <isRequired>false</isRequired>
          <isRelativeToRootNode>false</isRelativeToRootNode>
          <destPaths>
            <PdtColumnDest>
              <path>Value Date</path>
              <expression>colVal.Trim() == "" ? "" : System.DateTime.ParseExact(colVal, "yyyyMMdd", System.Globalization.CultureInfo.InvariantCulture).ToString("dd/MM/yyyy")</expression>
            </PdtColumnDest>
          </destPaths>
        </PdtColumn>
        <PdtColumn>
          <name>Causal</name>
          <len>4</len>
          <isRequired>false</isRequired>
          <isRelativeToRootNode>false</isRelativeToRootNode>
        </PdtColumn>
        <PdtColumn>
          <name>Number Movement</name>
          <len>12</len>
          <isRequired>false</isRequired>
          <isRelativeToRootNode>false</isRelativeToRootNode>
          <destPaths>
            <PdtColumnDest>
              <path>Transaction ID</path>
            </PdtColumnDest>
          </destPaths>
        </PdtColumn>
        <PdtColumn>
          <name>Line Movement</name>
          <len>12</len>
          <isRequired>false</isRequired>
          <isRelativeToRootNode>false</isRelativeToRootNode>
        </PdtColumn>
        <PdtColumn>
          <name>Amount</name>
          <len>17</len>
          <isRequired>false</isRequired>
          <isRelativeToRootNode>false</isRelativeToRootNode>
          <destPaths>
            <PdtColumnDest>
              <path>Amount</path>
              <expression>('$SignOfTransaction' == 'U' ? "-" : "+") + "$CurrentAmount".Substring(1)</expression>
            </PdtColumnDest>
            <PdtColumnDest>
              <path>Currency</path>
              <expression>"EUR"</expression>
            </PdtColumnDest>
          </destPaths>
        </PdtColumn>
        <PdtColumn>
          <name>Sign</name>
          <len>1</len>
          <isRequired>false</isRequired>
          <isRelativeToRootNode>false</isRelativeToRootNode>
        </PdtColumn>
        <PdtColumn>
          <name>Code  Reference</name>
          <len>12</len>
          <isRequired>false</isRequired>
          <isRelativeToRootNode>false</isRelativeToRootNode>
        </PdtColumn>
        <PdtColumn>
          <name>Class Code</name>
          <len>10</len>
          <isRequired>false</isRequired>
          <isRelativeToRootNode>false</isRelativeToRootNode>
        </PdtColumn>
        <PdtColumn>
          <name>Internal Security Number</name>
          <len>10</len>
          <isRequired>false</isRequired>
          <isRelativeToRootNode>false</isRelativeToRootNode>
        </PdtColumn>
      </columns>
    </PdtTransformation>
    <PdtTransformation>
      <name>SSB2Rbc_EquityTrade</name>
      <type>Csv2Csv</type>
      <label>SSB to RBC Equity Trade</label>
      <category>Medio</category>
      <templateFile>Rbc_EquityTrade.csv</templateFile>
      <csvSrcSeparator>0</csvSrcSeparator>
      <csvDestSeparator>59</csvDestSeparator>
      <processingCondition>",GFJL,GFJH,GFJG,GFJN,".IndexOf("," + lineVal.Substring(0, 6).Trim() + ",") &lt; 0 &amp;&amp; (("$SecurityDescription" == "EQUITIES" &amp;&amp; (lineVal.Substring(73, 4) == "ATIT" || lineVal.Substring(73, 4) == "VTIT")) || lineVal.Substring(73, 4) == "SOFO" || lineVal.Substring(73, 4) == "RIFO")</processingCondition>
      <variables>
        <PdtVariable>
          <name>SecurityDescription</name>
          <expressionBefore>lineVal.Substring(6, 10).Trim()</expressionBefore>
          <Lookup>
            <Table>MIFL_ME_01ANATIT</Table>
            <ColumnIndex>1</ColumnIndex>
            <Lookup>
              <File>MIFL_ME_15DOMIN_*</File>
              <Expression>lineVal.Substring(0, 20).Trim() == "INST_GRP_COD" &amp;&amp; lineVal.Substring(20, 10).Trim() == colVal ? lineVal.Substring(30, 40).Trim() : ""</Expression>
            </Lookup>
          </Lookup>
        </PdtVariable>
      </variables>
      <columns>
        <PdtColumn>
          <name>Portfolio Code</name>
          <len>6</len>
          <isRequired>false</isRequired>
          <isRelativeToRootNode>false</isRelativeToRootNode>
          <destPaths>
            <PdtColumnDest>
              <path>Fund Custody Code</path>
            </PdtColumnDest>
            <PdtColumnDest>
              <path>External Fund Identifier</path>
            </PdtColumnDest>
          </destPaths>
        </PdtColumn>
        <PdtColumn>
          <name>Internal Security Number</name>
          <len>10</len>
          <isRequired>false</isRequired>
          <isRelativeToRootNode>false</isRelativeToRootNode>
          <destPaths>
            <PdtColumnDest>
              <path>Security Description</path>
              <expression>"$SecurityDescription" == "EQUITIES" ? "EQUITIES" : "FUNDS" </expression>
            </PdtColumnDest>
            <PdtColumnDest>
              <path>Bloomberg Code</path>
              <Lookup>
                <Expression>colVal != "" ? colVal + " Equity" : ""</Expression>
                <Table>MIFL_ME_01ANATIT</Table>
                <ColumnIndex>3</ColumnIndex>
              </Lookup>
            </PdtColumnDest>
            <PdtColumnDest>
              <path>Security Name</path>
              <Lookup>
                <Table>MIFL_ME_01ANATIT</Table>
                <ColumnIndex>4</ColumnIndex>
              </Lookup>
            </PdtColumnDest>
            <PdtColumnDest>
              <path>Type</path>
              <Lookup>
                <Table>MIFL_ME_01ANATIT</Table>
                <ColumnIndex>0</ColumnIndex>
                <Lookup>
                  <File>MIFL_ME_15DOMIN_*</File>
                  <Expression>lineVal.Substring(0, 20).Trim() == "INST_TYP" &amp;&amp; lineVal.Substring(20, 10).Trim() == colVal ? lineVal.Substring(30, 40).Trim() : ""</Expression>
                </Lookup>
              </Lookup>
            </PdtColumnDest>
          </destPaths>
        </PdtColumn>
        <PdtColumn>
          <name>ISIN Code</name>
          <len>12</len>
          <isRequired>false</isRequired>
          <isRelativeToRootNode>false</isRelativeToRootNode>
        </PdtColumn>
        <PdtColumn>
          <name>Transaction Date</name>
          <len>8</len>
          <isRequired>false</isRequired>
          <isRelativeToRootNode>false</isRelativeToRootNode>
          <destPaths>
            <PdtColumnDest>
              <path>Trade Date</path>
              <expression>System.DateTime.ParseExact(string.Compare(colVal, lineVal.Substring(36, 8).Trim()) == 1 ? lineVal.Substring(36, 8).Trim() : colVal, "yyyyMMdd", System.Globalization.CultureInfo.InvariantCulture).ToString("dd/MM/yyyy")</expression>
            </PdtColumnDest>
          </destPaths>
        </PdtColumn>
        <PdtColumn>
          <name>Settle Date</name>
          <len>8</len>
          <isRequired>false</isRequired>
          <isRelativeToRootNode>false</isRelativeToRootNode>
          <destPaths>
            <PdtColumnDest>
              <path>Settlement Date</path>
              <expression>System.DateTime.ParseExact(colVal, "yyyyMMdd", System.Globalization.CultureInfo.InvariantCulture).ToString("dd/MM/yyyy")</expression>
            </PdtColumnDest>
          </destPaths>
        </PdtColumn>
        <PdtColumn>
          <name>Internal Transaction Number</name>
          <len>12</len>
          <isRequired>false</isRequired>
          <isRelativeToRootNode>false</isRelativeToRootNode>
          <destPaths>
            <PdtColumnDest>
              <path>Transaction ID</path>
            </PdtColumnDest>
          </destPaths>
        </PdtColumn>
        <PdtColumn>
          <name>External Transaction Number</name>
          <len>16</len>
          <isRequired>false</isRequired>
          <isRelativeToRootNode>false</isRelativeToRootNode>
        </PdtColumn>
        <PdtColumn>
          <name>Flag P/T</name>
          <len>1</len>
          <isRequired>false</isRequired>
          <isRelativeToRootNode>false</isRelativeToRootNode>
        </PdtColumn>
        <PdtColumn>
          <name>Type of Transaction</name>
          <len>4</len>
          <isRequired>false</isRequired>
          <isRelativeToRootNode>false</isRelativeToRootNode>
        </PdtColumn>
        <PdtColumn>
          <name>Sign of Transaction</name>
          <len>1</len>
          <isRequired>false</isRequired>
          <isRelativeToRootNode>false</isRelativeToRootNode>
          <destPaths>
            <PdtColumnDest>
              <path>Transaction Description</path>
              <expression>colVal == "A" ? "Buy" : "Sell"</expression>
            </PdtColumnDest>
          </destPaths>
        </PdtColumn>
        <PdtColumn>
          <name>Broker Code</name>
          <len>8</len>
          <isRequired>false</isRequired>
          <isRelativeToRootNode>false</isRelativeToRootNode>
          <destPaths>
            <PdtColumnDest>
              <path>Broker BIC Code</path>
              <Lookup>
                <File>CtpyBicCodes.txt</File>
                <Expression>lineVal.Split(';')[2].Trim() == colVal ? lineVal.Split(';')[1].Trim() : ""</Expression>
              </Lookup>
            </PdtColumnDest>
            <PdtColumnDest>
              <path>Broker Name</path>
              <Lookup>
                <File>MIFL_ME_03ANACTP_*</File>
                <Expression>lineVal.Substring(0, 8).Trim() == colVal ? lineVal.Substring(8, 40).Trim() : ""</Expression>
              </Lookup>
            </PdtColumnDest>
          </destPaths>
        </PdtColumn>
        <PdtColumn>
          <name>Quantity</name>
          <len>17</len>
          <isRequired>false</isRequired>
          <isRelativeToRootNode>false</isRelativeToRootNode>
          <destPaths>
            <PdtColumnDest>
              <path>Quantity</path>
              <expression>(lineVal.Substring(77, 1) == "A" ? "+" : "-") + colVal.Substring(0, 15 - int.Parse(colVal.Substring(15, 1))) + "." + colVal.Substring(15 - int.Parse(colVal.Substring(15, 1)), int.Parse(colVal.Substring(15, 1)))</expression>
            </PdtColumnDest>
          </destPaths>
        </PdtColumn>
        <PdtColumn>
          <name>Security Price</name>
          <len>17</len>
          <isRequired>false</isRequired>
          <isRelativeToRootNode>false</isRelativeToRootNode>
          <destPaths>
            <PdtColumnDest>
              <path>Price</path>
              <expression>colVal.Substring(16, 1) + colVal.Substring(0, 15 - int.Parse(colVal.Substring(15, 1))) + "." + colVal.Substring(15 - int.Parse(colVal.Substring(15, 1)), int.Parse(colVal.Substring(15, 1)))</expression>
            </PdtColumnDest>
          </destPaths>
        </PdtColumn>
        <PdtColumn>
          <name>Net Price</name>
          <len>17</len>
          <isRequired>false</isRequired>
          <isRelativeToRootNode>false</isRelativeToRootNode>
        </PdtColumn>
        <PdtColumn>
          <name>Close Price</name>
          <len>17</len>
          <isRequired>false</isRequired>
          <isRelativeToRootNode>false</isRelativeToRootNode>
        </PdtColumn>
        <PdtColumn>
          <name>Accrued Interest Amount</name>
          <len>17</len>
          <isRequired>false</isRequired>
          <isRelativeToRootNode>false</isRelativeToRootNode>
        </PdtColumn>
        <PdtColumn>
          <name>Net Total Amount in Security Currency</name>
          <len>17</len>
          <isRequired>false</isRequired>
          <isRelativeToRootNode>false</isRelativeToRootNode>
        </PdtColumn>
        <PdtColumn>
          <name>Gross Amount in Security Currency</name>
          <len>17</len>
          <isRequired>false</isRequired>
          <isRelativeToRootNode>false</isRelativeToRootNode>
        </PdtColumn>
        <PdtColumn>
          <name>ISO Currency Code</name>
          <len>3</len>
          <isRequired>false</isRequired>
          <isRelativeToRootNode>false</isRelativeToRootNode>
        </PdtColumn>
        <PdtColumn>
          <name>Net Total Amount in Settlement Currency</name>
          <len>17</len>
          <isRequired>false</isRequired>
          <isRelativeToRootNode>false</isRelativeToRootNode>
          <destPaths>
            <PdtColumnDest>
              <path>Net Amount</path>
              <expression>(lineVal.Substring(77, 1) == "A" ? "+" : "-") + colVal.Substring(0, 15 - int.Parse(colVal.Substring(15, 1))) + "." + colVal.Substring(15 - int.Parse(colVal.Substring(15, 1)), int.Parse(colVal.Substring(15, 1)))</expression>
            </PdtColumnDest>
          </destPaths>
        </PdtColumn>
        <PdtColumn>
          <name>Gross Total Amount in Settlement Currency</name>
          <len>17</len>
          <isRequired>false</isRequired>
          <isRelativeToRootNode>false</isRelativeToRootNode>
          <destPaths>
            <PdtColumnDest>
              <path>Gross Amount</path>
              <expression>(lineVal.Substring(77, 1) == "A" ? "+" : "-") + colVal.Substring(0, 15 - int.Parse(colVal.Substring(15, 1))) + "." + colVal.Substring(15 - int.Parse(colVal.Substring(15, 1)), int.Parse(colVal.Substring(15, 1)))</expression>
            </PdtColumnDest>
          </destPaths>
        </PdtColumn>
        <PdtColumn>
          <name>Settlement ISO Currency Code</name>
          <len>3</len>
          <isRequired>false</isRequired>
          <isRelativeToRootNode>false</isRelativeToRootNode>
          <destPaths>
            <PdtColumnDest>
              <path>Currency</path>
            </PdtColumnDest>
          </destPaths>
        </PdtColumn>
        <PdtColumn>
          <name>Settlement Currency Exchange Rate</name>
          <len>17</len>
          <isRequired>false</isRequired>
          <isRelativeToRootNode>false</isRelativeToRootNode>
        </PdtColumn>
        <PdtColumn>
          <name>Fees Amount</name>
          <len>17</len>
          <isRequired>false</isRequired>
          <isRelativeToRootNode>false</isRelativeToRootNode>
          <destPaths>
            <PdtColumnDest>
              <path>Expenses</path>
              <expression>colVal.Substring(16, 1) + colVal.Substring(0, 15 - int.Parse(colVal.Substring(15, 1))) + "." + colVal.Substring(15 - int.Parse(colVal.Substring(15, 1)), int.Parse(colVal.Substring(15, 1)))</expression>
            </PdtColumnDest>
          </destPaths>
        </PdtColumn>
        <PdtColumn>
          <name>Commission Broker</name>
          <len>17</len>
          <isRequired>false</isRequired>
          <isRelativeToRootNode>false</isRelativeToRootNode>
          <destPaths>
            <PdtColumnDest>
              <path>Brokerage</path>
              <expression>colVal.Substring(16, 1) + colVal.Substring(0, 15 - int.Parse(colVal.Substring(15, 1))) + "." + colVal.Substring(15 - int.Parse(colVal.Substring(15, 1)), int.Parse(colVal.Substring(15, 1)))</expression>
            </PdtColumnDest>
          </destPaths>
        </PdtColumn>
        <PdtColumn>
          <name>Commission Others</name>
          <len>17</len>
          <isRequired>false</isRequired>
          <isRelativeToRootNode>false</isRelativeToRootNode>
          <destPaths>
            <PdtColumnDest>
              <path>Tax</path>
              <expression>colVal.Substring(16, 1) + colVal.Substring(0, 15 - int.Parse(colVal.Substring(15, 1))) + "." + colVal.Substring(15 - int.Parse(colVal.Substring(15, 1)), int.Parse(colVal.Substring(15, 1)))</expression>
            </PdtColumnDest>
          </destPaths>
        </PdtColumn>
        <PdtColumn>
          <name>Internal Contract Number</name>
          <len>10</len>
          <isRequired>false</isRequired>
          <isRelativeToRootNode>false</isRelativeToRootNode>
        </PdtColumn>
      </columns>
    </PdtTransformation>
    <PdtTransformation>
      <name>SSB2Rbc_FixedIncomeTrade</name>
      <type>Csv2Csv</type>
      <label>SSB to RBC FixedIncome Trade</label>
      <category>Medio</category>
      <templateFile>Rbc_FixedIncome.csv</templateFile>
      <csvSrcSeparator>0</csvSrcSeparator>
      <csvDestSeparator>59</csvDestSeparator>
      <processingCondition>",GFJL,GFJH,GFJG,GFJN,".IndexOf("," + lineVal.Substring(0, 6).Trim() + ",") &lt; 0 &amp;&amp; "$SecurityDescription" == "BONDS" &amp;&amp; (lineVal.Substring(73, 4) == "ATIT" || lineVal.Substring(73, 4) == "VTIT")</processingCondition>
      <variables>
        <PdtVariable>
          <name>SecurityDescription</name>
          <expressionBefore>lineVal.Substring(6, 10).Trim()</expressionBefore>
          <Lookup>
            <Table>MIFL_ME_01ANATIT</Table>
            <ColumnIndex>1</ColumnIndex>
            <Lookup>
              <File>MIFL_ME_15DOMIN_*</File>
              <Expression>lineVal.Substring(0, 20).Trim() == "INST_GRP_COD" &amp;&amp; lineVal.Substring(20, 10).Trim() == colVal ? lineVal.Substring(30, 40).Trim() : ""</Expression>
            </Lookup>
          </Lookup>
        </PdtVariable>
      </variables>
      <columns>
        <PdtColumn>
          <name>Portfolio Code</name>
          <len>6</len>
          <isRequired>false</isRequired>
          <isRelativeToRootNode>false</isRelativeToRootNode>
          <destPaths>
            <PdtColumnDest>
              <path>Fund Custody Code</path>
            </PdtColumnDest>
            <PdtColumnDest>
              <path>External Fund Identifier</path>
            </PdtColumnDest>
          </destPaths>
        </PdtColumn>
        <PdtColumn>
          <name>Internal Security Number</name>
          <len>10</len>
          <isRequired>false</isRequired>
          <isRelativeToRootNode>false</isRelativeToRootNode>
          <destPaths>
            <PdtColumnDest>
              <path>Security Description</path>
              <expression>"$SecurityDescription"</expression>
            </PdtColumnDest>
            <PdtColumnDest>
              <path>Security Name</path>
              <Lookup>
                <Table>MIFL_ME_01ANATIT</Table>
                <ColumnIndex>4</ColumnIndex>
              </Lookup>
            </PdtColumnDest>
            <PdtColumnDest>
              <path>Type</path>
              <Lookup>
                <Table>MIFL_ME_01ANATIT</Table>
                <ColumnIndex>0</ColumnIndex>
                <Lookup>
                  <File>MIFL_ME_15DOMIN_*</File>
                  <Expression>lineVal.Substring(0, 20).Trim() == "INST_TYP" &amp;&amp; lineVal.Substring(20, 10).Trim() == colVal ? lineVal.Substring(30, 40).Trim() : ""</Expression>
                </Lookup>
              </Lookup>
            </PdtColumnDest>
            <PdtColumnDest>
              <path>Maturity Date</path>
              <expression>System.DateTime.ParseExact(colVal, "yyyyMMdd", System.Globalization.CultureInfo.InvariantCulture).ToString("dd/MM/yyyy")</expression>
              <Lookup>
                <Table>MIFL_ME_01ANATIT</Table>
                <ColumnIndex>5</ColumnIndex>
              </Lookup>
            </PdtColumnDest>
            <PdtColumnDest>
              <path>Day Count</path>
              <expression>colVal == "0" ? "UNKNOWN" : (colVal == "1" ? "ACTUAL/ACTUAL" : (colVal == "2" ? "EXACT 1ECH/2" : (colVal == "3" ? "ACT/365" : (colVal == "4" ? "Actual/360" : (colVal == "5" ? "30/360(conditional)" : (colVal == "6" ? "30E+/360 MONTH OF 30D" : (colVal == "7" ? "30E+/360(DAY+1)" : (colVal == "8" ? "365/ACT" : (colVal == "9" ? "365/365" : "365/360")))))))))</expression>
              <Lookup>
                <Table>MIFL_ME_01ANATIT</Table>
                <ColumnIndex>6</ColumnIndex>
              </Lookup>
            </PdtColumnDest>
            <PdtColumnDest>
              <path>Coupon Frequency</path>
              <Lookup>
                <Table>MIFL_ME_01ANATIT</Table>
                <ColumnIndex>7</ColumnIndex>
              </Lookup>
            </PdtColumnDest>
          </destPaths>
        </PdtColumn>
        <PdtColumn>
          <name>ISIN Code</name>
          <len>12</len>
          <isRequired>false</isRequired>
          <isRelativeToRootNode>false</isRelativeToRootNode>
          <destPaths>
            <PdtColumnDest>
              <path>ISIN Code</path>
            </PdtColumnDest>
          </destPaths>
        </PdtColumn>
        <PdtColumn>
          <name>Transaction Date</name>
          <len>8</len>
          <isRequired>false</isRequired>
          <isRelativeToRootNode>false</isRelativeToRootNode>
          <destPaths>
            <PdtColumnDest>
              <path>Trade Date</path>
              <expression>System.DateTime.ParseExact(string.Compare(colVal, lineVal.Substring(36, 8).Trim()) == 1 ? lineVal.Substring(36, 8).Trim() : colVal, "yyyyMMdd", System.Globalization.CultureInfo.InvariantCulture).ToString("dd/MM/yyyy")</expression>
            </PdtColumnDest>
          </destPaths>
        </PdtColumn>
        <PdtColumn>
          <name>Settle Date</name>
          <len>8</len>
          <isRequired>false</isRequired>
          <isRelativeToRootNode>false</isRelativeToRootNode>
          <destPaths>
            <PdtColumnDest>
              <path>Settlement Date</path>
              <expression>System.DateTime.ParseExact(colVal, "yyyyMMdd", System.Globalization.CultureInfo.InvariantCulture).ToString("dd/MM/yyyy")</expression>
            </PdtColumnDest>
          </destPaths>
        </PdtColumn>
        <PdtColumn>
          <name>Internal Transaction Number</name>
          <len>12</len>
          <isRequired>false</isRequired>
          <isRelativeToRootNode>false</isRelativeToRootNode>
          <destPaths>
            <PdtColumnDest>
              <path>Transaction ID</path>
            </PdtColumnDest>
          </destPaths>
        </PdtColumn>
        <PdtColumn>
          <name>External Transaction Number</name>
          <len>16</len>
          <isRequired>false</isRequired>
          <isRelativeToRootNode>false</isRelativeToRootNode>
        </PdtColumn>
        <PdtColumn>
          <name>Flag P/T</name>
          <len>1</len>
          <isRequired>false</isRequired>
          <isRelativeToRootNode>false</isRelativeToRootNode>
        </PdtColumn>
        <PdtColumn>
          <name>Type of Transaction</name>
          <len>4</len>
          <isRequired>false</isRequired>
          <isRelativeToRootNode>false</isRelativeToRootNode>
          <destPaths>
            <PdtColumnDest>
              <path>Transaction Type</path>
              <Lookup>
                <File>MIFL_ME_15DOMIN_*</File>
                <Expression>lineVal.Substring(0, 20).Trim() == "XACT_TYP" &amp;&amp; lineVal.Substring(20, 10).Trim() == colVal ? lineVal.Substring(30, 40).Trim() : ""</Expression>
              </Lookup>
            </PdtColumnDest>
          </destPaths>
        </PdtColumn>
        <PdtColumn>
          <name>Sign of Transaction</name>
          <len>1</len>
          <isRequired>false</isRequired>
          <isRelativeToRootNode>false</isRelativeToRootNode>
          <destPaths>
            <PdtColumnDest>
              <path>Transaction Description</path>
              <expression>colVal == "A" ? "Buy" : "Sell"</expression>
            </PdtColumnDest>
          </destPaths>
        </PdtColumn>
        <PdtColumn>
          <name>Broker Code</name>
          <len>8</len>
          <isRequired>false</isRequired>
          <isRelativeToRootNode>false</isRelativeToRootNode>
          <destPaths>
            <PdtColumnDest>
              <path>Broker BIC Code</path>
              <Lookup>
                <File>CtpyBicCodes.txt</File>
                <Expression>lineVal.Split(';')[2].Trim() == colVal ? lineVal.Split(';')[1].Trim() : ""</Expression>
              </Lookup>
            </PdtColumnDest>
            <PdtColumnDest>
              <path>Broker Name</path>
              <Lookup>
                <File>MIFL_ME_03ANACTP_*</File>
                <Expression>lineVal.Substring(0, 8).Trim() == colVal ? lineVal.Substring(8, 40).Trim() : ""</Expression>
              </Lookup>
            </PdtColumnDest>
          </destPaths>
        </PdtColumn>
        <PdtColumn>
          <name>Quantity</name>
          <len>17</len>
          <isRequired>false</isRequired>
          <isRelativeToRootNode>false</isRelativeToRootNode>
          <destPaths>
            <PdtColumnDest>
              <path>Quantity</path>
              <expression>(lineVal.Substring(77, 1) == "A" ? "+" : "-") + colVal.Substring(0, 15 - int.Parse(colVal.Substring(15, 1))) + "." + colVal.Substring(15 - int.Parse(colVal.Substring(15, 1)), int.Parse(colVal.Substring(15, 1)))</expression>
            </PdtColumnDest>
          </destPaths>
        </PdtColumn>
        <PdtColumn>
          <name>Security Price</name>
          <len>17</len>
          <isRequired>false</isRequired>
          <isRelativeToRootNode>false</isRelativeToRootNode>
          <destPaths>
            <PdtColumnDest>
              <path>Price</path>
              <expression>colVal.Substring(16, 1) + colVal.Substring(0, 15 - int.Parse(colVal.Substring(15, 1))) + "." + colVal.Substring(15 - int.Parse(colVal.Substring(15, 1)), int.Parse(colVal.Substring(15, 1)))</expression>
            </PdtColumnDest>
          </destPaths>
        </PdtColumn>
        <PdtColumn>
          <name>Net Price</name>
          <len>17</len>
          <isRequired>false</isRequired>
          <isRelativeToRootNode>false</isRelativeToRootNode>
        </PdtColumn>
        <PdtColumn>
          <name>Close Price</name>
          <len>17</len>
          <isRequired>false</isRequired>
          <isRelativeToRootNode>false</isRelativeToRootNode>
        </PdtColumn>
        <PdtColumn>
          <name>Accrued Interest Amount</name>
          <len>17</len>
          <isRequired>false</isRequired>
          <isRelativeToRootNode>false</isRelativeToRootNode>
          <destPaths>
            <PdtColumnDest>
              <path>Bond Interest</path>
              <expression>colVal.Substring(16, 1) + colVal.Substring(0, 15 - int.Parse(colVal.Substring(15, 1))) + "." + colVal.Substring(15 - int.Parse(colVal.Substring(15, 1)), int.Parse(colVal.Substring(15, 1)))</expression>
            </PdtColumnDest>
          </destPaths>
        </PdtColumn>
        <PdtColumn>
          <name>Net Total Amount in Security Currency</name>
          <len>17</len>
          <isRequired>false</isRequired>
          <isRelativeToRootNode>false</isRelativeToRootNode>
        </PdtColumn>
        <PdtColumn>
          <name>Gross Amount in Security Currency</name>
          <len>17</len>
          <isRequired>false</isRequired>
          <isRelativeToRootNode>false</isRelativeToRootNode>
        </PdtColumn>
        <PdtColumn>
          <name>ISO Currency Code</name>
          <len>3</len>
          <isRequired>false</isRequired>
          <isRelativeToRootNode>false</isRelativeToRootNode>
        </PdtColumn>
        <PdtColumn>
          <name>Net Total Amount in Settlement Currency</name>
          <len>17</len>
          <isRequired>false</isRequired>
          <isRelativeToRootNode>false</isRelativeToRootNode>
          <destPaths>
            <PdtColumnDest>
              <path>Net Amount</path>
              <expression>(lineVal.Substring(77, 1) == "A" ? "+" : "-") + colVal.Substring(0, 15 - int.Parse(colVal.Substring(15, 1))) + "." + colVal.Substring(15 - int.Parse(colVal.Substring(15, 1)), int.Parse(colVal.Substring(15, 1)))</expression>
            </PdtColumnDest>
          </destPaths>
        </PdtColumn>
        <PdtColumn>
          <name>Gross Total Amount in Settlement Currency</name>
          <len>17</len>
          <isRequired>false</isRequired>
          <isRelativeToRootNode>false</isRelativeToRootNode>
          <destPaths>
            <PdtColumnDest>
              <path>Gross Amount</path>
              <expression>(lineVal.Substring(77, 1) == "A" ? "+" : "-") + colVal.Substring(0, 15 - int.Parse(colVal.Substring(15, 1))) + "." + colVal.Substring(15 - int.Parse(colVal.Substring(15, 1)), int.Parse(colVal.Substring(15, 1)))</expression>
            </PdtColumnDest>
          </destPaths>
        </PdtColumn>
        <PdtColumn>
          <name>Settlement ISO Currency Code</name>
          <len>3</len>
          <isRequired>false</isRequired>
          <isRelativeToRootNode>false</isRelativeToRootNode>
          <destPaths>
            <PdtColumnDest>
              <path>Currency</path>
            </PdtColumnDest>
          </destPaths>
        </PdtColumn>
        <PdtColumn>
          <name>Settlement Currency Exchange Rate</name>
          <len>17</len>
          <isRequired>false</isRequired>
          <isRelativeToRootNode>false</isRelativeToRootNode>
        </PdtColumn>
        <PdtColumn>
          <name>Fees Amount</name>
          <len>17</len>
          <isRequired>false</isRequired>
          <isRelativeToRootNode>false</isRelativeToRootNode>
          <destPaths>
            <PdtColumnDest>
              <path>Expenses</path>
              <expression>colVal.Substring(16, 1) + colVal.Substring(0, 15 - int.Parse(colVal.Substring(15, 1))) + "." + colVal.Substring(15 - int.Parse(colVal.Substring(15, 1)), int.Parse(colVal.Substring(15, 1)))</expression>
            </PdtColumnDest>
          </destPaths>
        </PdtColumn>
        <PdtColumn>
          <name>Commission Broker</name>
          <len>17</len>
          <isRequired>false</isRequired>
          <isRelativeToRootNode>false</isRelativeToRootNode>
          <destPaths>
            <PdtColumnDest>
              <path>Brokerage</path>
              <expression>colVal.Substring(16, 1) + colVal.Substring(0, 15 - int.Parse(colVal.Substring(15, 1))) + "." + colVal.Substring(15 - int.Parse(colVal.Substring(15, 1)), int.Parse(colVal.Substring(15, 1)))</expression>
            </PdtColumnDest>
          </destPaths>
        </PdtColumn>
        <PdtColumn>
          <name>Commission Others</name>
          <len>17</len>
          <isRequired>false</isRequired>
          <isRelativeToRootNode>false</isRelativeToRootNode>
          <destPaths>
            <PdtColumnDest>
              <path>Tax</path>
              <expression>colVal.Substring(16, 1) + colVal.Substring(0, 15 - int.Parse(colVal.Substring(15, 1))) + "." + colVal.Substring(15 - int.Parse(colVal.Substring(15, 1)), int.Parse(colVal.Substring(15, 1)))</expression>
            </PdtColumnDest>
          </destPaths>
        </PdtColumn>
        <PdtColumn>
          <name>Internal Contract Number</name>
          <len>10</len>
          <isRequired>false</isRequired>
          <isRelativeToRootNode>false</isRelativeToRootNode>
        </PdtColumn>
      </columns>
    </PdtTransformation>
    <PdtTransformation>
      <name>SSB2Rbc_FxTrade</name>
      <type>Csv2Csv</type>
      <label>SSB to RBC Fx Trade</label>
      <category>Medio</category>
      <templateFile>Rbc_FxTrade.csv</templateFile>
      <csvSrcSeparator>0</csvSrcSeparator>
      <csvDestSeparator>59</csvDestSeparator>
      <processingCondition>",GFJL,GFJH,GFJG,GFJN,".IndexOf("," + lineVal.Substring(0, 6).Trim() + ",") &lt; 0 &amp;&amp; lineVal.Substring(51, 1) == "+" &amp;&amp; (lineVal.Substring(47, 4).Trim() == "ADI" || lineVal.Substring(47, 4).Trim() == "VDI" || lineVal.Substring(47, 4).Trim() == "AVFW" || lineVal.Substring(47, 4).Trim() == "AAFW")</processingCondition>
      <columns>
        <PdtColumn>
          <name>Portfolio Code</name>
          <len>6</len>
          <isRequired>false</isRequired>
          <isRelativeToRootNode>false</isRelativeToRootNode>
          <destPaths>
            <PdtColumnDest>
              <path>Fund Custody Code</path>
            </PdtColumnDest>
            <PdtColumnDest>
              <path>External Fund Identifier</path>
            </PdtColumnDest>
          </destPaths>
        </PdtColumn>
        <PdtColumn>
          <name>ISO Currency Code</name>
          <len>3</len>
          <isRequired>false</isRequired>
          <isRelativeToRootNode>false</isRelativeToRootNode>
        </PdtColumn>
        <PdtColumn>
          <name>Internal Transaction Number</name>
          <len>12</len>
          <isRequired>false</isRequired>
          <isRelativeToRootNode>false</isRelativeToRootNode>
          <destPaths>
            <PdtColumnDest>
              <path>Transaction ID</path>
            </PdtColumnDest>
            <PdtColumnDest>
              <path>Buy Ccy</path>
              <Lookup>
                <Expression>lineVal.Substring(9, 12).Trim() == colVal &amp;&amp; lineVal.Substring(51, 1) == "+" ? lineVal.Substring(6, 3) : ""</Expression>
              </Lookup>
            </PdtColumnDest>
            <PdtColumnDest>
              <path>Sell Ccy</path>
              <Lookup>
                <Expression>lineVal.Substring(9, 12).Trim() == colVal &amp;&amp; lineVal.Substring(51, 1) == "-" ? lineVal.Substring(6, 3) : ""</Expression>
              </Lookup>
            </PdtColumnDest>
            <PdtColumnDest>
              <path>Purchased Amount</path>
              <expression>colVal.Substring(16, 1) + colVal.Substring(0, 15 - int.Parse(colVal.Substring(15, 1))) + "." + colVal.Substring(15 - int.Parse(colVal.Substring(15, 1)), int.Parse(colVal.Substring(15, 1)))</expression>
              <Lookup>
                <Expression>lineVal.Substring(9, 12).Trim() == colVal &amp;&amp; lineVal.Substring(51, 1) == "+" ? lineVal.Substring(60, 17) : ""</Expression>
              </Lookup>
            </PdtColumnDest>
            <PdtColumnDest>
              <path>Sold Amount</path>
              <expression>colVal.Substring(16, 1) + colVal.Substring(0, 15 - int.Parse(colVal.Substring(15, 1))) + "." + colVal.Substring(15 - int.Parse(colVal.Substring(15, 1)), int.Parse(colVal.Substring(15, 1)))</expression>
              <Lookup>
                <Expression>lineVal.Substring(9, 12).Trim() == colVal &amp;&amp; lineVal.Substring(51, 1) == "-" ? lineVal.Substring(60, 17) : ""</Expression>
              </Lookup>
            </PdtColumnDest>
          </destPaths>
        </PdtColumn>
        <PdtColumn>
          <name>Internal Contract Number</name>
          <len>10</len>
          <isRequired>false</isRequired>
          <isRelativeToRootNode>false</isRelativeToRootNode>
        </PdtColumn>
        <PdtColumn>
          <name>Transaction Date</name>
          <len>8</len>
          <isRequired>false</isRequired>
          <isRelativeToRootNode>false</isRelativeToRootNode>
          <destPaths>
            <PdtColumnDest>
              <path>Trade Date</path>
              <expression>System.DateTime.ParseExact(colVal, "yyyyMMdd", System.Globalization.CultureInfo.InvariantCulture).ToString("dd/MM/yyyy")</expression>
            </PdtColumnDest>
          </destPaths>
        </PdtColumn>
        <PdtColumn>
          <name>Settle Date</name>
          <len>8</len>
          <isRequired>false</isRequired>
          <isRelativeToRootNode>false</isRelativeToRootNode>
          <destPaths>
            <PdtColumnDest>
              <path>Value Date</path>
              <expression>System.DateTime.ParseExact(colVal, "yyyyMMdd", System.Globalization.CultureInfo.InvariantCulture).ToString("dd/MM/yyyy")</expression>
            </PdtColumnDest>
          </destPaths>
        </PdtColumn>
        <PdtColumn>
          <name>Type of Transaction</name>
          <len>4</len>
          <isRequired>false</isRequired>
          <isRelativeToRootNode>false</isRelativeToRootNode>
          <destPaths>
            <PdtColumnDest>
              <path>Type</path>
              <expression>(colVal == "ADI" || colVal == "VDI") ? "SPOT" : ((colVal == "AVFW" || colVal == "AAFW") ? "FORWARD" : "UNKNOWN")</expression>
            </PdtColumnDest>
          </destPaths>
        </PdtColumn>
        <PdtColumn>
          <name>Sign of Transaction</name>
          <len>1</len>
          <isRequired>false</isRequired>
          <isRelativeToRootNode>false</isRelativeToRootNode>
        </PdtColumn>
        <PdtColumn>
          <name>Broker Code</name>
          <len>8</len>
          <isRequired>false</isRequired>
          <isRelativeToRootNode>false</isRelativeToRootNode>
          <destPaths>
            <PdtColumnDest>
              <path>Broker BIC Code</path>
              <Lookup>
                <File>CtpyBicCodes.txt</File>
                <Expression>lineVal.Split(';')[2].Trim() == colVal ? lineVal.Split(';')[1].Trim() : ""</Expression>
              </Lookup>
            </PdtColumnDest>
            <PdtColumnDest>
              <path>Broker Name</path>
              <Lookup>
                <File>MIFL_ME_03ANACTP_*</File>
                <Expression>lineVal.Substring(0, 8).Trim() == colVal ? lineVal.Substring(8, 40).Trim() : ""</Expression>
              </Lookup>
            </PdtColumnDest>
          </destPaths>
        </PdtColumn>
        <PdtColumn>
          <name>Current Amount</name>
          <len>17</len>
          <isRequired>false</isRequired>
          <isRelativeToRootNode>false</isRelativeToRootNode>
        </PdtColumn>
        <PdtColumn>
          <name>Internal Security Number</name>
          <len>10</len>
          <isRequired>false</isRequired>
          <isRelativeToRootNode>false</isRelativeToRootNode>
        </PdtColumn>
        <PdtColumn>
          <name>Position Type</name>
          <len>1</len>
          <isRequired>false</isRequired>
          <isRelativeToRootNode>false</isRelativeToRootNode>
        </PdtColumn>
        <PdtColumn>
          <name>External reference</name>
          <len>16</len>
          <isRequired>false</isRequired>
          <isRelativeToRootNode>false</isRelativeToRootNode>
        </PdtColumn>
      </columns>
    </PdtTransformation>
    <PdtTransformation>
      <name>SSB2Rbc_OptionTrade</name>
      <type>Csv2Csv</type>
      <label>SSB to RBC Option Trade</label>
      <category>Medio</category>
      <templateFile>Rbc_Options.csv</templateFile>
      <csvSrcSeparator>0</csvSrcSeparator>
      <csvDestSeparator>59</csvDestSeparator>
      <processingCondition>",GFJL,GFJH,GFJG,GFJN,".IndexOf("," + lineVal.Substring(0, 6).Trim() + ",") &lt; 0 &amp;&amp; "$InstrumentType_OPTIONS" == "OPTIONS" &amp;&amp; (lineVal.Substring(73, 4).Trim() == "AOP" || lineVal.Substring(73, 4).Trim() == "VOP" || lineVal.Substring(73, 4).Trim() == "AOC" || lineVal.Substring(73, 4).Trim() == "VOC")</processingCondition>
      <variables>
        <PdtVariable>
          <name>InstrumentType_OPTIONS</name>
          <expressionBefore>lineVal.Substring(6, 10).Trim()</expressionBefore>
          <Lookup>
            <Table>MIFL_ME_01ANATIT</Table>
            <ColumnIndex>1</ColumnIndex>
            <Lookup>
              <File>MIFL_ME_15DOMIN_*</File>
              <Expression>lineVal.Substring(0, 20).Trim() == "INST_GRP_COD" &amp;&amp; lineVal.Substring(20, 10).Trim() == colVal ? lineVal.Substring(30, 40).Trim() : ""</Expression>
            </Lookup>
          </Lookup>
        </PdtVariable>
        <PdtVariable>
          <name>BloombergCodeType</name>
          <expressionBefore>lineVal.Substring(6, 10).Trim()</expressionBefore>
          <Lookup>
            <Table>MIFL_ME_01ANATIT</Table>
            <ColumnIndex>0</ColumnIndex>
            <Lookup>
              <File>MIFL_ME_15DOMIN_*</File>
              <Expression>lineVal.Substring(0, 20).Trim() == "INST_TYP" &amp;&amp; lineVal.Substring(20, 10).Trim() == colVal ? lineVal.Substring(30, 40).Trim() : ""</Expression>
              <Lookup>
                <File>BloombergCodes.txt</File>
                <Expression>lineVal.Split(';')[2].Trim() == colVal ? lineVal.Split(';')[3].Trim() : ""</Expression>
              </Lookup>
            </Lookup>
          </Lookup>
        </PdtVariable>
      </variables>
      <columns>
        <PdtColumn>
          <name>Portfolio Code</name>
          <len>6</len>
          <isRequired>false</isRequired>
          <isRelativeToRootNode>false</isRelativeToRootNode>
          <destPaths>
            <PdtColumnDest>
              <path>Fund Code</path>
            </PdtColumnDest>
            <PdtColumnDest>
              <path>External Fund Identifier</path>
            </PdtColumnDest>
            <PdtColumnDest>
              <path>Fund Name</path>
              <Lookup>
                <File>MIFL_ME_10FLSNV_*</File>
                <Expression>lineVal.Substring(0, 6).Trim() == colVal ? lineVal.Substring(6, 40).Trim() : ""</Expression>
              </Lookup>
            </PdtColumnDest>
            <PdtColumnDest>
              <path>Manager Code</path>
            </PdtColumnDest>
          </destPaths>
        </PdtColumn>
        <PdtColumn>
          <name>Internal Security Number</name>
          <len>10</len>
          <isRequired>false</isRequired>
          <isRelativeToRootNode>false</isRelativeToRootNode>
          <destPaths>
            <PdtColumnDest>
              <path>Option Type</path>
              <Lookup>
                <Expression>colVal == "C" ? "CALL" : (colVal == "P" ? "PUT" : "") : ""</Expression>
                <Table>MIFL_ME_01ANATIT</Table>
                <ColumnIndex>9</ColumnIndex>
              </Lookup>
            </PdtColumnDest>
            <PdtColumnDest>
              <path>Option description</path>
              <Lookup>
                <Table>MIFL_ME_01ANATIT</Table>
                <ColumnIndex>4</ColumnIndex>
              </Lookup>
            </PdtColumnDest>
            <PdtColumnDest>
              <path>Option Strike</path>
              <Lookup>
                <Table>MIFL_ME_01ANATIT</Table>
                <ColumnIndex>10</ColumnIndex>
              </Lookup>
            </PdtColumnDest>
            <PdtColumnDest>
              <path>Underlying Asset</path>
              <Lookup>
                <Table>MIFL_ME_01ANATIT</Table>
                <ColumnIndex>8</ColumnIndex>
              </Lookup>
            </PdtColumnDest>
            <PdtColumnDest>
              <path>Type</path>
              <Lookup>
                <Expression>colVal == "C" ? "Options" : (colVal == "P" ? "Options" : "")</Expression>
                <Table>MIFL_ME_01ANATIT</Table>
                <ColumnIndex>9</ColumnIndex>
              </Lookup>
            </PdtColumnDest>
            <PdtColumnDest>
              <path>Bloomberg Code</path>
              <Lookup>
                <Table>MIFL_ME_01ANATIT</Table>
                <ColumnIndex>3</ColumnIndex>
              </Lookup>
            </PdtColumnDest>
          </destPaths>
        </PdtColumn>
        <PdtColumn>
          <name>ISIN Code</name>
          <len>12</len>
          <isRequired>false</isRequired>
          <isRelativeToRootNode>false</isRelativeToRootNode>
        </PdtColumn>
        <PdtColumn>
          <name>Transaction Date</name>
          <len>8</len>
          <isRequired>false</isRequired>
          <isRelativeToRootNode>false</isRelativeToRootNode>
          <destPaths>
            <PdtColumnDest>
              <path>Trade Date</path>
              <expression>System.DateTime.ParseExact(string.Compare(colVal, lineVal.Substring(36, 8).Trim()) == 1 ? lineVal.Substring(36, 8).Trim() : colVal, "yyyyMMdd", System.Globalization.CultureInfo.InvariantCulture).ToString("dd/MM/yyyy")</expression>
            </PdtColumnDest>
          </destPaths>
        </PdtColumn>
        <PdtColumn>
          <name>Settle Date</name>
          <len>8</len>
          <isRequired>false</isRequired>
          <isRelativeToRootNode>false</isRelativeToRootNode>
          <destPaths>
            <PdtColumnDest>
              <path>NAV Date</path>
              <expression>System.DateTime.ParseExact(colVal, "yyyyMMdd", System.Globalization.CultureInfo.InvariantCulture).ToString("dd/MM/yyyy")</expression>
            </PdtColumnDest>
            <PdtColumnDest>
              <path>Transaction Value Date</path>
              <expression>System.DateTime.ParseExact(colVal, "yyyyMMdd", System.Globalization.CultureInfo.InvariantCulture).ToString("dd/MM/yyyy")</expression>
            </PdtColumnDest>
          </destPaths>
        </PdtColumn>
        <PdtColumn>
          <name>Internal Transaction Number</name>
          <len>12</len>
          <isRequired>false</isRequired>
          <isRelativeToRootNode>false</isRelativeToRootNode>
          <destPaths>
            <PdtColumnDest>
              <path>Transaction Status Code</path>
            </PdtColumnDest>
          </destPaths>
        </PdtColumn>
        <PdtColumn>
          <name>External Transaction Number</name>
          <len>16</len>
          <isRequired>false</isRequired>
          <isRelativeToRootNode>false</isRelativeToRootNode>
          <destPaths>
            <PdtColumnDest>
              <path>Transaction Code</path>
            </PdtColumnDest>
          </destPaths>
        </PdtColumn>
        <PdtColumn>
          <name>Flag P/T</name>
          <len>1</len>
          <isRequired>false</isRequired>
          <isRelativeToRootNode>false</isRelativeToRootNode>
        </PdtColumn>
        <PdtColumn>
          <name>Type of Transaction</name>
          <len>4</len>
          <isRequired>false</isRequired>
          <isRelativeToRootNode>false</isRelativeToRootNode>
        </PdtColumn>
        <PdtColumn>
          <name>Sign of Transaction</name>
          <len>1</len>
          <isRequired>false</isRequired>
          <isRelativeToRootNode>false</isRelativeToRootNode>
          <destPaths>
            <PdtColumnDest>
              <path>Buy/Sell</path>
              <expression>colVal == "A" ? "Buy" : "Sell"</expression>
            </PdtColumnDest>
          </destPaths>
        </PdtColumn>
        <PdtColumn>
          <name>Broker Code</name>
          <len>8</len>
          <isRequired>false</isRequired>
          <isRelativeToRootNode>false</isRelativeToRootNode>
          <destPaths>
            <PdtColumnDest>
              <path>Counterparty/Broker Code</path>
              <Lookup>
                <File>MIFL_ME_03ANACTP_*</File>
                <Expression>lineVal.Substring(0, 8).Trim() == colVal ? colVal + "-" + lineVal.Substring(8, 40).Trim() : ""</Expression>
              </Lookup>
            </PdtColumnDest>
            <PdtColumnDest>
              <path>Counterparty/Broker Description</path>
              <Lookup>
                <File>MIFL_ME_03ANACTP_*</File>
                <Expression>lineVal.Substring(0, 8).Trim() == colVal ? lineVal.Substring(8, 40).Trim() : ""</Expression>
              </Lookup>
            </PdtColumnDest>
            <PdtColumnDest>
              <path>BIC Code</path>
              <Lookup>
                <File>CtpyBicCodes.txt</File>
                <Expression>lineVal.Split(';')[2].Trim() == colVal ? lineVal.Split(';')[1].Trim() : ""</Expression>
              </Lookup>
            </PdtColumnDest>
            <PdtColumnDest>
              <path>Broker Name</path>
              <Lookup>
                <File>MIFL_ME_03ANACTP_*</File>
                <Expression>lineVal.Substring(0, 8).Trim() == colVal ? lineVal.Substring(8, 40).Trim() : ""</Expression>
              </Lookup>
            </PdtColumnDest>
          </destPaths>
        </PdtColumn>
        <PdtColumn>
          <name>Quantity</name>
          <len>17</len>
          <isRequired>false</isRequired>
          <isRelativeToRootNode>false</isRelativeToRootNode>
          <destPaths>
            <PdtColumnDest>
              <path>Quantity</path>
              <expression>(lineVal.Substring(77, 1) == "A" ? "+" : "-") + colVal.Substring(0, 15 - int.Parse(colVal.Substring(15, 1))) + "." + colVal.Substring(15 - int.Parse(colVal.Substring(15, 1)), int.Parse(colVal.Substring(15, 1)))</expression>
            </PdtColumnDest>
          </destPaths>
        </PdtColumn>
        <PdtColumn>
          <name>Security Price</name>
          <len>17</len>
          <isRequired>false</isRequired>
          <isRelativeToRootNode>false</isRelativeToRootNode>
        </PdtColumn>
        <PdtColumn>
          <name>Net Price</name>
          <len>17</len>
          <isRequired>false</isRequired>
          <isRelativeToRootNode>false</isRelativeToRootNode>
        </PdtColumn>
        <PdtColumn>
          <name>Close Price</name>
          <len>17</len>
          <isRequired>false</isRequired>
          <isRelativeToRootNode>false</isRelativeToRootNode>
        </PdtColumn>
        <PdtColumn>
          <name>Accrued Interest Amount</name>
          <len>17</len>
          <isRequired>false</isRequired>
          <isRelativeToRootNode>false</isRelativeToRootNode>
        </PdtColumn>
        <PdtColumn>
          <name>Net Total Amount in Security Currency</name>
          <len>17</len>
          <isRequired>false</isRequired>
          <isRelativeToRootNode>false</isRelativeToRootNode>
        </PdtColumn>
        <PdtColumn>
          <name>Gross Amount in Security Currency</name>
          <len>17</len>
          <isRequired>false</isRequired>
          <isRelativeToRootNode>false</isRelativeToRootNode>
          <destPaths>
            <PdtColumnDest>
              <path>Premium</path>
              <expression>colVal.Substring(16, 1) + colVal.Substring(0, 15 - int.Parse(colVal.Substring(15, 1))) + "." + colVal.Substring(15 - int.Parse(colVal.Substring(15, 1)), int.Parse(colVal.Substring(15, 1)))</expression>
            </PdtColumnDest>
          </destPaths>
        </PdtColumn>
        <PdtColumn>
          <name>ISO Currency Code</name>
          <len>3</len>
          <isRequired>false</isRequired>
          <isRelativeToRootNode>false</isRelativeToRootNode>
        </PdtColumn>
        <PdtColumn>
          <name>Net Total Amount in Settlement Currency</name>
          <len>17</len>
          <isRequired>false</isRequired>
          <isRelativeToRootNode>false</isRelativeToRootNode>
          <destPaths>
            <PdtColumnDest>
              <path>Trade Amount</path>
              <expression>(lineVal.Substring(77, 1) == "A" ? "+" : "-") + colVal.Substring(0, 15 - int.Parse(colVal.Substring(15, 1))) + "." + colVal.Substring(15 - int.Parse(colVal.Substring(15, 1)), int.Parse(colVal.Substring(15, 1)))</expression>
            </PdtColumnDest>
          </destPaths>
        </PdtColumn>
        <PdtColumn>
          <name>Gross Total Amount in Settlement Currency</name>
          <len>17</len>
          <isRequired>false</isRequired>
          <isRelativeToRootNode>false</isRelativeToRootNode>
        </PdtColumn>
        <PdtColumn>
          <name>Settlement ISO Currency Code</name>
          <len>3</len>
          <isRequired>false</isRequired>
          <isRelativeToRootNode>false</isRelativeToRootNode>
          <destPaths>
            <PdtColumnDest>
              <path>Option Ccy</path>
            </PdtColumnDest>
          </destPaths>
        </PdtColumn>
        <PdtColumn>
          <name>Settlement Currency Exchange Rate</name>
          <len>17</len>
          <isRequired>false</isRequired>
          <isRelativeToRootNode>false</isRelativeToRootNode>
        </PdtColumn>
        <PdtColumn>
          <name>Fees Amount</name>
          <len>17</len>
          <isRequired>false</isRequired>
          <isRelativeToRootNode>false</isRelativeToRootNode>
          <destPaths>
            <PdtColumnDest>
              <path>Fees Amount in Transaction Currency</path>
              <expression>colVal.Substring(16, 1) + colVal.Substring(0, 15 - int.Parse(colVal.Substring(15, 1))) + "." + colVal.Substring(15 - int.Parse(colVal.Substring(15, 1)), int.Parse(colVal.Substring(15, 1)))</expression>
            </PdtColumnDest>
          </destPaths>
        </PdtColumn>
        <PdtColumn>
          <name>Commission Broker</name>
          <len>17</len>
          <isRequired>false</isRequired>
          <isRelativeToRootNode>false</isRelativeToRootNode>
          <destPaths>
            <PdtColumnDest>
              <path>Commission Amount</path>
              <expression>colVal.Substring(16, 1) + colVal.Substring(0, 15 - int.Parse(colVal.Substring(15, 1))) + "." + colVal.Substring(15 - int.Parse(colVal.Substring(15, 1)), int.Parse(colVal.Substring(15, 1)))</expression>
            </PdtColumnDest>
          </destPaths>
        </PdtColumn>
        <PdtColumn>
          <name>Commission Others</name>
          <len>17</len>
          <isRequired>false</isRequired>
          <isRelativeToRootNode>false</isRelativeToRootNode>
        </PdtColumn>
        <PdtColumn>
          <name>Internal Contract Number</name>
          <len>10</len>
          <isRequired>false</isRequired>
          <isRelativeToRootNode>false</isRelativeToRootNode>
          <destPaths>
            <PdtColumnDest>
              <path>Contract Number</path>
            </PdtColumnDest>
          </destPaths>
        </PdtColumn>
      </columns>
    </PdtTransformation>
    <PdtTransformation>
      <name>SSB2Rbc_FutureTrade</name>
      <type>Csv2Csv</type>
      <label>SSB to RBC Future Trade</label>
      <category>Medio</category>
      <templateFile>Rbc_Futures.csv</templateFile>
      <csvSrcSeparator>0</csvSrcSeparator>
      <csvDestSeparator>59</csvDestSeparator>
      <processingCondition>",GFJL,GFJH,GFJG,GFJN,".IndexOf("," + lineVal.Substring(0, 6).Trim() + ",") &lt; 0 &amp;&amp; (lineVal.Substring(73, 4).Trim() == "AFUT" || lineVal.Substring(73, 4).Trim() == "VFUT")</processingCondition>
      <variables>
        <PdtVariable>
          <name>BloombergCodeType</name>
          <expressionBefore>lineVal.Substring(6, 10).Trim()</expressionBefore>
          <Lookup>
            <Table>MIFL_ME_01ANATIT</Table>
            <ColumnIndex>0</ColumnIndex>
            <Lookup>
              <File>MIFL_ME_15DOMIN_*</File>
              <Expression>lineVal.Substring(0, 20).Trim() == "INST_TYP" &amp;&amp; lineVal.Substring(20, 10).Trim() == colVal ? lineVal.Substring(30, 40).Trim() : ""</Expression>
              <Lookup>
                <File>BloombergCodes.txt</File>
                <Expression>lineVal.Split(';')[2].Trim() == colVal ? lineVal.Split(';')[3].Trim() : ""</Expression>
              </Lookup>
            </Lookup>
          </Lookup>
        </PdtVariable>
      </variables>
      <columns>
        <PdtColumn>
          <name>Portfolio Code</name>
          <len>6</len>
          <isRequired>false</isRequired>
          <isRelativeToRootNode>false</isRelativeToRootNode>
          <destPaths>
            <PdtColumnDest>
              <path>Fund Code</path>
            </PdtColumnDest>
            <PdtColumnDest>
              <path>External Fund Identifier</path>
            </PdtColumnDest>
            <PdtColumnDest>
              <path>Fund Name</path>
              <Lookup>
                <File>MIFL_ME_10FLSNV_*</File>
                <Expression>lineVal.Substring(0, 6).Trim() == colVal ? lineVal.Substring(6, 40).Trim() : ""</Expression>
              </Lookup>
            </PdtColumnDest>
            <PdtColumnDest>
              <path>Manager Code</path>
            </PdtColumnDest>
          </destPaths>
        </PdtColumn>
        <PdtColumn>
          <name>Internal Security Number</name>
          <len>10</len>
          <isRequired>false</isRequired>
          <isRelativeToRootNode>false</isRelativeToRootNode>
          <destPaths>
            <PdtColumnDest>
              <path>GTI Description</path>
              <processingCondition>colVal == "FUTURES"</processingCondition>
              <Lookup>
                <Table>MIFL_ME_01ANATIT</Table>
                <ColumnIndex>1</ColumnIndex>
                <Lookup>
                  <File>MIFL_ME_15DOMIN_*</File>
                  <Expression>lineVal.Substring(0, 20).Trim() == "INST_GRP_COD" &amp;&amp; lineVal.Substring(20, 10).Trim() == colVal ? lineVal.Substring(30, 40).Trim() : ""</Expression>
                </Lookup>
              </Lookup>
            </PdtColumnDest>
            <PdtColumnDest>
              <path>Underlying ISIN</path>
              <Lookup>
                <Table>MIFL_ME_01ANATIT</Table>
                <ColumnIndex>2</ColumnIndex>
              </Lookup>
            </PdtColumnDest>
            <PdtColumnDest>
              <path>Type</path>
              <expression>"$BloombergCodeType"</expression>
            </PdtColumnDest>
            <PdtColumnDest>
              <path>Future Description</path>
              <Lookup>
                <Table>MIFL_ME_01ANATIT</Table>
                <ColumnIndex>4</ColumnIndex>
              </Lookup>
            </PdtColumnDest>
            <PdtColumnDest>
              <path>Future Maturity Date</path>
              <Lookup>
                <Expression>System.DateTime.ParseExact(colVal, "yyyyMMdd", System.Globalization.CultureInfo.InvariantCulture).ToString("dd/MM/yyyy")</Expression>
                <Table>MIFL_ME_01ANATIT</Table>
                <ColumnIndex>5</ColumnIndex>
              </Lookup>
            </PdtColumnDest>
            <PdtColumnDest>
              <path>Bloomberg Code</path>
              <Lookup>
                <Expression>colVal != "" ? colVal + " $BloombergCodeType" : ""</Expression>
                <Table>MIFL_ME_01ANATIT</Table>
                <ColumnIndex>3</ColumnIndex>
              </Lookup>
            </PdtColumnDest>
          </destPaths>
        </PdtColumn>
        <PdtColumn>
          <name>ISIN Code</name>
          <len>12</len>
          <isRequired>false</isRequired>
          <isRelativeToRootNode>false</isRelativeToRootNode>
        </PdtColumn>
        <PdtColumn>
          <name>Transaction Date</name>
          <len>8</len>
          <isRequired>false</isRequired>
          <isRelativeToRootNode>false</isRelativeToRootNode>
          <destPaths>
            <PdtColumnDest>
              <path>Trade Date</path>
              <expression>System.DateTime.ParseExact(string.Compare(colVal, lineVal.Substring(36, 8).Trim()) == 1 ? lineVal.Substring(36, 8).Trim() : colVal, "yyyyMMdd", System.Globalization.CultureInfo.InvariantCulture).ToString("dd/MM/yyyy")</expression>
            </PdtColumnDest>
          </destPaths>
        </PdtColumn>
        <PdtColumn>
          <name>Settle Date</name>
          <len>8</len>
          <isRequired>false</isRequired>
          <isRelativeToRootNode>false</isRelativeToRootNode>
          <destPaths>
            <PdtColumnDest>
              <path>Accounting Date</path>
              <expression>System.DateTime.ParseExact(colVal, "yyyyMMdd", System.Globalization.CultureInfo.InvariantCulture).ToString("dd/MM/yyyy")</expression>
            </PdtColumnDest>
            <PdtColumnDest>
              <path>Transaction Value Date</path>
              <expression>System.DateTime.ParseExact(colVal, "yyyyMMdd", System.Globalization.CultureInfo.InvariantCulture).ToString("dd/MM/yyyy")</expression>
            </PdtColumnDest>
          </destPaths>
        </PdtColumn>
        <PdtColumn>
          <name>Internal Transaction Number</name>
          <len>12</len>
          <isRequired>false</isRequired>
          <isRelativeToRootNode>false</isRelativeToRootNode>
          <destPaths>
            <PdtColumnDest>
              <path>Transaction Status Code</path>
            </PdtColumnDest>
          </destPaths>
        </PdtColumn>
        <PdtColumn>
          <name>External Transaction Number</name>
          <len>16</len>
          <isRequired>false</isRequired>
          <isRelativeToRootNode>false</isRelativeToRootNode>
          <destPaths>
            <PdtColumnDest>
              <path>Transaction Code</path>
            </PdtColumnDest>
          </destPaths>
        </PdtColumn>
        <PdtColumn>
          <name>Flag P/T</name>
          <len>1</len>
          <isRequired>false</isRequired>
          <isRelativeToRootNode>false</isRelativeToRootNode>
        </PdtColumn>
        <PdtColumn>
          <name>Type of Transaction</name>
          <len>4</len>
          <isRequired>false</isRequired>
          <isRelativeToRootNode>false</isRelativeToRootNode>
        </PdtColumn>
        <PdtColumn>
          <name>Sign of Transaction</name>
          <len>1</len>
          <isRequired>false</isRequired>
          <isRelativeToRootNode>false</isRelativeToRootNode>
          <destPaths>
            <PdtColumnDest>
              <path>Buy/Sell</path>
              <expression>colVal == "A" ? "Buy" : "Sell"</expression>
            </PdtColumnDest>
          </destPaths>
        </PdtColumn>
        <PdtColumn>
          <name>Broker Code</name>
          <len>8</len>
          <isRequired>false</isRequired>
          <isRelativeToRootNode>false</isRelativeToRootNode>
          <destPaths>
            <PdtColumnDest>
              <path>Counterparty/Broker Code</path>
              <Lookup>
                <File>MIFL_ME_03ANACTP_*</File>
                <Expression>lineVal.Substring(0, 8).Trim() == colVal ? colVal + "-" + lineVal.Substring(8, 40).Trim() : ""</Expression>
              </Lookup>
            </PdtColumnDest>
            <PdtColumnDest>
              <path>Counterparty/Broker Description</path>
              <Lookup>
                <File>MIFL_ME_03ANACTP_*</File>
                <Expression>lineVal.Substring(0, 8).Trim() == colVal ? lineVal.Substring(8, 40).Trim() : ""</Expression>
              </Lookup>
            </PdtColumnDest>
            <PdtColumnDest>
              <path>BIC Code</path>
              <Lookup>
                <File>CtpyBicCodes.txt</File>
                <Expression>lineVal.Split(';')[2].Trim() == colVal ? lineVal.Split(';')[1].Trim() : ""</Expression>
              </Lookup>
            </PdtColumnDest>
          </destPaths>
        </PdtColumn>
        <PdtColumn>
          <name>Quantity</name>
          <len>17</len>
          <isRequired>false</isRequired>
          <isRelativeToRootNode>false</isRelativeToRootNode>
          <destPaths>
            <PdtColumnDest>
              <path>Qty</path>
              <expression>(lineVal.Substring(77, 1) == "A" ? "+" : "-") + colVal.Substring(0, 15 - int.Parse(colVal.Substring(15, 1))) + "." + colVal.Substring(15 - int.Parse(colVal.Substring(15, 1)), int.Parse(colVal.Substring(15, 1)))</expression>
            </PdtColumnDest>
          </destPaths>
        </PdtColumn>
        <PdtColumn>
          <name>Security Price</name>
          <len>17</len>
          <isRequired>false</isRequired>
          <isRelativeToRootNode>false</isRelativeToRootNode>
          <destPaths>
            <PdtColumnDest>
              <path>Trade Price</path>
              <expression>colVal.Substring(16, 1) + colVal.Substring(0, 15 - int.Parse(colVal.Substring(15, 1))) + "." + colVal.Substring(15 - int.Parse(colVal.Substring(15, 1)), int.Parse(colVal.Substring(15, 1)))</expression>
            </PdtColumnDest>
          </destPaths>
        </PdtColumn>
        <PdtColumn>
          <name>Net Price</name>
          <len>17</len>
          <isRequired>false</isRequired>
          <isRelativeToRootNode>false</isRelativeToRootNode>
        </PdtColumn>
        <PdtColumn>
          <name>Close Price</name>
          <len>17</len>
          <isRequired>false</isRequired>
          <isRelativeToRootNode>false</isRelativeToRootNode>
        </PdtColumn>
        <PdtColumn>
          <name>Accrued Interest Amount</name>
          <len>17</len>
          <isRequired>false</isRequired>
          <isRelativeToRootNode>false</isRelativeToRootNode>
        </PdtColumn>
        <PdtColumn>
          <name>Net Total Amount in Security Currency</name>
          <len>17</len>
          <isRequired>false</isRequired>
          <isRelativeToRootNode>false</isRelativeToRootNode>
        </PdtColumn>
        <PdtColumn>
          <name>Gross Amount in Security Currency</name>
          <len>17</len>
          <isRequired>false</isRequired>
          <isRelativeToRootNode>false</isRelativeToRootNode>
        </PdtColumn>
        <PdtColumn>
          <name>ISO Currency Code</name>
          <len>3</len>
          <isRequired>false</isRequired>
          <isRelativeToRootNode>false</isRelativeToRootNode>
        </PdtColumn>
        <PdtColumn>
          <name>Net Total Amount in Settlement Currency</name>
          <len>17</len>
          <isRequired>false</isRequired>
          <isRelativeToRootNode>false</isRelativeToRootNode>
          <destPaths>
            <PdtColumnDest>
              <path>Trade Amount</path>
              <expression>(lineVal.Substring(77, 1) == "A" ? "+" : "-") + colVal.Substring(0, 15 - int.Parse(colVal.Substring(15, 1))) + "." + colVal.Substring(15 - int.Parse(colVal.Substring(15, 1)), int.Parse(colVal.Substring(15, 1)))</expression>
            </PdtColumnDest>
          </destPaths>
        </PdtColumn>
        <PdtColumn>
          <name>Gross Total Amount in Settlement Currency</name>
          <len>17</len>
          <isRequired>false</isRequired>
          <isRelativeToRootNode>false</isRelativeToRootNode>
        </PdtColumn>
        <PdtColumn>
          <name>Settlement ISO Currency Code</name>
          <len>3</len>
          <isRequired>false</isRequired>
          <isRelativeToRootNode>false</isRelativeToRootNode>
          <destPaths>
            <PdtColumnDest>
              <path>Future Currency</path>
            </PdtColumnDest>
          </destPaths>
        </PdtColumn>
        <PdtColumn>
          <name>Settlement Currency Exchange Rate</name>
          <len>17</len>
          <isRequired>false</isRequired>
          <isRelativeToRootNode>false</isRelativeToRootNode>
        </PdtColumn>
        <PdtColumn>
          <name>Fees Amount</name>
          <len>17</len>
          <isRequired>false</isRequired>
          <isRelativeToRootNode>false</isRelativeToRootNode>
          <destPaths>
            <PdtColumnDest>
              <path>Fees Amount in Transaction Currency</path>
              <expression>colVal.Substring(16, 1) + colVal.Substring(0, 15 - int.Parse(colVal.Substring(15, 1))) + "." + colVal.Substring(15 - int.Parse(colVal.Substring(15, 1)), int.Parse(colVal.Substring(15, 1)))</expression>
            </PdtColumnDest>
          </destPaths>
        </PdtColumn>
        <PdtColumn>
          <name>Commission Broker</name>
          <len>17</len>
          <isRequired>false</isRequired>
          <isRelativeToRootNode>false</isRelativeToRootNode>
          <destPaths>
            <PdtColumnDest>
              <path>Commission Amount</path>
              <expression>colVal.Substring(16, 1) + colVal.Substring(0, 15 - int.Parse(colVal.Substring(15, 1))) + "." + colVal.Substring(15 - int.Parse(colVal.Substring(15, 1)), int.Parse(colVal.Substring(15, 1)))</expression>
            </PdtColumnDest>
          </destPaths>
        </PdtColumn>
        <PdtColumn>
          <name>Commission Others</name>
          <len>17</len>
          <isRequired>false</isRequired>
          <isRelativeToRootNode>false</isRelativeToRootNode>
        </PdtColumn>
        <PdtColumn>
          <name>Internal Contract Number</name>
          <len>10</len>
          <isRequired>false</isRequired>
          <isRelativeToRootNode>false</isRelativeToRootNode>
          <destPaths>
            <PdtColumnDest>
              <path>Contract Number</path>
            </PdtColumnDest>
          </destPaths>
        </PdtColumn>
      </columns>
    </PdtTransformation>
    <PdtTransformation>
      <name>SSB2Rbc_SwapTrade</name>
      <type>Csv2Csv</type>
      <label>SSB to RBC Swap Trade</label>
      <category>Medio</category>
      <templateFile>Rbc_Swaps.csv</templateFile>
      <csvSrcSeparator>0</csvSrcSeparator>
      <csvDestSeparator>59</csvDestSeparator>
      <processingCondition>",GFJL,GFJH,GFJG,GFJN,".IndexOf("," + lineVal.Substring(0, 6).Trim() + ",") &lt; 0 &amp;&amp; ",ACS,ESW,".IndexOf("," + lineVal.Substring(73, 3).Trim() + ",") &gt;= 0</processingCondition>
      <columns>
        <PdtColumn>
          <name>Portfolio Code</name>
          <len>6</len>
          <isRequired>false</isRequired>
          <isRelativeToRootNode>false</isRelativeToRootNode>
          <destPaths>
            <PdtColumnDest>
              <path>Sub-fund Identifier</path>
            </PdtColumnDest>
            <PdtColumnDest>
              <path>External Fund Identifier</path>
            </PdtColumnDest>
            <PdtColumnDest>
              <path>Fund Name</path>
              <Lookup>
                <File>MIFL_ME_10FLSNV_*</File>
                <Expression>lineVal.Substring(0, 6).Trim() == colVal ? lineVal.Substring(6, 40).Trim() : ""</Expression>
              </Lookup>
            </PdtColumnDest>
          </destPaths>
        </PdtColumn>
        <PdtColumn>
          <name>Internal Security Number</name>
          <len>10</len>
          <isRequired>false</isRequired>
          <isRelativeToRootNode>false</isRelativeToRootNode>
          <destPaths>
            <PdtColumnDest>
              <path>Maturity Date</path>
              <Lookup>
                <Expression>System.DateTime.ParseExact(colVal, "yyyyMMdd", System.Globalization.CultureInfo.InvariantCulture).ToString("dd/MM/yyyy")</Expression>
                <Table>MIFL_ME_01ANATIT</Table>
                <ColumnIndex>5</ColumnIndex>
              </Lookup>
            </PdtColumnDest>
          </destPaths>
        </PdtColumn>
        <PdtColumn>
          <name>ISIN Code</name>
          <len>12</len>
          <isRequired>false</isRequired>
          <isRelativeToRootNode>false</isRelativeToRootNode>
        </PdtColumn>
        <PdtColumn>
          <name>Transaction Date</name>
          <len>8</len>
          <isRequired>false</isRequired>
          <isRelativeToRootNode>false</isRelativeToRootNode>
          <destPaths>
            <PdtColumnDest>
              <path>Trade Date</path>
              <expression>System.DateTime.ParseExact(string.Compare(colVal, lineVal.Substring(36, 8).Trim()) == 1 ? lineVal.Substring(36, 8).Trim() : colVal, "yyyyMMdd", System.Globalization.CultureInfo.InvariantCulture).ToString("dd/MM/yyyy")</expression>
            </PdtColumnDest>
          </destPaths>
        </PdtColumn>
        <PdtColumn>
          <name>Settle Date</name>
          <len>8</len>
          <isRequired>false</isRequired>
          <isRelativeToRootNode>false</isRelativeToRootNode>
          <destPaths>
            <PdtColumnDest>
              <path>Value Date</path>
              <expression>System.DateTime.ParseExact(colVal, "yyyyMMdd", System.Globalization.CultureInfo.InvariantCulture).ToString("dd/MM/yyyy")</expression>
            </PdtColumnDest>
          </destPaths>
        </PdtColumn>
        <PdtColumn>
          <name>Internal Transaction Number</name>
          <len>12</len>
          <isRequired>false</isRequired>
          <isRelativeToRootNode>false</isRelativeToRootNode>
          <destPaths>
            <PdtColumnDest>
              <path>RBC Contract Number</path>
            </PdtColumnDest>
          </destPaths>
        </PdtColumn>
        <PdtColumn>
          <name>External Transaction Number</name>
          <len>16</len>
          <isRequired>false</isRequired>
          <isRelativeToRootNode>false</isRelativeToRootNode>
        </PdtColumn>
        <PdtColumn>
          <name>Flag P/T</name>
          <len>1</len>
          <isRequired>false</isRequired>
          <isRelativeToRootNode>false</isRelativeToRootNode>
        </PdtColumn>
        <PdtColumn>
          <name>Type of Transaction</name>
          <len>4</len>
          <isRequired>false</isRequired>
          <isRelativeToRootNode>false</isRelativeToRootNode>
        </PdtColumn>
        <PdtColumn>
          <name>Sign of Transaction</name>
          <len>1</len>
          <isRequired>false</isRequired>
          <isRelativeToRootNode>false</isRelativeToRootNode>
        </PdtColumn>
        <PdtColumn>
          <name>Broker Code</name>
          <len>8</len>
          <isRequired>false</isRequired>
          <isRelativeToRootNode>false</isRelativeToRootNode>
          <destPaths>
            <PdtColumnDest>
              <path>BIC Code Broker</path>
              <Lookup>
                <File>CtpyBicCodes.txt</File>
                <Expression>lineVal.Split(';')[2].Trim() == colVal ? lineVal.Split(';')[1].Trim() : ""</Expression>
              </Lookup>
            </PdtColumnDest>
          </destPaths>
        </PdtColumn>
        <PdtColumn>
          <name>Quantity</name>
          <len>17</len>
          <isRequired>false</isRequired>
          <isRelativeToRootNode>false</isRelativeToRootNode>
          <destPaths>
            <PdtColumnDest>
              <path>Nominal Payable Leg</path>
              <expression>colVal.Substring(16, 1) + colVal.Substring(0, 15 - int.Parse(colVal.Substring(15, 1))) + "." + colVal.Substring(15 - int.Parse(colVal.Substring(15, 1)), int.Parse(colVal.Substring(15, 1)))</expression>
            </PdtColumnDest>
            <PdtColumnDest>
              <path>Nominal Receivable Leg</path>
              <expression>colVal.Substring(16, 1) + colVal.Substring(0, 15 - int.Parse(colVal.Substring(15, 1))) + "." + colVal.Substring(15 - int.Parse(colVal.Substring(15, 1)), int.Parse(colVal.Substring(15, 1)))</expression>
            </PdtColumnDest>
          </destPaths>
        </PdtColumn>
        <PdtColumn>
          <name>Security Price</name>
          <len>17</len>
          <isRequired>false</isRequired>
          <isRelativeToRootNode>false</isRelativeToRootNode>
        </PdtColumn>
        <PdtColumn>
          <name>Net Price</name>
          <len>17</len>
          <isRequired>false</isRequired>
          <isRelativeToRootNode>false</isRelativeToRootNode>
        </PdtColumn>
        <PdtColumn>
          <name>Close Price</name>
          <len>17</len>
          <isRequired>false</isRequired>
          <isRelativeToRootNode>false</isRelativeToRootNode>
        </PdtColumn>
        <PdtColumn>
          <name>Accrued Interest Amount</name>
          <len>17</len>
          <isRequired>false</isRequired>
          <isRelativeToRootNode>false</isRelativeToRootNode>
        </PdtColumn>
        <PdtColumn>
          <name>Net Total Amount in Security Currency</name>
          <len>17</len>
          <isRequired>false</isRequired>
          <isRelativeToRootNode>false</isRelativeToRootNode>
        </PdtColumn>
        <PdtColumn>
          <name>Gross Amount in Security Currency</name>
          <len>17</len>
          <isRequired>false</isRequired>
          <isRelativeToRootNode>false</isRelativeToRootNode>
        </PdtColumn>
        <PdtColumn>
          <name>ISO Currency Code</name>
          <len>3</len>
          <isRequired>false</isRequired>
          <isRelativeToRootNode>false</isRelativeToRootNode>
        </PdtColumn>
        <PdtColumn>
          <name>Net Total Amount in Settlement Currency</name>
          <len>17</len>
          <isRequired>false</isRequired>
          <isRelativeToRootNode>false</isRelativeToRootNode>
        </PdtColumn>
        <PdtColumn>
          <name>Gross Total Amount in Settlement Currency</name>
          <len>17</len>
          <isRequired>false</isRequired>
          <isRelativeToRootNode>false</isRelativeToRootNode>
        </PdtColumn>
        <PdtColumn>
          <name>Settlement ISO Currency Code</name>
          <len>3</len>
          <isRequired>false</isRequired>
          <isRelativeToRootNode>false</isRelativeToRootNode>
          <destPaths>
            <PdtColumnDest>
              <path>Currency Payable Leg</path>
            </PdtColumnDest>
            <PdtColumnDest>
              <path>Currency Receivable Leg</path>
            </PdtColumnDest>
          </destPaths>
        </PdtColumn>
        <PdtColumn>
          <name>Settlement Currency Exchange Rate</name>
          <len>17</len>
          <isRequired>false</isRequired>
          <isRelativeToRootNode>false</isRelativeToRootNode>
        </PdtColumn>
        <PdtColumn>
          <name>Fees Amount</name>
          <len>17</len>
          <isRequired>false</isRequired>
          <isRelativeToRootNode>false</isRelativeToRootNode>
          <destPaths>
            <PdtColumnDest>
              <path>Fees</path>
              <expression>colVal.Substring(16, 1) + colVal.Substring(0, 15 - int.Parse(colVal.Substring(15, 1))) + "." + colVal.Substring(15 - int.Parse(colVal.Substring(15, 1)), int.Parse(colVal.Substring(15, 1)))</expression>
            </PdtColumnDest>
          </destPaths>
        </PdtColumn>
        <PdtColumn>
          <name>Commission Broker</name>
          <len>17</len>
          <isRequired>false</isRequired>
          <isRelativeToRootNode>false</isRelativeToRootNode>
        </PdtColumn>
        <PdtColumn>
          <name>Commission Others</name>
          <len>17</len>
          <isRequired>false</isRequired>
          <isRelativeToRootNode>false</isRelativeToRootNode>
        </PdtColumn>
        <PdtColumn>
          <name>Internal Contract Number</name>
          <len>10</len>
          <isRequired>false</isRequired>
          <isRelativeToRootNode>false</isRelativeToRootNode>
        </PdtColumn>
      </columns>
    </PdtTransformation>
    <PdtTransformation>
      <name>SSB2Rbc_NavFund</name>
      <type>Csv2Csv</type>
      <label>SSB to RBC Nav Fund</label>
      <category>Medio</category>
      <templateFile>Rbc_NavFund.csv</templateFile>
      <csvSrcSeparator>0</csvSrcSeparator>
      <csvDestSeparator>59</csvDestSeparator>
      <processingCondition>(lineVal.Substring(0, 6).Trim() == "M4" || lineVal.Substring(0, 6).Trim() == "M6") &amp;&amp; lineVal.Substring(46, 12).Trim() != ""</processingCondition>
      <groupBy>
        <string>Fund Code</string>
        <string>Fund name</string>
        <string>Date Nav</string>
      </groupBy>
      <columns>
        <PdtColumn>
          <name>Portfolio Code</name>
          <len>6</len>
          <isRequired>false</isRequired>
          <isRelativeToRootNode>false</isRelativeToRootNode>
          <destPaths>
            <PdtColumnDest>
              <path>Fund Code</path>
            </PdtColumnDest>
          </destPaths>
        </PdtColumn>
        <PdtColumn>
          <name>Portfolio Name</name>
          <len>40</len>
          <isRequired>false</isRequired>
          <isRelativeToRootNode>false</isRelativeToRootNode>
          <destPaths>
            <PdtColumnDest>
              <path>Fund name</path>
            </PdtColumnDest>
          </destPaths>
        </PdtColumn>
        <PdtColumn>
          <name>ISIN Code</name>
          <len>12</len>
          <isRequired>false</isRequired>
          <isRelativeToRootNode>false</isRelativeToRootNode>
        </PdtColumn>
        <PdtColumn>
          <name>NAV Date</name>
          <len>8</len>
          <isRequired>false</isRequired>
          <isRelativeToRootNode>false</isRelativeToRootNode>
          <destPaths>
            <PdtColumnDest>
              <path>Date Nav</path>
              <expression>System.DateTime.ParseExact(colVal, "yyyyMMdd", System.Globalization.CultureInfo.InvariantCulture).ToString("dd-MMM-yyyy").ToUpper()</expression>
            </PdtColumnDest>
          </destPaths>
        </PdtColumn>
        <PdtColumn>
          <name>Next NAV Date</name>
          <len>8</len>
          <isRequired>false</isRequired>
          <isRelativeToRootNode>false</isRelativeToRootNode>
        </PdtColumn>
        <PdtColumn>
          <name>Net Value</name>
          <len>17</len>
          <isRequired>false</isRequired>
          <isRelativeToRootNode>false</isRelativeToRootNode>
          <destPaths>
            <PdtColumnDest>
              <path>Nav Net</path>
              <expression>colVal.Substring(16, 1) + colVal.Substring(0, 15 - int.Parse(colVal.Substring(15, 1))) + "." + colVal.Substring(15 - int.Parse(colVal.Substring(15, 1)), int.Parse(colVal.Substring(15, 1)))</expression>
              <aggregation>SUM</aggregation>
            </PdtColumnDest>
          </destPaths>
        </PdtColumn>
        <PdtColumn>
          <name>Share Value</name>
          <len>17</len>
          <isRequired>false</isRequired>
          <isRelativeToRootNode>false</isRelativeToRootNode>
          <destPaths>
            <PdtColumnDest>
              <path>Price Share</path>
              <expression>colVal.Substring(16, 1) + colVal.Substring(0, 15 - int.Parse(colVal.Substring(15, 1))) + "." + colVal.Substring(15 - int.Parse(colVal.Substring(15, 1)), int.Parse(colVal.Substring(15, 1)))</expression>
              <aggregation>AVG</aggregation>
            </PdtColumnDest>
          </destPaths>
        </PdtColumn>
        <PdtColumn>
          <name>Share Value Gross</name>
          <len>17</len>
          <isRequired>false</isRequired>
          <isRelativeToRootNode>false</isRelativeToRootNode>
        </PdtColumn>
        <PdtColumn>
          <name>Number Share</name>
          <len>17</len>
          <isRequired>false</isRequired>
          <isRelativeToRootNode>false</isRelativeToRootNode>
          <destPaths>
            <PdtColumnDest>
              <path>Quantity Outstanding</path>
              <expression>colVal.Substring(16, 1) + colVal.Substring(0, 15 - int.Parse(colVal.Substring(15, 1))) + "." + colVal.Substring(15 - int.Parse(colVal.Substring(15, 1)), int.Parse(colVal.Substring(15, 1)))</expression>
              <aggregation>SUM</aggregation>
            </PdtColumnDest>
          </destPaths>
        </PdtColumn>
        <PdtColumn>
          <name>Id. Official Quota</name>
          <len>1</len>
          <isRequired>false</isRequired>
          <isRelativeToRootNode>false</isRelativeToRootNode>
        </PdtColumn>
        <PdtColumn>
          <name>Id. Validity Quota</name>
          <len>1</len>
          <isRequired>false</isRequired>
          <isRelativeToRootNode>false</isRelativeToRootNode>
        </PdtColumn>
      </columns>
    </PdtTransformation>
    <PdtTransformation>
      <name>SSB2Rbc_NavStrategy</name>
      <type>Csv2Csv</type>
      <label>SSB to RBC Nav Strategy</label>
      <category>Medio</category>
      <templateFile>Rbc_NavStrategy.csv</templateFile>
      <csvSrcSeparator>0</csvSrcSeparator>
      <csvDestSeparator>59</csvDestSeparator>
      <processingCondition>lineVal.Substring(0, 6).Trim() != "M4" &amp;&amp; lineVal.Substring(0, 6).Trim() != "M6"</processingCondition>
      <columns>
        <PdtColumn>
          <name>Portfolio Code</name>
          <len>6</len>
          <isRequired>false</isRequired>
          <isRelativeToRootNode>false</isRelativeToRootNode>
          <destPaths>
            <PdtColumnDest>
              <path>Fund Code</path>
            </PdtColumnDest>
            <PdtColumnDest>
              <path>Manager No</path>
            </PdtColumnDest>
            <PdtColumnDest>
              <path>Manager Code</path>
            </PdtColumnDest>
          </destPaths>
        </PdtColumn>
        <PdtColumn>
          <name>Portfolio Name</name>
          <len>40</len>
          <isRequired>false</isRequired>
          <isRelativeToRootNode>false</isRelativeToRootNode>
          <destPaths>
            <PdtColumnDest>
              <path>Fund</path>
            </PdtColumnDest>
          </destPaths>
        </PdtColumn>
        <PdtColumn>
          <name>ISIN Code</name>
          <len>12</len>
          <isRequired>false</isRequired>
          <isRelativeToRootNode>false</isRelativeToRootNode>
        </PdtColumn>
        <PdtColumn>
          <name>NAV Date</name>
          <len>8</len>
          <isRequired>false</isRequired>
          <isRelativeToRootNode>false</isRelativeToRootNode>
          <destPaths>
            <PdtColumnDest>
              <path>Date</path>
              <expression>System.DateTime.ParseExact(colVal, "yyyyMMdd", System.Globalization.CultureInfo.InvariantCulture).ToString("dd/MM/yyyy").ToUpper()</expression>
            </PdtColumnDest>
          </destPaths>
        </PdtColumn>
        <PdtColumn>
          <name>Next NAV Date</name>
          <len>8</len>
          <isRequired>false</isRequired>
          <isRelativeToRootNode>false</isRelativeToRootNode>
        </PdtColumn>
        <PdtColumn>
          <name>Net Value</name>
          <len>17</len>
          <isRequired>false</isRequired>
          <isRelativeToRootNode>false</isRelativeToRootNode>
          <destPaths>
            <PdtColumnDest>
              <path>Market Value</path>
              <expression>colVal.Substring(16, 1) + colVal.Substring(0, 15 - int.Parse(colVal.Substring(15, 1))) + "." + colVal.Substring(15 - int.Parse(colVal.Substring(15, 1)), int.Parse(colVal.Substring(15, 1)))</expression>
            </PdtColumnDest>
          </destPaths>
        </PdtColumn>
        <PdtColumn>
          <name>Share Value</name>
          <len>17</len>
          <isRequired>false</isRequired>
          <isRelativeToRootNode>false</isRelativeToRootNode>
        </PdtColumn>
        <PdtColumn>
          <name>Share Value Gross</name>
          <len>17</len>
          <isRequired>false</isRequired>
          <isRelativeToRootNode>false</isRelativeToRootNode>
        </PdtColumn>
        <PdtColumn>
          <name>Number Share</name>
          <len>17</len>
          <isRequired>false</isRequired>
          <isRelativeToRootNode>false</isRelativeToRootNode>
        </PdtColumn>
        <PdtColumn>
          <name>Id. Official Quota</name>
          <len>1</len>
          <isRequired>false</isRequired>
          <isRelativeToRootNode>false</isRelativeToRootNode>
        </PdtColumn>
        <PdtColumn>
          <name>Id. Validity Quota</name>
          <len>1</len>
          <isRequired>false</isRequired>
          <isRelativeToRootNode>false</isRelativeToRootNode>
        </PdtColumn>
      </columns>
    </PdtTransformation>
    <PdtTransformation>
      <name>FundSettle2Rbc_OrderExec</name>
      <type>Csv2Csv</type>
      <label>Fund Settle to RBC Order Execution</label>
      <category>Medio</category>
      <templateFile>Rbc_OrderExecution.csv</templateFile>
      <csvSrcSeparator>44</csvSrcSeparator>
      <csvDestSeparator>44</csvDestSeparator>
      <columns>
        <PdtColumn>
          <name>Participant account number</name>
          <len>0</len>
          <isRequired>false</isRequired>
          <isRelativeToRootNode>false</isRelativeToRootNode>
        </PdtColumn>
        <PdtColumn>
          <name>Participant name</name>
          <len>0</len>
          <isRequired>false</isRequired>
          <isRelativeToRootNode>false</isRelativeToRootNode>
        </PdtColumn>
        <PdtColumn>
          <name>ISIN</name>
          <len>0</len>
          <isRequired>false</isRequired>
          <isRelativeToRootNode>false</isRelativeToRootNode>
          <destPaths>
            <PdtColumnDest>
              <path>fund-id-ext</path>
              <expression>"ISIN:" + colVal</expression>
            </PdtColumnDest>
            <PdtColumnDest>
              <path>bloomberg-security-code</path>
              <Lookup>
                <Expression>"SELECT T.REFERENCE, T.SICOVAM, ERI.VALUE ISIN FROM EXTRNL_REFERENCES_DEFINITION ERD JOIN EXTRNL_REFERENCES_INSTRUMENTS ERI ON ERI.REF_IDENT = ERD.REF_IDENT JOIN TITRES T ON T.SICOVAM = ERI.SOPHIS_IDENT WHERE ERD.REF_NAME = 'ISIN' AND ERI.VALUE = '" + colVal + "'"</Expression>
                <Table>SQL</Table>
              </Lookup>
            </PdtColumnDest>
          </destPaths>
        </PdtColumn>
        <PdtColumn>
          <name>Fund name</name>
          <len>0</len>
          <isRequired>false</isRequired>
          <isRelativeToRootNode>false</isRelativeToRootNode>
        </PdtColumn>
        <PdtColumn>
          <name>FundSettle order number</name>
          <len>0</len>
          <isRequired>false</isRequired>
          <isRelativeToRootNode>false</isRelativeToRootNode>
          <destPaths>
            <PdtColumnDest>
              <path>confirm-no</path>
            </PdtColumnDest>
          </destPaths>
        </PdtColumn>
        <PdtColumn>
          <name>Your reference</name>
          <len>0</len>
          <isRequired>false</isRequired>
          <isRelativeToRootNode>false</isRelativeToRootNode>
          <destPaths>
            <PdtColumnDest>
              <path>all-shares</path>
              <expression>"no"</expression>
            </PdtColumnDest>
            <PdtColumnDest>
              <path>order-amt</path>
              <Lookup>
                <Expression>"SELECT QUANTITY FROM ORDER_PLACEMENT WHERE ORDERID IN (" + colVal + ")"</Expression>
                <Table>SQL</Table>
              </Lookup>
            </PdtColumnDest>
            <PdtColumnDest>
              <path>trn-id</path>
            </PdtColumnDest>
          </destPaths>
        </PdtColumn>
        <PdtColumn>
          <name>Order type</name>
          <len>0</len>
          <isRequired>false</isRequired>
          <isRelativeToRootNode>false</isRelativeToRootNode>
          <destPaths>
            <PdtColumnDest>
              <path>tran-code</path>
              <expression>colVal == "Subscription" ? "CTB" : "BTC"</expression>
            </PdtColumnDest>
          </destPaths>
        </PdtColumn>
        <PdtColumn>
          <name>Order date</name>
          <len>0</len>
          <isRequired>false</isRequired>
          <isRelativeToRootNode>false</isRelativeToRootNode>
          <destPaths>
            <PdtColumnDest>
              <path>order-date</path>
              <expression>colVal == "" ? "" : DateTime.Parse(colVal).ToString("dd/MM/yyyy")</expression>
            </PdtColumnDest>
          </destPaths>
        </PdtColumn>
        <PdtColumn>
          <name>Trade date</name>
          <len>0</len>
          <isRequired>false</isRequired>
          <isRelativeToRootNode>false</isRelativeToRootNode>
          <destPaths>
            <PdtColumnDest>
              <path>entry-date</path>
              <expression>colVal == "" ? "" : DateTime.Parse(colVal).ToString("dd/MM/yyyy")</expression>
            </PdtColumnDest>
          </destPaths>
        </PdtColumn>
        <PdtColumn>
          <name>Contractual settlement date</name>
          <len>0</len>
          <isRequired>false</isRequired>
          <isRelativeToRootNode>false</isRelativeToRootNode>
          <destPaths>
            <PdtColumnDest>
              <path>date-settled</path>
              <expression>colVal == "" ? "" : DateTime.Parse(colVal).ToString("dd/MM/yyyy")</expression>
            </PdtColumnDest>
          </destPaths>
        </PdtColumn>
        <PdtColumn>
          <name>Effective settlement date</name>
          <len>0</len>
          <isRequired>false</isRequired>
          <isRelativeToRootNode>false</isRelativeToRootNode>
        </PdtColumn>
        <PdtColumn>
          <name>Expected contract note date</name>
          <len>0</len>
          <isRequired>false</isRequired>
          <isRelativeToRootNode>false</isRelativeToRootNode>
        </PdtColumn>
        <PdtColumn>
          <name>Life cycle step - Status</name>
          <len>0</len>
          <isRequired>false</isRequired>
          <isRelativeToRootNode>false</isRelativeToRootNode>
          <destPaths>
            <PdtColumnDest>
              <path>h-status</path>
            </PdtColumnDest>
          </destPaths>
        </PdtColumn>
        <PdtColumn>
          <name>Last life cycle step - Status timestamp</name>
          <len>0</len>
          <isRequired>false</isRequired>
          <isRelativeToRootNode>false</isRelativeToRootNode>
        </PdtColumn>
        <PdtColumn>
          <name>Number of shares</name>
          <len>0</len>
          <isRequired>false</isRequired>
          <isRelativeToRootNode>false</isRelativeToRootNode>
          <destPaths>
            <PdtColumnDest>
              <path>receipt-shares</path>
            </PdtColumnDest>
          </destPaths>
        </PdtColumn>
        <PdtColumn>
          <name>Payment currency</name>
          <len>0</len>
          <isRequired>false</isRequired>
          <isRelativeToRootNode>false</isRelativeToRootNode>
          <destPaths>
            <PdtColumnDest>
              <path>local-currency</path>
            </PdtColumnDest>
          </destPaths>
        </PdtColumn>
        <PdtColumn>
          <name>Price 1</name>
          <len>0</len>
          <isRequired>false</isRequired>
          <isRelativeToRootNode>false</isRelativeToRootNode>
          <destPaths>
            <PdtColumnDest>
              <path>price-used</path>
            </PdtColumnDest>
          </destPaths>
        </PdtColumn>
        <PdtColumn>
          <name>Price type</name>
          <len>0</len>
          <isRequired>false</isRequired>
          <isRelativeToRootNode>false</isRelativeToRootNode>
        </PdtColumn>
        <PdtColumn>
          <name>Exchange currencies</name>
          <len>0</len>
          <isRequired>false</isRequired>
          <isRelativeToRootNode>false</isRelativeToRootNode>
        </PdtColumn>
        <PdtColumn>
          <name>Exchange rate</name>
          <len>0</len>
          <isRequired>false</isRequired>
          <isRelativeToRootNode>false</isRelativeToRootNode>
          <destPaths>
            <PdtColumnDest>
              <path>loc-curr-rate</path>
              <expression>1</expression>
            </PdtColumnDest>
          </destPaths>
        </PdtColumn>
        <PdtColumn>
          <name>Cash amount</name>
          <len>0</len>
          <isRequired>false</isRequired>
          <isRelativeToRootNode>false</isRelativeToRootNode>
          <destPaths>
            <PdtColumnDest>
              <path>receipt-amt</path>
              <expression>(string.IsNullOrEmpty((new System.Text.RegularExpressions.Regex(",(?=(?:[^\"]*\"[^\"]*\")*(?![^\"]*\"))")).Split(lineVal)[14]) ? 0 : double.Parse((new System.Text.RegularExpressions.Regex(",(?=(?:[^\"]*\"[^\"]*\")*(?![^\"]*\"))")).Split(lineVal)[14])) * (string.IsNullOrEmpty((new System.Text.RegularExpressions.Regex(",(?=(?:[^\"]*\"[^\"]*\")*(?![^\"]*\"))")).Split(lineVal)[16]) ? 0 : double.Parse((new System.Text.RegularExpressions.Regex(",(?=(?:[^\"]*\"[^\"]*\")*(?![^\"]*\"))")).Split(lineVal)[16]))</expression>
            </PdtColumnDest>
          </destPaths>
        </PdtColumn>
        <PdtColumn>
          <name>Settlement status</name>
          <len>0</len>
          <isRequired>false</isRequired>
          <isRelativeToRootNode>false</isRelativeToRootNode>
        </PdtColumn>
        <PdtColumn>
          <name>Narrative text</name>
          <len>0</len>
          <isRequired>false</isRequired>
          <isRelativeToRootNode>false</isRelativeToRootNode>
        </PdtColumn>
        <PdtColumn>
          <name>Last narrative timestamp</name>
          <len>0</len>
          <isRequired>false</isRequired>
          <isRelativeToRootNode>false</isRelativeToRootNode>
        </PdtColumn>
        <PdtColumn>
          <name>By order of</name>
          <len>0</len>
          <isRequired>false</isRequired>
          <isRelativeToRootNode>false</isRelativeToRootNode>
        </PdtColumn>
        <PdtColumn>
          <name>In favor of</name>
          <len>0</len>
          <isRequired>false</isRequired>
          <isRelativeToRootNode>false</isRelativeToRootNode>
        </PdtColumn>
        <PdtColumn>
          <name>Account Id</name>
          <len>0</len>
          <isRequired>false</isRequired>
          <isRelativeToRootNode>false</isRelativeToRootNode>
          <destPaths>
            <PdtColumnDest>
              <path>account-no</path>
            </PdtColumnDest>
          </destPaths>
        </PdtColumn>
      </columns>
    </PdtTransformation>
  </Transformations>
  <Tables>
    <PdtLookupTable>
      <Name>MIFL_ME_01ANATIT</Name>
      <File>MIFL_ME_01ANATIT_*</File>
      <keyExpression>lineVal.Substring(0, 10).Trim()</keyExpression>
      <columnsExpression>
        <string>lineVal.Substring(10, 4).Trim()</string>
        <string>lineVal.Substring(30, 2).Trim()</string>
        <string>lineVal.Substring(32, 12).Trim()</string>
        <string>lineVal.Substring(47, 20).Trim()</string>
        <string>lineVal.Substring(67, 20).Trim()</string>
        <string>lineVal.Substring(127, 8).Trim()</string>
        <string>lineVal.Substring(220, 2).Trim()</string>
        <string>lineVal.Substring(222, 4).Trim()</string>
        <string>lineVal.Substring(236, 40).Trim()</string>
        <string>lineVal.Substring(398, 1).Trim()</string>
        <string>lineVal.Substring(397, 1) + lineVal.Substring(381, 15 - int.Parse(lineVal.Substring(396, 1))) + "." + lineVal.Substring(396 - int.Parse(lineVal.Substring(396, 1)), int.Parse(lineVal.Substring(396, 1)))</string>
      </columnsExpression>
    </PdtLookupTable>
  </Tables>
</PdtTransformationSetting>